{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { defaultExtendedIconProps } from '../icon/defaults.mjs';\nimport { getIconsTree } from './tree.mjs';\nconst matchChar = /^[a-f0-9]+(-[a-f0-9]+)*$/;\nfunction validateIconProps(item, fix, checkOtherProps) {\n  for (const key in item) {\n    const attr = key;\n    const value = item[attr];\n    const type = typeof value;\n    if (type === \"undefined\") {\n      delete item[attr];\n      continue;\n    }\n    const expectedType = typeof defaultExtendedIconProps[attr];\n    if (expectedType !== \"undefined\") {\n      if (type !== expectedType) {\n        if (fix) {\n          delete item[attr];\n          continue;\n        }\n        return attr;\n      }\n      continue;\n    }\n    if (checkOtherProps && type === \"object\") {\n      if (fix) {\n        delete item[attr];\n      } else {\n        return key;\n      }\n    }\n  }\n  return null;\n}\nfunction validateIconSet(obj, options) {\n  const fix = !!(options && options.fix);\n  if (typeof obj !== \"object\" || obj === null || typeof obj.icons !== \"object\" || !obj.icons) {\n    throw new Error(\"Bad icon set\");\n  }\n  const data = obj;\n  if (options && typeof options.prefix === \"string\") {\n    data.prefix = options.prefix;\n  } else if (\n  // Prefix must be a string and not empty\n  typeof data.prefix !== \"string\" || !data.prefix) {\n    throw new Error(\"Invalid prefix\");\n  }\n  if (options && typeof options.provider === \"string\") {\n    data.provider = options.provider;\n  } else if (data.provider !== void 0) {\n    const value = data.provider;\n    if (typeof value !== \"string\") {\n      if (fix) {\n        delete data.provider;\n      } else {\n        throw new Error(\"Invalid provider\");\n      }\n    }\n  }\n  if (data.aliases !== void 0) {\n    if (typeof data.aliases !== \"object\" || data.aliases === null) {\n      if (fix) {\n        delete data.aliases;\n      } else {\n        throw new Error(\"Invalid aliases list\");\n      }\n    }\n  }\n  const tree = getIconsTree(data);\n  const icons = data.icons;\n  const aliases = data.aliases || /* @__PURE__ */Object.create(null);\n  for (const name in tree) {\n    const treeItem = tree[name];\n    const isAlias = !icons[name];\n    const parentObj = isAlias ? aliases : icons;\n    if (!treeItem) {\n      if (fix) {\n        delete parentObj[name];\n        continue;\n      }\n      throw new Error(`Invalid alias: ${name}`);\n    }\n    if (!name) {\n      if (fix) {\n        delete parentObj[name];\n        continue;\n      }\n      throw new Error(`Invalid icon name: \"${name}\"`);\n    }\n    const item = parentObj[name];\n    if (!isAlias) {\n      if (typeof item.body !== \"string\") {\n        if (fix) {\n          delete parentObj[name];\n          continue;\n        }\n        throw new Error(`Invalid icon: \"${name}\"`);\n      }\n    }\n    const requiredProp = isAlias ? \"parent\" : \"body\";\n    const key = typeof item[requiredProp] !== \"string\" ? requiredProp : validateIconProps(item, fix, true);\n    if (key !== null) {\n      throw new Error(`Invalid property \"${key}\" in \"${name}\"`);\n    }\n  }\n  if (data.not_found !== void 0 && !(data.not_found instanceof Array)) {\n    if (fix) {\n      delete data.not_found;\n    } else {\n      throw new Error(\"Invalid not_found list\");\n    }\n  }\n  if (!Object.keys(data.icons).length && !(data.not_found && data.not_found.length)) {\n    throw new Error(\"Icon set is empty\");\n  }\n  if (fix && !Object.keys(aliases).length) {\n    delete data.aliases;\n  }\n  const failedOptionalProp = validateIconProps(data, false, false);\n  if (failedOptionalProp) {\n    throw new Error(`Invalid value type for \"${failedOptionalProp}\"`);\n  }\n  if (data.chars !== void 0) {\n    if (typeof data.chars !== \"object\" || data.chars === null) {\n      if (fix) {\n        delete data.chars;\n      } else {\n        throw new Error(\"Invalid characters map\");\n      }\n    }\n  }\n  if (typeof data.chars === \"object\") {\n    const chars = data.chars;\n    Object.keys(chars).forEach(char => {\n      if (!matchChar.exec(char) || typeof chars[char] !== \"string\") {\n        if (fix) {\n          delete chars[char];\n          return;\n        }\n        throw new Error(`Invalid character \"${char}\"`);\n      }\n      const target = chars[char];\n      if (!data.icons[target] && (!data.aliases || !data.aliases[target])) {\n        if (fix) {\n          delete chars[char];\n          return;\n        }\n        throw new Error(`Character \"${char}\" points to missing icon \"${target}\"`);\n      }\n    });\n    if (fix && !Object.keys(data.chars).length) {\n      delete data.chars;\n    }\n  }\n  return data;\n}\nexport { matchChar, validateIconSet };","map":{"version":3,"names":["defaultExtendedIconProps","getIconsTree","matchChar","validateIconProps","item","fix","checkOtherProps","key","attr","value","type","expectedType","validateIconSet","obj","options","icons","Error","data","prefix","provider","aliases","tree","Object","create","name","treeItem","isAlias","parentObj","body","requiredProp","not_found","Array","keys","length","failedOptionalProp","chars","forEach","char","exec","target"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/icon-set/validate.mjs"],"sourcesContent":["import { defaultExtendedIconProps } from '../icon/defaults.mjs';\nimport { getIconsTree } from './tree.mjs';\n\nconst matchChar = /^[a-f0-9]+(-[a-f0-9]+)*$/;\nfunction validateIconProps(item, fix, checkOtherProps) {\n  for (const key in item) {\n    const attr = key;\n    const value = item[attr];\n    const type = typeof value;\n    if (type === \"undefined\") {\n      delete item[attr];\n      continue;\n    }\n    const expectedType = typeof defaultExtendedIconProps[attr];\n    if (expectedType !== \"undefined\") {\n      if (type !== expectedType) {\n        if (fix) {\n          delete item[attr];\n          continue;\n        }\n        return attr;\n      }\n      continue;\n    }\n    if (checkOtherProps && type === \"object\") {\n      if (fix) {\n        delete item[attr];\n      } else {\n        return key;\n      }\n    }\n  }\n  return null;\n}\nfunction validateIconSet(obj, options) {\n  const fix = !!(options && options.fix);\n  if (typeof obj !== \"object\" || obj === null || typeof obj.icons !== \"object\" || !obj.icons) {\n    throw new Error(\"Bad icon set\");\n  }\n  const data = obj;\n  if (options && typeof options.prefix === \"string\") {\n    data.prefix = options.prefix;\n  } else if (\n    // Prefix must be a string and not empty\n    typeof data.prefix !== \"string\" || !data.prefix\n  ) {\n    throw new Error(\"Invalid prefix\");\n  }\n  if (options && typeof options.provider === \"string\") {\n    data.provider = options.provider;\n  } else if (data.provider !== void 0) {\n    const value = data.provider;\n    if (typeof value !== \"string\") {\n      if (fix) {\n        delete data.provider;\n      } else {\n        throw new Error(\"Invalid provider\");\n      }\n    }\n  }\n  if (data.aliases !== void 0) {\n    if (typeof data.aliases !== \"object\" || data.aliases === null) {\n      if (fix) {\n        delete data.aliases;\n      } else {\n        throw new Error(\"Invalid aliases list\");\n      }\n    }\n  }\n  const tree = getIconsTree(data);\n  const icons = data.icons;\n  const aliases = data.aliases || /* @__PURE__ */ Object.create(null);\n  for (const name in tree) {\n    const treeItem = tree[name];\n    const isAlias = !icons[name];\n    const parentObj = isAlias ? aliases : icons;\n    if (!treeItem) {\n      if (fix) {\n        delete parentObj[name];\n        continue;\n      }\n      throw new Error(`Invalid alias: ${name}`);\n    }\n    if (!name) {\n      if (fix) {\n        delete parentObj[name];\n        continue;\n      }\n      throw new Error(`Invalid icon name: \"${name}\"`);\n    }\n    const item = parentObj[name];\n    if (!isAlias) {\n      if (typeof item.body !== \"string\") {\n        if (fix) {\n          delete parentObj[name];\n          continue;\n        }\n        throw new Error(`Invalid icon: \"${name}\"`);\n      }\n    }\n    const requiredProp = isAlias ? \"parent\" : \"body\";\n    const key = typeof item[requiredProp] !== \"string\" ? requiredProp : validateIconProps(item, fix, true);\n    if (key !== null) {\n      throw new Error(`Invalid property \"${key}\" in \"${name}\"`);\n    }\n  }\n  if (data.not_found !== void 0 && !(data.not_found instanceof Array)) {\n    if (fix) {\n      delete data.not_found;\n    } else {\n      throw new Error(\"Invalid not_found list\");\n    }\n  }\n  if (!Object.keys(data.icons).length && !(data.not_found && data.not_found.length)) {\n    throw new Error(\"Icon set is empty\");\n  }\n  if (fix && !Object.keys(aliases).length) {\n    delete data.aliases;\n  }\n  const failedOptionalProp = validateIconProps(data, false, false);\n  if (failedOptionalProp) {\n    throw new Error(`Invalid value type for \"${failedOptionalProp}\"`);\n  }\n  if (data.chars !== void 0) {\n    if (typeof data.chars !== \"object\" || data.chars === null) {\n      if (fix) {\n        delete data.chars;\n      } else {\n        throw new Error(\"Invalid characters map\");\n      }\n    }\n  }\n  if (typeof data.chars === \"object\") {\n    const chars = data.chars;\n    Object.keys(chars).forEach((char) => {\n      if (!matchChar.exec(char) || typeof chars[char] !== \"string\") {\n        if (fix) {\n          delete chars[char];\n          return;\n        }\n        throw new Error(`Invalid character \"${char}\"`);\n      }\n      const target = chars[char];\n      if (!data.icons[target] && (!data.aliases || !data.aliases[target])) {\n        if (fix) {\n          delete chars[char];\n          return;\n        }\n        throw new Error(\n          `Character \"${char}\" points to missing icon \"${target}\"`\n        );\n      }\n    });\n    if (fix && !Object.keys(data.chars).length) {\n      delete data.chars;\n    }\n  }\n  return data;\n}\n\nexport { matchChar, validateIconSet };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}