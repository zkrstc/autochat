{"ast":null,"code":"import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({\n    directed: false\n  });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}","map":{"version":3,"names":["_","Graph","slack","feasibleTree","g","t","directed","start","nodes","size","nodeCount","setNode","edge","delta","tightTree","findMinSlackEdge","hasNode","v","shiftRanks","dfs","forEach","nodeEdges","e","edgeV","w","setEdge","minBy","edges","node","rank"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}