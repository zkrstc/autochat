{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { createUTF16EmojiRegexItem, createOptionalEmojiRegexItem, createSequenceEmojiRegexItem, createSetEmojiRegexItem } from './base.mjs';\nimport { splitEmojiSequences } from '../cleanup.mjs';\nimport { convertEmojiSequenceToUTF32 } from '../convert.mjs';\nimport { createRegexForNumbersSequence } from './numbers.mjs';\nimport { joinerEmoji } from '../data.mjs';\nimport { mergeSimilarItemsInSet } from './similar.mjs';\nfunction createEmojisTree(sequences) {\n  const root = [];\n  for (let i = 0; i < sequences.length; i++) {\n    const split = splitEmojiSequences(convertEmojiSequenceToUTF32(sequences[i]));\n    let parent = root;\n    for (let j = 0; j < split.length; j++) {\n      const regex = createRegexForNumbersSequence(split[j]);\n      let item;\n      const match = parent.find(item2 => item2.regex.regex === regex.regex);\n      if (!match) {\n        item = {\n          regex\n        };\n        parent.push(item);\n      } else {\n        item = match;\n      }\n      if (j === split.length - 1) {\n        item.end = true;\n        break;\n      }\n      parent = item.children || (item.children = []);\n    }\n  }\n  return root;\n}\nfunction parseEmojiTree(items) {\n  function mergeParsedChildren(items2) {\n    const parsedItems = [];\n    const mapWithoutEnd = /* @__PURE__ */Object.create(null);\n    const mapWithEnd = /* @__PURE__ */Object.create(null);\n    for (let i = 0; i < items2.length; i++) {\n      const item = items2[i];\n      const children = item.children;\n      if (children) {\n        const fullItem = item;\n        const target = item.end ? mapWithEnd : mapWithoutEnd;\n        const regex = children.regex;\n        if (!target[regex]) {\n          target[regex] = [fullItem];\n        } else {\n          target[regex].push(fullItem);\n        }\n      } else {\n        parsedItems.push(item.regex);\n      }\n    }\n    [mapWithEnd, mapWithoutEnd].forEach(source => {\n      for (const regex in source) {\n        const items3 = source[regex];\n        const firstItem = items3[0];\n        let childSequence = [createUTF16EmojiRegexItem([joinerEmoji]), firstItem.children];\n        if (firstItem.end) {\n          childSequence = [createOptionalEmojiRegexItem(createSequenceEmojiRegexItem(childSequence))];\n        }\n        let mergedRegex;\n        if (items3.length === 1) {\n          mergedRegex = firstItem.regex;\n        } else {\n          mergedRegex = mergeSimilarItemsInSet(createSetEmojiRegexItem(items3.map(item => item.regex)));\n        }\n        const sequence = createSequenceEmojiRegexItem([mergedRegex, ...childSequence]);\n        parsedItems.push(sequence);\n      }\n    });\n    if (parsedItems.length === 1) {\n      return parsedItems[0];\n    }\n    const set = createSetEmojiRegexItem(parsedItems);\n    const result = mergeSimilarItemsInSet(set);\n    return result;\n  }\n  function parseItemChildren(item) {\n    const result = {\n      regex: item.regex,\n      end: !!item.end\n    };\n    const children = item.children;\n    if (!children) {\n      return result;\n    }\n    const parsedChildren = children.map(parseItemChildren);\n    result.children = mergeParsedChildren(parsedChildren);\n    return result;\n  }\n  const parsed = items.map(parseItemChildren);\n  return mergeParsedChildren(parsed);\n}\nexport { createEmojisTree, parseEmojiTree };","map":{"version":3,"names":["createUTF16EmojiRegexItem","createOptionalEmojiRegexItem","createSequenceEmojiRegexItem","createSetEmojiRegexItem","splitEmojiSequences","convertEmojiSequenceToUTF32","createRegexForNumbersSequence","joinerEmoji","mergeSimilarItemsInSet","createEmojisTree","sequences","root","i","length","split","parent","j","regex","item","match","find","item2","push","end","children","parseEmojiTree","items","mergeParsedChildren","items2","parsedItems","mapWithoutEnd","Object","create","mapWithEnd","fullItem","target","forEach","source","items3","firstItem","childSequence","mergedRegex","map","sequence","set","result","parseItemChildren","parsedChildren","parsed"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/emoji/regex/tree.mjs"],"sourcesContent":["import { createUTF16EmojiRegexItem, createOptionalEmojiRegexItem, createSequenceEmojiRegexItem, createSetEmojiRegexItem } from './base.mjs';\nimport { splitEmojiSequences } from '../cleanup.mjs';\nimport { convertEmojiSequenceToUTF32 } from '../convert.mjs';\nimport { createRegexForNumbersSequence } from './numbers.mjs';\nimport { joinerEmoji } from '../data.mjs';\nimport { mergeSimilarItemsInSet } from './similar.mjs';\n\nfunction createEmojisTree(sequences) {\n  const root = [];\n  for (let i = 0; i < sequences.length; i++) {\n    const split = splitEmojiSequences(\n      convertEmojiSequenceToUTF32(sequences[i])\n    );\n    let parent = root;\n    for (let j = 0; j < split.length; j++) {\n      const regex = createRegexForNumbersSequence(split[j]);\n      let item;\n      const match = parent.find(\n        (item2) => item2.regex.regex === regex.regex\n      );\n      if (!match) {\n        item = {\n          regex\n        };\n        parent.push(item);\n      } else {\n        item = match;\n      }\n      if (j === split.length - 1) {\n        item.end = true;\n        break;\n      }\n      parent = item.children || (item.children = []);\n    }\n  }\n  return root;\n}\nfunction parseEmojiTree(items) {\n  function mergeParsedChildren(items2) {\n    const parsedItems = [];\n    const mapWithoutEnd = /* @__PURE__ */ Object.create(null);\n    const mapWithEnd = /* @__PURE__ */ Object.create(null);\n    for (let i = 0; i < items2.length; i++) {\n      const item = items2[i];\n      const children = item.children;\n      if (children) {\n        const fullItem = item;\n        const target = item.end ? mapWithEnd : mapWithoutEnd;\n        const regex = children.regex;\n        if (!target[regex]) {\n          target[regex] = [fullItem];\n        } else {\n          target[regex].push(fullItem);\n        }\n      } else {\n        parsedItems.push(item.regex);\n      }\n    }\n    [mapWithEnd, mapWithoutEnd].forEach((source) => {\n      for (const regex in source) {\n        const items3 = source[regex];\n        const firstItem = items3[0];\n        let childSequence = [\n          createUTF16EmojiRegexItem([joinerEmoji]),\n          firstItem.children\n        ];\n        if (firstItem.end) {\n          childSequence = [\n            createOptionalEmojiRegexItem(\n              createSequenceEmojiRegexItem(childSequence)\n            )\n          ];\n        }\n        let mergedRegex;\n        if (items3.length === 1) {\n          mergedRegex = firstItem.regex;\n        } else {\n          mergedRegex = mergeSimilarItemsInSet(\n            createSetEmojiRegexItem(items3.map((item) => item.regex))\n          );\n        }\n        const sequence = createSequenceEmojiRegexItem([\n          mergedRegex,\n          ...childSequence\n        ]);\n        parsedItems.push(sequence);\n      }\n    });\n    if (parsedItems.length === 1) {\n      return parsedItems[0];\n    }\n    const set = createSetEmojiRegexItem(parsedItems);\n    const result = mergeSimilarItemsInSet(set);\n    return result;\n  }\n  function parseItemChildren(item) {\n    const result = {\n      regex: item.regex,\n      end: !!item.end\n    };\n    const children = item.children;\n    if (!children) {\n      return result;\n    }\n    const parsedChildren = children.map(parseItemChildren);\n    result.children = mergeParsedChildren(parsedChildren);\n    return result;\n  }\n  const parsed = items.map(parseItemChildren);\n  return mergeParsedChildren(parsed);\n}\n\nexport { createEmojisTree, parseEmojiTree };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}