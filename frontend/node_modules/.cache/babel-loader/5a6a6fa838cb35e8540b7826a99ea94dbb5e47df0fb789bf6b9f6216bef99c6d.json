{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'TestPage',\n  data() {\n    return {\n      // 已有数据...\n      showEditModal: false,\n      editData: {\n        id: null,\n        input_data: '',\n        expected_output: ''\n      },\n      error: null,\n      selectedRequirement: '',\n      selectedRequirementId: null,\n      testCases: [],\n      loading: false,\n      generating: false,\n      isGenerating: false\n    };\n  },\n  created() {\n    this.fetchRequirements();\n  },\n  methods: {\n    handleRequirementSelected(id) {\n      this.selectedRequirementId = id;\n      console.log('Selected Requirement ID:', this.selectedRequirementId);\n      this.fetchTestCases(id);\n      this.fetchArchitecture(id);\n    },\n    async fetchRequirements() {\n      this.loading = true;\n      this.error = null;\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/api/requirements/list');\n        this.requirements = response.data;\n      } catch (err) {\n        console.error('Error fetching requirements:', err);\n        this.error = '无法加载需求列表';\n      } finally {\n        this.loading = false;\n      }\n    },\n    async fetchTestCases(requirementId) {\n      this.loading = true;\n      try {\n        const response = await axios.get('http://127.0.0.1:5000/api/test_cases', {\n          params: {\n            requirement_id: requirementId\n          }\n        });\n        this.testCases = response.data.data || [];\n      } catch (error) {\n        console.error('获取测试用例失败:', error);\n        this.testCases = [];\n      } finally {\n        this.loading = false;\n      }\n    },\n    async generateTestCases() {\n      if (!this.requirementId) {\n        this.$toast.error('请先选择需求');\n        return;\n      }\n      this.isGenerating = true;\n      try {\n        const response = await this.$axios.post('http://127.0.0.1:5000/api/test-cases/generate', {\n          requirement_id: this.selectedRequirementId,\n          module_code: this.moduleCode\n        });\n        if (response.data.error) {\n          throw new Error(response.data.error);\n        }\n        this.$toast.success(`成功生成 ${response.data.length} 条测试用例`);\n        this.$emit('test-cases-generated', response.data);\n      } catch (error) {\n        console.error('生成测试用例失败:', error);\n        this.$toast.error(`生成测试用例失败: ${error.message}`);\n      } finally {\n        this.isGenerating = false;\n      }\n    },\n    formatJson(jsonStr) {\n      try {\n        const obj = JSON.parse(jsonStr);\n        return JSON.stringify(obj, null, 2);\n      } catch {\n        return jsonStr;\n      }\n    },\n    formatDate(dateStr) {\n      return dateStr ? new Date(dateStr).toLocaleString() : '-';\n    },\n    getTypeBadgeClass(type) {\n      const classes = {\n        login: 'bg-blue-100 text-blue-800',\n        purchase: 'bg-green-100 text-green-800',\n        default: 'bg-gray-100 text-gray-800'\n      };\n      return classes[type] || classes.default;\n    },\n    openEditModal(testCase) {\n      this.editData = {\n        id: testCase.id,\n        input_data: testCase.input_data,\n        expected_output: testCase.expected_output\n      };\n      this.showEditModal = true;\n    },\n    submitEdit() {\n      axios.put(`http://127.0.0.1:5000/api/test_cases/${this.editData.id}`, {\n        input_data: this.editData.input_data,\n        expected_output: this.editData.expected_output\n      }).then(() => {\n        this.showEditModal = false;\n        this.fetchTestCases(this.editData.id); // 刷新数据\n      }).catch(err => {\n        console.error('更新失败', err);\n      });\n    },\n    deleteTestCase(id) {\n      if (!confirm('确定删除该测试用例吗？')) return;\n      axios.delete(`http://127.0.0.1:5000/api/test_cases/${id}`).then(() => {\n        this.fetchTestCases(this.editData.id);\n      }).catch(err => {\n        console.error('删除失败', err);\n      });\n    }\n  },\n  watch: {\n    selectedRequirement(newVal) {\n      if (newVal) {\n        this.fetchTestCases(newVal);\n      } else {\n        this.testCases = [];\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","showEditModal","editData","id","input_data","expected_output","error","selectedRequirement","selectedRequirementId","testCases","loading","generating","isGenerating","created","fetchRequirements","methods","handleRequirementSelected","console","log","fetchTestCases","fetchArchitecture","response","get","requirements","err","requirementId","params","requirement_id","generateTestCases","$toast","$axios","post","module_code","moduleCode","Error","success","length","$emit","message","formatJson","jsonStr","obj","JSON","parse","stringify","formatDate","dateStr","Date","toLocaleString","getTypeBadgeClass","type","classes","login","purchase","default","openEditModal","testCase","submitEdit","put","then","catch","deleteTestCase","confirm","delete","watch","newVal"],"sources":["C:\\Users\\ASUS\\Desktop\\autochat\\frontend\\src\\views\\TestPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"p-8\">\r\n        <!-- 需求选择和生成按钮 -->\r\n        <div class=\"flex items-center justify-between mb-6\">\r\n            <div class=\"flex items-center space-x-4\">\r\n                <div class=\"text-lg font-medium\">需求选择：</div>\r\n                <select v-model=\"selectedRequirement\"\r\n                    class=\"border border-gray-300 rounded-button px-4 py-2 min-w-[200px] focus:outline-none focus:ring-2 focus:ring-primary\"\r\n                    @change=\"handleRequirementSelected(selectedRequirement)\">\r\n                    <option disabled value=\"\">请选择需求</option>\r\n                    <option v-for=\"req in requirements\" :key=\"req.id\" :value=\"req.id\">\r\n                        {{ req.name }} v{{ req.version }}\r\n                    </option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"bg-white rounded-lg shadow p-6 mb-6\">\r\n            <div class=\"flex justify-between items-center mb-6\">\r\n                <h2 class=\"text-lg font-medium\">测试用例列表</h2>\r\n                <button @click=\"generateTestCases\"\r\n                    class=\"bg-primary text-white px-4 py-2 !rounded-button flex items-center\" :disabled=\"isGenerating\">\r\n                    <i class=\"fas fa-plus mr-2\"></i>\r\n                    {{ isGenerating ? '生成中...' : '生成测试用例' }}\r\n                </button>\r\n            </div>\r\n            <div class=\"overflow-x-auto\">\r\n                <table class=\"w-full\">\r\n                    <thead>\r\n                        <tr class=\"bg-gray-50\">\r\n                            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">ID</th>\r\n                            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">类型</th>\r\n                            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">输入数据</th>\r\n                            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">预期输出</th>\r\n                            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">操作</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody class=\"divide-y divide-gray-200\">\r\n                        <!-- 加载状态 -->\r\n                        <tr v-if=\"loading\">\r\n                            <td colspan=\"5\" class=\"px-6 py-4 text-center\">\r\n                                <i class=\"fas fa-spinner fa-spin mr-2\"></i>加载中...\r\n                            </td>\r\n                        </tr>\r\n\r\n                        <!-- 空状态 -->\r\n                        <tr v-else-if=\"testCases.length === 0\">\r\n                            <td colspan=\"5\" class=\"px-6 py-4 text-center text-gray-500\">\r\n                                没有找到测试用例\r\n                            </td>\r\n                        </tr>\r\n\r\n                        <!-- 测试用例数据 -->\r\n                        <tr v-for=\"testCase in testCases\" :key=\"testCase.id\" class=\"hover:bg-gray-50\">\r\n                            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{{ testCase.id }}</td>\r\n                            <td class=\"px-6 py-4 whitespace-nowrap\">\r\n                                <span class=\"px-2 py-1 text-xs rounded-full\" :class=\"getTypeBadgeClass(testCase.type)\">\r\n                                    {{ testCase.type }}\r\n                                </span>\r\n                            </td>\r\n                            <td class=\"px-6 py-4 text-sm text-gray-500 max-w-xs truncate\">\r\n                                <pre class=\"truncate\">{{ formatJson(testCase.input_data) }}</pre>\r\n                            </td>\r\n                            <td class=\"px-6 py-4 text-sm text-gray-500 max-w-xs truncate\">\r\n                                <pre class=\"truncate\">{{ formatJson(testCase.expected_output) }}</pre>\r\n                            </td>\r\n                            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                                <button @click=\"openEditModal(testCase)\"\r\n                                    class=\"text-blue-500 hover:underline\">修改</button>\r\n                                <button @click=\"deleteTestCase(testCase.id)\"\r\n                                    class=\"text-red-500 hover:underline ml-2\">删除</button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n    <!-- 弹窗编辑框 -->\r\n    <div v-if=\"showEditModal\" class=\"fixed inset-0 bg-gray-900 bg-opacity-50 flex justify-center items-center z-50\">\r\n        <div class=\"bg-white p-6 rounded shadow w-96\">\r\n            <h3 class=\"text-lg font-semibold mb-4\">编辑测试用例</h3>\r\n            <div class=\"mb-4\">\r\n                <label class=\"block text-sm\">输入数据：</label>\r\n                <textarea v-model=\"editData.input_data\" class=\"w-full border p-2 text-sm\" rows=\"3\"></textarea>\r\n            </div>\r\n            <div class=\"mb-4\">\r\n                <label class=\"block text-sm\">预期输出：</label>\r\n                <textarea v-model=\"editData.expected_output\" class=\"w-full border p-2 text-sm\" rows=\"3\"></textarea>\r\n            </div>\r\n            <div class=\"flex justify-end space-x-2\">\r\n                <button @click=\"showEditModal = false\" class=\"text-gray-600\">取消</button>\r\n                <button @click=\"submitEdit\" class=\"bg-blue-500 text-white px-4 py-1 rounded\">保存</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  export default {\r\n    name: 'TestPage',\r\n    data() {\r\n        return {\r\n            // 已有数据...\r\n            showEditModal: false,\r\n            editData: {\r\n                id: null,\r\n                input_data: '',\r\n                expected_output: ''\r\n            },\r\n            error: null,\r\n            selectedRequirement: '',\r\n            selectedRequirementId: null,\r\n            testCases: [],\r\n            loading: false,\r\n            generating: false,\r\n            isGenerating: false\r\n        }\r\n    },\r\n    created() {\r\n        this.fetchRequirements();\r\n    },\r\n    methods: {\r\n        \r\n        handleRequirementSelected(id) {\r\n            this.selectedRequirementId = id;\r\n            console.log('Selected Requirement ID:', this.selectedRequirementId);\r\n            this.fetchTestCases(id);\r\n            this.fetchArchitecture(id);\r\n        },\r\n        \r\n        async fetchRequirements() {\r\n            this.loading = true;\r\n            this.error = null;\r\n            try {\r\n                const response = await axios.get('http://127.0.0.1:5000/api/requirements/list');\r\n                this.requirements = response.data;\r\n            } catch (err) {\r\n                console.error('Error fetching requirements:', err);\r\n                this.error = '无法加载需求列表';\r\n            } finally {\r\n                this.loading = false;\r\n            }\r\n        },\r\n        async fetchTestCases(requirementId) {\r\n            this.loading = true;\r\n            try {\r\n                const response = await axios.get('http://127.0.0.1:5000/api/test_cases', {\r\n                    params: { requirement_id: requirementId }\r\n                });\r\n                this.testCases = response.data.data || [];\r\n            } catch (error) {\r\n                console.error('获取测试用例失败:', error);\r\n                this.testCases = [];\r\n            } finally {\r\n                this.loading = false;\r\n            }\r\n        },\r\n\r\n        async generateTestCases() {\r\n            if (!this.requirementId) {\r\n                this.$toast.error('请先选择需求')\r\n                return\r\n            }\r\n\r\n            this.isGenerating = true\r\n\r\n            try {\r\n                const response = await this.$axios.post('http://127.0.0.1:5000/api/test-cases/generate', {\r\n                    requirement_id: this.selectedRequirementId,\r\n                    module_code: this.moduleCode\r\n                })\r\n\r\n                if (response.data.error) {\r\n                    throw new Error(response.data.error)\r\n                }\r\n\r\n                this.$toast.success(`成功生成 ${response.data.length} 条测试用例`)\r\n                this.$emit('test-cases-generated', response.data)\r\n            } catch (error) {\r\n                console.error('生成测试用例失败:', error)\r\n                this.$toast.error(`生成测试用例失败: ${error.message}`)\r\n            } finally {\r\n                this.isGenerating = false\r\n            }\r\n        },\r\n\r\n        formatJson(jsonStr) {\r\n            try {\r\n                const obj = JSON.parse(jsonStr);\r\n                return JSON.stringify(obj, null, 2);\r\n            } catch {\r\n                return jsonStr;\r\n            }\r\n        },\r\n\r\n        formatDate(dateStr) {\r\n            return dateStr ? new Date(dateStr).toLocaleString() : '-';\r\n        },\r\n\r\n        getTypeBadgeClass(type) {\r\n            const classes = {\r\n                login: 'bg-blue-100 text-blue-800',\r\n                purchase: 'bg-green-100 text-green-800',\r\n                default: 'bg-gray-100 text-gray-800'\r\n            };\r\n            return classes[type] || classes.default;\r\n        },\r\n        openEditModal(testCase) {\r\n            this.editData = {\r\n                id: testCase.id,\r\n                input_data: testCase.input_data,\r\n                expected_output: testCase.expected_output\r\n            }\r\n            this.showEditModal = true\r\n        },\r\n        submitEdit() {\r\n            axios\r\n                .put(`http://127.0.0.1:5000/api/test_cases/${this.editData.id}`, {\r\n                    input_data: this.editData.input_data,\r\n                    expected_output: this.editData.expected_output\r\n                })\r\n                .then(() => {\r\n                    this.showEditModal = false\r\n                    this.fetchTestCases(this.editData.id) // 刷新数据\r\n                })\r\n                .catch(err => {\r\n                    console.error('更新失败', err)\r\n                })\r\n        },\r\n        deleteTestCase(id) {\r\n            if (!confirm('确定删除该测试用例吗？')) return\r\n            axios\r\n                .delete(`http://127.0.0.1:5000/api/test_cases/${id}`)\r\n                .then(() => {\r\n                    this.fetchTestCases(this.editData.id)\r\n                })\r\n                .catch(err => {\r\n                    console.error('删除失败', err)\r\n                })\r\n        }\r\n    },\r\n    watch: {\r\n        selectedRequirement(newVal) {\r\n            if (newVal) {\r\n                this.fetchTestCases(newVal);\r\n            } else {\r\n                this.testCases = [];\r\n            }\r\n        }\r\n    }\r\n  }\r\n  </script>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}