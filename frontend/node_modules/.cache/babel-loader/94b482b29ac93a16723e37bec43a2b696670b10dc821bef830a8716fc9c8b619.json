{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defaultIconProps } from '../icon/defaults.mjs';\nimport { defaultIconCustomisations } from '../customisations/defaults.mjs';\nimport { calculateSize } from './size.mjs';\nimport { wrapSVGContent } from './defs.mjs';\nconst isUnsetKeyword = value => value === \"unset\" || value === \"undefined\" || value === \"none\";\nfunction iconToSVG(icon, customisations) {\n  const fullIcon = {\n    ...defaultIconProps,\n    ...icon\n  };\n  const fullCustomisations = {\n    ...defaultIconCustomisations,\n    ...customisations\n  };\n  const box = {\n    left: fullIcon.left,\n    top: fullIcon.top,\n    width: fullIcon.width,\n    height: fullIcon.height\n  };\n  let body = fullIcon.body;\n  [fullIcon, fullCustomisations].forEach(props => {\n    const transformations = [];\n    const hFlip = props.hFlip;\n    const vFlip = props.vFlip;\n    let rotation = props.rotate;\n    if (hFlip) {\n      if (vFlip) {\n        rotation += 2;\n      } else {\n        transformations.push(\"translate(\" + (box.width + box.left).toString() + \" \" + (0 - box.top).toString() + \")\");\n        transformations.push(\"scale(-1 1)\");\n        box.top = box.left = 0;\n      }\n    } else if (vFlip) {\n      transformations.push(\"translate(\" + (0 - box.left).toString() + \" \" + (box.height + box.top).toString() + \")\");\n      transformations.push(\"scale(1 -1)\");\n      box.top = box.left = 0;\n    }\n    let tempValue;\n    if (rotation < 0) {\n      rotation -= Math.floor(rotation / 4) * 4;\n    }\n    rotation = rotation % 4;\n    switch (rotation) {\n      case 1:\n        tempValue = box.height / 2 + box.top;\n        transformations.unshift(\"rotate(90 \" + tempValue.toString() + \" \" + tempValue.toString() + \")\");\n        break;\n      case 2:\n        transformations.unshift(\"rotate(180 \" + (box.width / 2 + box.left).toString() + \" \" + (box.height / 2 + box.top).toString() + \")\");\n        break;\n      case 3:\n        tempValue = box.width / 2 + box.left;\n        transformations.unshift(\"rotate(-90 \" + tempValue.toString() + \" \" + tempValue.toString() + \")\");\n        break;\n    }\n    if (rotation % 2 === 1) {\n      if (box.left !== box.top) {\n        tempValue = box.left;\n        box.left = box.top;\n        box.top = tempValue;\n      }\n      if (box.width !== box.height) {\n        tempValue = box.width;\n        box.width = box.height;\n        box.height = tempValue;\n      }\n    }\n    if (transformations.length) {\n      body = wrapSVGContent(body, '<g transform=\"' + transformations.join(\" \") + '\">', \"</g>\");\n    }\n  });\n  const customisationsWidth = fullCustomisations.width;\n  const customisationsHeight = fullCustomisations.height;\n  const boxWidth = box.width;\n  const boxHeight = box.height;\n  let width;\n  let height;\n  if (customisationsWidth === null) {\n    height = customisationsHeight === null ? \"1em\" : customisationsHeight === \"auto\" ? boxHeight : customisationsHeight;\n    width = calculateSize(height, boxWidth / boxHeight);\n  } else {\n    width = customisationsWidth === \"auto\" ? boxWidth : customisationsWidth;\n    height = customisationsHeight === null ? calculateSize(width, boxHeight / boxWidth) : customisationsHeight === \"auto\" ? boxHeight : customisationsHeight;\n  }\n  const attributes = {};\n  const setAttr = (prop, value) => {\n    if (!isUnsetKeyword(value)) {\n      attributes[prop] = value.toString();\n    }\n  };\n  setAttr(\"width\", width);\n  setAttr(\"height\", height);\n  const viewBox = [box.left, box.top, boxWidth, boxHeight];\n  attributes.viewBox = viewBox.join(\" \");\n  return {\n    attributes,\n    viewBox,\n    body\n  };\n}\nexport { iconToSVG, isUnsetKeyword };","map":{"version":3,"names":["defaultIconProps","defaultIconCustomisations","calculateSize","wrapSVGContent","isUnsetKeyword","value","iconToSVG","icon","customisations","fullIcon","fullCustomisations","box","left","top","width","height","body","forEach","props","transformations","hFlip","vFlip","rotation","rotate","push","toString","tempValue","Math","floor","unshift","length","join","customisationsWidth","customisationsHeight","boxWidth","boxHeight","attributes","setAttr","prop","viewBox"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/svg/build.mjs"],"sourcesContent":["import { defaultIconProps } from '../icon/defaults.mjs';\nimport { defaultIconCustomisations } from '../customisations/defaults.mjs';\nimport { calculateSize } from './size.mjs';\nimport { wrapSVGContent } from './defs.mjs';\n\nconst isUnsetKeyword = (value) => value === \"unset\" || value === \"undefined\" || value === \"none\";\nfunction iconToSVG(icon, customisations) {\n  const fullIcon = {\n    ...defaultIconProps,\n    ...icon\n  };\n  const fullCustomisations = {\n    ...defaultIconCustomisations,\n    ...customisations\n  };\n  const box = {\n    left: fullIcon.left,\n    top: fullIcon.top,\n    width: fullIcon.width,\n    height: fullIcon.height\n  };\n  let body = fullIcon.body;\n  [fullIcon, fullCustomisations].forEach((props) => {\n    const transformations = [];\n    const hFlip = props.hFlip;\n    const vFlip = props.vFlip;\n    let rotation = props.rotate;\n    if (hFlip) {\n      if (vFlip) {\n        rotation += 2;\n      } else {\n        transformations.push(\n          \"translate(\" + (box.width + box.left).toString() + \" \" + (0 - box.top).toString() + \")\"\n        );\n        transformations.push(\"scale(-1 1)\");\n        box.top = box.left = 0;\n      }\n    } else if (vFlip) {\n      transformations.push(\n        \"translate(\" + (0 - box.left).toString() + \" \" + (box.height + box.top).toString() + \")\"\n      );\n      transformations.push(\"scale(1 -1)\");\n      box.top = box.left = 0;\n    }\n    let tempValue;\n    if (rotation < 0) {\n      rotation -= Math.floor(rotation / 4) * 4;\n    }\n    rotation = rotation % 4;\n    switch (rotation) {\n      case 1:\n        tempValue = box.height / 2 + box.top;\n        transformations.unshift(\n          \"rotate(90 \" + tempValue.toString() + \" \" + tempValue.toString() + \")\"\n        );\n        break;\n      case 2:\n        transformations.unshift(\n          \"rotate(180 \" + (box.width / 2 + box.left).toString() + \" \" + (box.height / 2 + box.top).toString() + \")\"\n        );\n        break;\n      case 3:\n        tempValue = box.width / 2 + box.left;\n        transformations.unshift(\n          \"rotate(-90 \" + tempValue.toString() + \" \" + tempValue.toString() + \")\"\n        );\n        break;\n    }\n    if (rotation % 2 === 1) {\n      if (box.left !== box.top) {\n        tempValue = box.left;\n        box.left = box.top;\n        box.top = tempValue;\n      }\n      if (box.width !== box.height) {\n        tempValue = box.width;\n        box.width = box.height;\n        box.height = tempValue;\n      }\n    }\n    if (transformations.length) {\n      body = wrapSVGContent(\n        body,\n        '<g transform=\"' + transformations.join(\" \") + '\">',\n        \"</g>\"\n      );\n    }\n  });\n  const customisationsWidth = fullCustomisations.width;\n  const customisationsHeight = fullCustomisations.height;\n  const boxWidth = box.width;\n  const boxHeight = box.height;\n  let width;\n  let height;\n  if (customisationsWidth === null) {\n    height = customisationsHeight === null ? \"1em\" : customisationsHeight === \"auto\" ? boxHeight : customisationsHeight;\n    width = calculateSize(height, boxWidth / boxHeight);\n  } else {\n    width = customisationsWidth === \"auto\" ? boxWidth : customisationsWidth;\n    height = customisationsHeight === null ? calculateSize(width, boxHeight / boxWidth) : customisationsHeight === \"auto\" ? boxHeight : customisationsHeight;\n  }\n  const attributes = {};\n  const setAttr = (prop, value) => {\n    if (!isUnsetKeyword(value)) {\n      attributes[prop] = value.toString();\n    }\n  };\n  setAttr(\"width\", width);\n  setAttr(\"height\", height);\n  const viewBox = [box.left, box.top, boxWidth, boxHeight];\n  attributes.viewBox = viewBox.join(\" \");\n  return {\n    attributes,\n    viewBox,\n    body\n  };\n}\n\nexport { iconToSVG, isUnsetKeyword };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}