{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst format = {\n  selectorStart: {\n    compressed: \"{\",\n    compact: \" {\",\n    expanded: \" {\"\n  },\n  selectorEnd: {\n    compressed: \"}\",\n    compact: \"; }\\n\",\n    expanded: \";\\n}\\n\"\n  },\n  rule: {\n    compressed: \"{key}:\",\n    compact: \" {key}: \",\n    expanded: \"\\n  {key}: \"\n  }\n};\nfunction formatCSS(data, mode = \"expanded\") {\n  const results = [];\n  for (let i = 0; i < data.length; i++) {\n    const {\n      selector,\n      rules\n    } = data[i];\n    const fullSelector = selector instanceof Array ? selector.join(mode === \"compressed\" ? \",\" : \", \") : selector;\n    let entry = fullSelector + format.selectorStart[mode];\n    let firstRule = true;\n    for (const key in rules) {\n      if (!firstRule) {\n        entry += \";\";\n      }\n      entry += format.rule[mode].replace(\"{key}\", key) + rules[key];\n      firstRule = false;\n    }\n    entry += format.selectorEnd[mode];\n    results.push(entry);\n  }\n  return results.join(mode === \"compressed\" ? \"\" : \"\\n\");\n}\nexport { formatCSS };","map":{"version":3,"names":["format","selectorStart","compressed","compact","expanded","selectorEnd","rule","formatCSS","data","mode","results","i","length","selector","rules","fullSelector","Array","join","entry","firstRule","key","replace","push"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/css/format.mjs"],"sourcesContent":["const format = {\n  selectorStart: {\n    compressed: \"{\",\n    compact: \" {\",\n    expanded: \" {\"\n  },\n  selectorEnd: {\n    compressed: \"}\",\n    compact: \"; }\\n\",\n    expanded: \";\\n}\\n\"\n  },\n  rule: {\n    compressed: \"{key}:\",\n    compact: \" {key}: \",\n    expanded: \"\\n  {key}: \"\n  }\n};\nfunction formatCSS(data, mode = \"expanded\") {\n  const results = [];\n  for (let i = 0; i < data.length; i++) {\n    const { selector, rules } = data[i];\n    const fullSelector = selector instanceof Array ? selector.join(mode === \"compressed\" ? \",\" : \", \") : selector;\n    let entry = fullSelector + format.selectorStart[mode];\n    let firstRule = true;\n    for (const key in rules) {\n      if (!firstRule) {\n        entry += \";\";\n      }\n      entry += format.rule[mode].replace(\"{key}\", key) + rules[key];\n      firstRule = false;\n    }\n    entry += format.selectorEnd[mode];\n    results.push(entry);\n  }\n  return results.join(mode === \"compressed\" ? \"\" : \"\\n\");\n}\n\nexport { formatCSS };\n"],"mappings":";AAAA,MAAMA,MAAM,GAAG;EACbC,aAAa,EAAE;IACbC,UAAU,EAAE,GAAG;IACfC,OAAO,EAAE,IAAI;IACbC,QAAQ,EAAE;EACZ,CAAC;EACDC,WAAW,EAAE;IACXH,UAAU,EAAE,GAAG;IACfC,OAAO,EAAE,OAAO;IAChBC,QAAQ,EAAE;EACZ,CAAC;EACDE,IAAI,EAAE;IACJJ,UAAU,EAAE,QAAQ;IACpBC,OAAO,EAAE,UAAU;IACnBC,QAAQ,EAAE;EACZ;AACF,CAAC;AACD,SAASG,SAASA,CAACC,IAAI,EAAEC,IAAI,GAAG,UAAU,EAAE;EAC1C,MAAMC,OAAO,GAAG,EAAE;EAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,MAAM;MAAEE,QAAQ;MAAEC;IAAM,CAAC,GAAGN,IAAI,CAACG,CAAC,CAAC;IACnC,MAAMI,YAAY,GAAGF,QAAQ,YAAYG,KAAK,GAAGH,QAAQ,CAACI,IAAI,CAACR,IAAI,KAAK,YAAY,GAAG,GAAG,GAAG,IAAI,CAAC,GAAGI,QAAQ;IAC7G,IAAIK,KAAK,GAAGH,YAAY,GAAGf,MAAM,CAACC,aAAa,CAACQ,IAAI,CAAC;IACrD,IAAIU,SAAS,GAAG,IAAI;IACpB,KAAK,MAAMC,GAAG,IAAIN,KAAK,EAAE;MACvB,IAAI,CAACK,SAAS,EAAE;QACdD,KAAK,IAAI,GAAG;MACd;MACAA,KAAK,IAAIlB,MAAM,CAACM,IAAI,CAACG,IAAI,CAAC,CAACY,OAAO,CAAC,OAAO,EAAED,GAAG,CAAC,GAAGN,KAAK,CAACM,GAAG,CAAC;MAC7DD,SAAS,GAAG,KAAK;IACnB;IACAD,KAAK,IAAIlB,MAAM,CAACK,WAAW,CAACI,IAAI,CAAC;IACjCC,OAAO,CAACY,IAAI,CAACJ,KAAK,CAAC;EACrB;EACA,OAAOR,OAAO,CAACO,IAAI,CAACR,IAAI,KAAK,YAAY,GAAG,EAAE,GAAG,IAAI,CAAC;AACxD;AAEA,SAASF,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}