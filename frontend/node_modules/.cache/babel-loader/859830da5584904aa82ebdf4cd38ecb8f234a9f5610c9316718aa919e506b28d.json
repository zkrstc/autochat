{"ast":null,"code":"import { defaultIconProps } from '../icon/defaults.mjs';\nimport { getCommonCSSRules, generateItemCSSRules, generateItemContent } from './common.mjs';\nimport { formatCSS } from './format.mjs';\nimport '../svg/html.mjs';\nimport '../svg/size.mjs';\nimport '../svg/url.mjs';\nimport '../icon/square.mjs';\nimport '../svg/build.mjs';\nimport '../customisations/defaults.mjs';\nimport '../svg/defs.mjs';\nfunction getIconCSS(icon, options = {}) {\n  const body = options.customise ? options.customise(icon.body) : icon.body;\n  const mode = options.mode || (options.color || !body.includes(\"currentColor\") ? \"background\" : \"mask\");\n  let varName = options.varName;\n  if (varName === void 0 && mode === \"mask\") {\n    varName = \"svg\";\n  }\n  const newOptions = {\n    ...options,\n    // Override mode and varName\n    mode,\n    varName\n  };\n  if (mode === \"background\") {\n    delete newOptions.varName;\n  }\n  const rules = {\n    ...options.rules,\n    ...getCommonCSSRules(newOptions),\n    ...generateItemCSSRules({\n      ...defaultIconProps,\n      ...icon,\n      body\n    }, newOptions)\n  };\n  const selector = options.iconSelector || \".icon\";\n  return formatCSS([{\n    selector,\n    rules\n  }], newOptions.format);\n}\nfunction getIconContentCSS(icon, options) {\n  const body = options.customise ? options.customise(icon.body) : icon.body;\n  const content = generateItemContent({\n    ...defaultIconProps,\n    ...icon,\n    body\n  }, options);\n  const selector = options.iconSelector || \".icon::after\";\n  return formatCSS([{\n    selector,\n    rules: {\n      ...options.rules,\n      content\n    }\n  }], options.format);\n}\nexport { getIconCSS, getIconContentCSS };","map":{"version":3,"names":["defaultIconProps","getCommonCSSRules","generateItemCSSRules","generateItemContent","formatCSS","getIconCSS","icon","options","body","customise","mode","color","includes","varName","newOptions","rules","selector","iconSelector","format","getIconContentCSS","content"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/css/icon.mjs"],"sourcesContent":["import { defaultIconProps } from '../icon/defaults.mjs';\nimport { getCommonCSSRules, generateItemCSSRules, generateItemContent } from './common.mjs';\nimport { formatCSS } from './format.mjs';\nimport '../svg/html.mjs';\nimport '../svg/size.mjs';\nimport '../svg/url.mjs';\nimport '../icon/square.mjs';\nimport '../svg/build.mjs';\nimport '../customisations/defaults.mjs';\nimport '../svg/defs.mjs';\n\nfunction getIconCSS(icon, options = {}) {\n  const body = options.customise ? options.customise(icon.body) : icon.body;\n  const mode = options.mode || (options.color || !body.includes(\"currentColor\") ? \"background\" : \"mask\");\n  let varName = options.varName;\n  if (varName === void 0 && mode === \"mask\") {\n    varName = \"svg\";\n  }\n  const newOptions = {\n    ...options,\n    // Override mode and varName\n    mode,\n    varName\n  };\n  if (mode === \"background\") {\n    delete newOptions.varName;\n  }\n  const rules = {\n    ...options.rules,\n    ...getCommonCSSRules(newOptions),\n    ...generateItemCSSRules(\n      {\n        ...defaultIconProps,\n        ...icon,\n        body\n      },\n      newOptions\n    )\n  };\n  const selector = options.iconSelector || \".icon\";\n  return formatCSS(\n    [\n      {\n        selector,\n        rules\n      }\n    ],\n    newOptions.format\n  );\n}\nfunction getIconContentCSS(icon, options) {\n  const body = options.customise ? options.customise(icon.body) : icon.body;\n  const content = generateItemContent(\n    {\n      ...defaultIconProps,\n      ...icon,\n      body\n    },\n    options\n  );\n  const selector = options.iconSelector || \".icon::after\";\n  return formatCSS(\n    [\n      {\n        selector,\n        rules: {\n          ...options.rules,\n          content\n        }\n      }\n    ],\n    options.format\n  );\n}\n\nexport { getIconCSS, getIconContentCSS };\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,iBAAiB,EAAEC,oBAAoB,EAAEC,mBAAmB,QAAQ,cAAc;AAC3F,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAO,iBAAiB;AACxB,OAAO,iBAAiB;AACxB,OAAO,gBAAgB;AACvB,OAAO,oBAAoB;AAC3B,OAAO,kBAAkB;AACzB,OAAO,gCAAgC;AACvC,OAAO,iBAAiB;AAExB,SAASC,UAAUA,CAACC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACtC,MAAMC,IAAI,GAAGD,OAAO,CAACE,SAAS,GAAGF,OAAO,CAACE,SAAS,CAACH,IAAI,CAACE,IAAI,CAAC,GAAGF,IAAI,CAACE,IAAI;EACzE,MAAME,IAAI,GAAGH,OAAO,CAACG,IAAI,KAAKH,OAAO,CAACI,KAAK,IAAI,CAACH,IAAI,CAACI,QAAQ,CAAC,cAAc,CAAC,GAAG,YAAY,GAAG,MAAM,CAAC;EACtG,IAAIC,OAAO,GAAGN,OAAO,CAACM,OAAO;EAC7B,IAAIA,OAAO,KAAK,KAAK,CAAC,IAAIH,IAAI,KAAK,MAAM,EAAE;IACzCG,OAAO,GAAG,KAAK;EACjB;EACA,MAAMC,UAAU,GAAG;IACjB,GAAGP,OAAO;IACV;IACAG,IAAI;IACJG;EACF,CAAC;EACD,IAAIH,IAAI,KAAK,YAAY,EAAE;IACzB,OAAOI,UAAU,CAACD,OAAO;EAC3B;EACA,MAAME,KAAK,GAAG;IACZ,GAAGR,OAAO,CAACQ,KAAK;IAChB,GAAGd,iBAAiB,CAACa,UAAU,CAAC;IAChC,GAAGZ,oBAAoB,CACrB;MACE,GAAGF,gBAAgB;MACnB,GAAGM,IAAI;MACPE;IACF,CAAC,EACDM,UACF;EACF,CAAC;EACD,MAAME,QAAQ,GAAGT,OAAO,CAACU,YAAY,IAAI,OAAO;EAChD,OAAOb,SAAS,CACd,CACE;IACEY,QAAQ;IACRD;EACF,CAAC,CACF,EACDD,UAAU,CAACI,MACb,CAAC;AACH;AACA,SAASC,iBAAiBA,CAACb,IAAI,EAAEC,OAAO,EAAE;EACxC,MAAMC,IAAI,GAAGD,OAAO,CAACE,SAAS,GAAGF,OAAO,CAACE,SAAS,CAACH,IAAI,CAACE,IAAI,CAAC,GAAGF,IAAI,CAACE,IAAI;EACzE,MAAMY,OAAO,GAAGjB,mBAAmB,CACjC;IACE,GAAGH,gBAAgB;IACnB,GAAGM,IAAI;IACPE;EACF,CAAC,EACDD,OACF,CAAC;EACD,MAAMS,QAAQ,GAAGT,OAAO,CAACU,YAAY,IAAI,cAAc;EACvD,OAAOb,SAAS,CACd,CACE;IACEY,QAAQ;IACRD,KAAK,EAAE;MACL,GAAGR,OAAO,CAACQ,KAAK;MAChBK;IACF;EACF,CAAC,CACF,EACDb,OAAO,CAACW,MACV,CAAC;AACH;AAEA,SAASb,UAAU,EAAEc,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}