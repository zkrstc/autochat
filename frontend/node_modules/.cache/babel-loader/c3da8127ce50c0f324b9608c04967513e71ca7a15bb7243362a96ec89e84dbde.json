{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { getIconData } from '../icon-set/get-icon.mjs';\nimport { defaultIconProps } from '../icon/defaults.mjs';\nimport { getCommonCSSRules, generateItemCSSRules, generateItemContent } from './common.mjs';\nimport { formatCSS } from './format.mjs';\nimport '../icon/merge.mjs';\nimport '../icon/transformations.mjs';\nimport '../icon-set/tree.mjs';\nimport '../svg/html.mjs';\nimport '../svg/size.mjs';\nimport '../svg/url.mjs';\nimport '../icon/square.mjs';\nimport '../svg/build.mjs';\nimport '../customisations/defaults.mjs';\nimport '../svg/defs.mjs';\nconst commonSelector = \".icon--{prefix}\";\nconst iconSelector = \".icon--{prefix}--{name}\";\nconst contentSelector = \".icon--{prefix}--{name}::after\";\nconst defaultSelectors = {\n  commonSelector,\n  iconSelector,\n  overrideSelector: commonSelector + iconSelector\n};\nfunction getIconsCSSData(iconSet, names, options = {}) {\n  const css = [];\n  const errors = [];\n  const palette = options.color ? true : void 0;\n  let mode = options.mode || typeof palette === \"boolean\" && (palette ? \"background\" : \"mask\");\n  if (!mode) {\n    for (let i = 0; i < names.length; i++) {\n      const name = names[i];\n      const icon = getIconData(iconSet, name);\n      if (icon) {\n        const body = options.customise ? options.customise(icon.body, name) : icon.body;\n        mode = body.includes(\"currentColor\") ? \"mask\" : \"background\";\n        break;\n      }\n    }\n    if (!mode) {\n      mode = \"mask\";\n      errors.push(\"/* cannot detect icon mode: not set in options and icon set is missing info, rendering as \" + mode + \" */\");\n    }\n  }\n  let varName = options.varName;\n  if (varName === void 0 && mode === \"mask\") {\n    varName = \"svg\";\n  }\n  const newOptions = {\n    ...options,\n    // Override mode and varName\n    mode,\n    varName\n  };\n  const {\n    commonSelector: commonSelector2,\n    iconSelector: iconSelector2,\n    overrideSelector\n  } = newOptions.iconSelector ? newOptions : defaultSelectors;\n  const iconSelectorWithPrefix = iconSelector2.replace(/{prefix}/g, iconSet.prefix);\n  const commonRules = {\n    ...options.rules,\n    ...getCommonCSSRules(newOptions)\n  };\n  const hasCommonRules = commonSelector2 && commonSelector2 !== iconSelector2;\n  const commonSelectors = /* @__PURE__ */new Set();\n  if (hasCommonRules) {\n    css.push({\n      selector: commonSelector2.replace(/{prefix}/g, iconSet.prefix),\n      rules: commonRules\n    });\n  }\n  for (let i = 0; i < names.length; i++) {\n    const name = names[i];\n    const iconData = getIconData(iconSet, name);\n    if (!iconData) {\n      errors.push(\"/* Could not find icon: \" + name + \" */\");\n      continue;\n    }\n    const body = options.customise ? options.customise(iconData.body, name) : iconData.body;\n    const rules = generateItemCSSRules({\n      ...defaultIconProps,\n      ...iconData,\n      body\n    }, newOptions);\n    let requiresOverride = false;\n    if (hasCommonRules && overrideSelector) {\n      for (const key in rules) {\n        if (key in commonRules) {\n          requiresOverride = true;\n        }\n      }\n    }\n    const selector = (requiresOverride && overrideSelector ? overrideSelector.replace(/{prefix}/g, iconSet.prefix) : iconSelectorWithPrefix).replace(/{name}/g, name);\n    css.push({\n      selector,\n      rules\n    });\n    if (!hasCommonRules) {\n      commonSelectors.add(selector);\n    }\n  }\n  const result = {\n    css,\n    errors\n  };\n  if (!hasCommonRules && commonSelectors.size) {\n    const selector = Array.from(commonSelectors).join(newOptions.format === \"compressed\" ? \",\" : \", \");\n    result.common = {\n      selector,\n      rules: commonRules\n    };\n  }\n  return result;\n}\nfunction getIconsCSS(iconSet, names, options = {}) {\n  const {\n    css,\n    errors,\n    common\n  } = getIconsCSSData(iconSet, names, options);\n  if (common) {\n    if (css.length === 1 && css[0].selector === common.selector) {\n      css[0].rules = {\n        // Common first, override later\n        ...common.rules,\n        ...css[0].rules\n      };\n    } else {\n      css.unshift(common);\n    }\n  }\n  return formatCSS(css, options.format) + (errors.length ? \"\\n\" + errors.join(\"\\n\") + \"\\n\" : \"\");\n}\nfunction getIconsContentCSS(iconSet, names, options) {\n  const errors = [];\n  const css = [];\n  const iconSelectorWithPrefix = (options.iconSelector ?? contentSelector).replace(/{prefix}/g, iconSet.prefix);\n  for (let i = 0; i < names.length; i++) {\n    const name = names[i];\n    const iconData = getIconData(iconSet, name);\n    if (!iconData) {\n      errors.push(\"/* Could not find icon: \" + name + \" */\");\n      continue;\n    }\n    const body = options.customise ? options.customise(iconData.body, name) : iconData.body;\n    const content = generateItemContent({\n      ...defaultIconProps,\n      ...iconData,\n      body\n    }, options);\n    const selector = iconSelectorWithPrefix.replace(/{name}/g, name);\n    css.push({\n      selector,\n      rules: {\n        ...options.rules,\n        content\n      }\n    });\n  }\n  return formatCSS(css, options.format) + (errors.length ? \"\\n\" + errors.join(\"\\n\") + \"\\n\" : \"\");\n}\nexport { getIconsCSS, getIconsCSSData, getIconsContentCSS };","map":{"version":3,"names":["getIconData","defaultIconProps","getCommonCSSRules","generateItemCSSRules","generateItemContent","formatCSS","commonSelector","iconSelector","contentSelector","defaultSelectors","overrideSelector","getIconsCSSData","iconSet","names","options","css","errors","palette","color","mode","i","length","name","icon","body","customise","includes","push","varName","newOptions","commonSelector2","iconSelector2","iconSelectorWithPrefix","replace","prefix","commonRules","rules","hasCommonRules","commonSelectors","Set","selector","iconData","requiresOverride","key","add","result","size","Array","from","join","format","common","getIconsCSS","unshift","getIconsContentCSS","content"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/css/icons.mjs"],"sourcesContent":["import { getIconData } from '../icon-set/get-icon.mjs';\nimport { defaultIconProps } from '../icon/defaults.mjs';\nimport { getCommonCSSRules, generateItemCSSRules, generateItemContent } from './common.mjs';\nimport { formatCSS } from './format.mjs';\nimport '../icon/merge.mjs';\nimport '../icon/transformations.mjs';\nimport '../icon-set/tree.mjs';\nimport '../svg/html.mjs';\nimport '../svg/size.mjs';\nimport '../svg/url.mjs';\nimport '../icon/square.mjs';\nimport '../svg/build.mjs';\nimport '../customisations/defaults.mjs';\nimport '../svg/defs.mjs';\n\nconst commonSelector = \".icon--{prefix}\";\nconst iconSelector = \".icon--{prefix}--{name}\";\nconst contentSelector = \".icon--{prefix}--{name}::after\";\nconst defaultSelectors = {\n  commonSelector,\n  iconSelector,\n  overrideSelector: commonSelector + iconSelector\n};\nfunction getIconsCSSData(iconSet, names, options = {}) {\n  const css = [];\n  const errors = [];\n  const palette = options.color ? true : void 0;\n  let mode = options.mode || typeof palette === \"boolean\" && (palette ? \"background\" : \"mask\");\n  if (!mode) {\n    for (let i = 0; i < names.length; i++) {\n      const name = names[i];\n      const icon = getIconData(iconSet, name);\n      if (icon) {\n        const body = options.customise ? options.customise(icon.body, name) : icon.body;\n        mode = body.includes(\"currentColor\") ? \"mask\" : \"background\";\n        break;\n      }\n    }\n    if (!mode) {\n      mode = \"mask\";\n      errors.push(\n        \"/* cannot detect icon mode: not set in options and icon set is missing info, rendering as \" + mode + \" */\"\n      );\n    }\n  }\n  let varName = options.varName;\n  if (varName === void 0 && mode === \"mask\") {\n    varName = \"svg\";\n  }\n  const newOptions = {\n    ...options,\n    // Override mode and varName\n    mode,\n    varName\n  };\n  const { commonSelector: commonSelector2, iconSelector: iconSelector2, overrideSelector } = newOptions.iconSelector ? newOptions : defaultSelectors;\n  const iconSelectorWithPrefix = iconSelector2.replace(\n    /{prefix}/g,\n    iconSet.prefix\n  );\n  const commonRules = {\n    ...options.rules,\n    ...getCommonCSSRules(newOptions)\n  };\n  const hasCommonRules = commonSelector2 && commonSelector2 !== iconSelector2;\n  const commonSelectors = /* @__PURE__ */ new Set();\n  if (hasCommonRules) {\n    css.push({\n      selector: commonSelector2.replace(/{prefix}/g, iconSet.prefix),\n      rules: commonRules\n    });\n  }\n  for (let i = 0; i < names.length; i++) {\n    const name = names[i];\n    const iconData = getIconData(iconSet, name);\n    if (!iconData) {\n      errors.push(\"/* Could not find icon: \" + name + \" */\");\n      continue;\n    }\n    const body = options.customise ? options.customise(iconData.body, name) : iconData.body;\n    const rules = generateItemCSSRules(\n      {\n        ...defaultIconProps,\n        ...iconData,\n        body\n      },\n      newOptions\n    );\n    let requiresOverride = false;\n    if (hasCommonRules && overrideSelector) {\n      for (const key in rules) {\n        if (key in commonRules) {\n          requiresOverride = true;\n        }\n      }\n    }\n    const selector = (requiresOverride && overrideSelector ? overrideSelector.replace(/{prefix}/g, iconSet.prefix) : iconSelectorWithPrefix).replace(/{name}/g, name);\n    css.push({\n      selector,\n      rules\n    });\n    if (!hasCommonRules) {\n      commonSelectors.add(selector);\n    }\n  }\n  const result = {\n    css,\n    errors\n  };\n  if (!hasCommonRules && commonSelectors.size) {\n    const selector = Array.from(commonSelectors).join(\n      newOptions.format === \"compressed\" ? \",\" : \", \"\n    );\n    result.common = {\n      selector,\n      rules: commonRules\n    };\n  }\n  return result;\n}\nfunction getIconsCSS(iconSet, names, options = {}) {\n  const { css, errors, common } = getIconsCSSData(iconSet, names, options);\n  if (common) {\n    if (css.length === 1 && css[0].selector === common.selector) {\n      css[0].rules = {\n        // Common first, override later\n        ...common.rules,\n        ...css[0].rules\n      };\n    } else {\n      css.unshift(common);\n    }\n  }\n  return formatCSS(css, options.format) + (errors.length ? \"\\n\" + errors.join(\"\\n\") + \"\\n\" : \"\");\n}\nfunction getIconsContentCSS(iconSet, names, options) {\n  const errors = [];\n  const css = [];\n  const iconSelectorWithPrefix = (options.iconSelector ?? contentSelector).replace(/{prefix}/g, iconSet.prefix);\n  for (let i = 0; i < names.length; i++) {\n    const name = names[i];\n    const iconData = getIconData(iconSet, name);\n    if (!iconData) {\n      errors.push(\"/* Could not find icon: \" + name + \" */\");\n      continue;\n    }\n    const body = options.customise ? options.customise(iconData.body, name) : iconData.body;\n    const content = generateItemContent(\n      {\n        ...defaultIconProps,\n        ...iconData,\n        body\n      },\n      options\n    );\n    const selector = iconSelectorWithPrefix.replace(/{name}/g, name);\n    css.push({\n      selector,\n      rules: {\n        ...options.rules,\n        content\n      }\n    });\n  }\n  return formatCSS(css, options.format) + (errors.length ? \"\\n\" + errors.join(\"\\n\") + \"\\n\" : \"\");\n}\n\nexport { getIconsCSS, getIconsCSSData, getIconsContentCSS };\n"],"mappings":";;;;;;;;AAAA,SAASA,WAAW,QAAQ,0BAA0B;AACtD,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,iBAAiB,EAAEC,oBAAoB,EAAEC,mBAAmB,QAAQ,cAAc;AAC3F,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAO,mBAAmB;AAC1B,OAAO,6BAA6B;AACpC,OAAO,sBAAsB;AAC7B,OAAO,iBAAiB;AACxB,OAAO,iBAAiB;AACxB,OAAO,gBAAgB;AACvB,OAAO,oBAAoB;AAC3B,OAAO,kBAAkB;AACzB,OAAO,gCAAgC;AACvC,OAAO,iBAAiB;AAExB,MAAMC,cAAc,GAAG,iBAAiB;AACxC,MAAMC,YAAY,GAAG,yBAAyB;AAC9C,MAAMC,eAAe,GAAG,gCAAgC;AACxD,MAAMC,gBAAgB,GAAG;EACvBH,cAAc;EACdC,YAAY;EACZG,gBAAgB,EAAEJ,cAAc,GAAGC;AACrC,CAAC;AACD,SAASI,eAAeA,CAACC,OAAO,EAAEC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACrD,MAAMC,GAAG,GAAG,EAAE;EACd,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,OAAO,GAAGH,OAAO,CAACI,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC;EAC7C,IAAIC,IAAI,GAAGL,OAAO,CAACK,IAAI,IAAI,OAAOF,OAAO,KAAK,SAAS,KAAKA,OAAO,GAAG,YAAY,GAAG,MAAM,CAAC;EAC5F,IAAI,CAACE,IAAI,EAAE;IACT,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,MAAME,IAAI,GAAGT,KAAK,CAACO,CAAC,CAAC;MACrB,MAAMG,IAAI,GAAGvB,WAAW,CAACY,OAAO,EAAEU,IAAI,CAAC;MACvC,IAAIC,IAAI,EAAE;QACR,MAAMC,IAAI,GAAGV,OAAO,CAACW,SAAS,GAAGX,OAAO,CAACW,SAAS,CAACF,IAAI,CAACC,IAAI,EAAEF,IAAI,CAAC,GAAGC,IAAI,CAACC,IAAI;QAC/EL,IAAI,GAAGK,IAAI,CAACE,QAAQ,CAAC,cAAc,CAAC,GAAG,MAAM,GAAG,YAAY;QAC5D;MACF;IACF;IACA,IAAI,CAACP,IAAI,EAAE;MACTA,IAAI,GAAG,MAAM;MACbH,MAAM,CAACW,IAAI,CACT,4FAA4F,GAAGR,IAAI,GAAG,KACxG,CAAC;IACH;EACF;EACA,IAAIS,OAAO,GAAGd,OAAO,CAACc,OAAO;EAC7B,IAAIA,OAAO,KAAK,KAAK,CAAC,IAAIT,IAAI,KAAK,MAAM,EAAE;IACzCS,OAAO,GAAG,KAAK;EACjB;EACA,MAAMC,UAAU,GAAG;IACjB,GAAGf,OAAO;IACV;IACAK,IAAI;IACJS;EACF,CAAC;EACD,MAAM;IAAEtB,cAAc,EAAEwB,eAAe;IAAEvB,YAAY,EAAEwB,aAAa;IAAErB;EAAiB,CAAC,GAAGmB,UAAU,CAACtB,YAAY,GAAGsB,UAAU,GAAGpB,gBAAgB;EAClJ,MAAMuB,sBAAsB,GAAGD,aAAa,CAACE,OAAO,CAClD,WAAW,EACXrB,OAAO,CAACsB,MACV,CAAC;EACD,MAAMC,WAAW,GAAG;IAClB,GAAGrB,OAAO,CAACsB,KAAK;IAChB,GAAGlC,iBAAiB,CAAC2B,UAAU;EACjC,CAAC;EACD,MAAMQ,cAAc,GAAGP,eAAe,IAAIA,eAAe,KAAKC,aAAa;EAC3E,MAAMO,eAAe,GAAG,eAAgB,IAAIC,GAAG,CAAC,CAAC;EACjD,IAAIF,cAAc,EAAE;IAClBtB,GAAG,CAACY,IAAI,CAAC;MACPa,QAAQ,EAAEV,eAAe,CAACG,OAAO,CAAC,WAAW,EAAErB,OAAO,CAACsB,MAAM,CAAC;MAC9DE,KAAK,EAAED;IACT,CAAC,CAAC;EACJ;EACA,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,MAAME,IAAI,GAAGT,KAAK,CAACO,CAAC,CAAC;IACrB,MAAMqB,QAAQ,GAAGzC,WAAW,CAACY,OAAO,EAAEU,IAAI,CAAC;IAC3C,IAAI,CAACmB,QAAQ,EAAE;MACbzB,MAAM,CAACW,IAAI,CAAC,0BAA0B,GAAGL,IAAI,GAAG,KAAK,CAAC;MACtD;IACF;IACA,MAAME,IAAI,GAAGV,OAAO,CAACW,SAAS,GAAGX,OAAO,CAACW,SAAS,CAACgB,QAAQ,CAACjB,IAAI,EAAEF,IAAI,CAAC,GAAGmB,QAAQ,CAACjB,IAAI;IACvF,MAAMY,KAAK,GAAGjC,oBAAoB,CAChC;MACE,GAAGF,gBAAgB;MACnB,GAAGwC,QAAQ;MACXjB;IACF,CAAC,EACDK,UACF,CAAC;IACD,IAAIa,gBAAgB,GAAG,KAAK;IAC5B,IAAIL,cAAc,IAAI3B,gBAAgB,EAAE;MACtC,KAAK,MAAMiC,GAAG,IAAIP,KAAK,EAAE;QACvB,IAAIO,GAAG,IAAIR,WAAW,EAAE;UACtBO,gBAAgB,GAAG,IAAI;QACzB;MACF;IACF;IACA,MAAMF,QAAQ,GAAG,CAACE,gBAAgB,IAAIhC,gBAAgB,GAAGA,gBAAgB,CAACuB,OAAO,CAAC,WAAW,EAAErB,OAAO,CAACsB,MAAM,CAAC,GAAGF,sBAAsB,EAAEC,OAAO,CAAC,SAAS,EAAEX,IAAI,CAAC;IACjKP,GAAG,CAACY,IAAI,CAAC;MACPa,QAAQ;MACRJ;IACF,CAAC,CAAC;IACF,IAAI,CAACC,cAAc,EAAE;MACnBC,eAAe,CAACM,GAAG,CAACJ,QAAQ,CAAC;IAC/B;EACF;EACA,MAAMK,MAAM,GAAG;IACb9B,GAAG;IACHC;EACF,CAAC;EACD,IAAI,CAACqB,cAAc,IAAIC,eAAe,CAACQ,IAAI,EAAE;IAC3C,MAAMN,QAAQ,GAAGO,KAAK,CAACC,IAAI,CAACV,eAAe,CAAC,CAACW,IAAI,CAC/CpB,UAAU,CAACqB,MAAM,KAAK,YAAY,GAAG,GAAG,GAAG,IAC7C,CAAC;IACDL,MAAM,CAACM,MAAM,GAAG;MACdX,QAAQ;MACRJ,KAAK,EAAED;IACT,CAAC;EACH;EACA,OAAOU,MAAM;AACf;AACA,SAASO,WAAWA,CAACxC,OAAO,EAAEC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACjD,MAAM;IAAEC,GAAG;IAAEC,MAAM;IAAEmC;EAAO,CAAC,GAAGxC,eAAe,CAACC,OAAO,EAAEC,KAAK,EAAEC,OAAO,CAAC;EACxE,IAAIqC,MAAM,EAAE;IACV,IAAIpC,GAAG,CAACM,MAAM,KAAK,CAAC,IAAIN,GAAG,CAAC,CAAC,CAAC,CAACyB,QAAQ,KAAKW,MAAM,CAACX,QAAQ,EAAE;MAC3DzB,GAAG,CAAC,CAAC,CAAC,CAACqB,KAAK,GAAG;QACb;QACA,GAAGe,MAAM,CAACf,KAAK;QACf,GAAGrB,GAAG,CAAC,CAAC,CAAC,CAACqB;MACZ,CAAC;IACH,CAAC,MAAM;MACLrB,GAAG,CAACsC,OAAO,CAACF,MAAM,CAAC;IACrB;EACF;EACA,OAAO9C,SAAS,CAACU,GAAG,EAAED,OAAO,CAACoC,MAAM,CAAC,IAAIlC,MAAM,CAACK,MAAM,GAAG,IAAI,GAAGL,MAAM,CAACiC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;AAChG;AACA,SAASK,kBAAkBA,CAAC1C,OAAO,EAAEC,KAAK,EAAEC,OAAO,EAAE;EACnD,MAAME,MAAM,GAAG,EAAE;EACjB,MAAMD,GAAG,GAAG,EAAE;EACd,MAAMiB,sBAAsB,GAAG,CAAClB,OAAO,CAACP,YAAY,IAAIC,eAAe,EAAEyB,OAAO,CAAC,WAAW,EAAErB,OAAO,CAACsB,MAAM,CAAC;EAC7G,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,MAAME,IAAI,GAAGT,KAAK,CAACO,CAAC,CAAC;IACrB,MAAMqB,QAAQ,GAAGzC,WAAW,CAACY,OAAO,EAAEU,IAAI,CAAC;IAC3C,IAAI,CAACmB,QAAQ,EAAE;MACbzB,MAAM,CAACW,IAAI,CAAC,0BAA0B,GAAGL,IAAI,GAAG,KAAK,CAAC;MACtD;IACF;IACA,MAAME,IAAI,GAAGV,OAAO,CAACW,SAAS,GAAGX,OAAO,CAACW,SAAS,CAACgB,QAAQ,CAACjB,IAAI,EAAEF,IAAI,CAAC,GAAGmB,QAAQ,CAACjB,IAAI;IACvF,MAAM+B,OAAO,GAAGnD,mBAAmB,CACjC;MACE,GAAGH,gBAAgB;MACnB,GAAGwC,QAAQ;MACXjB;IACF,CAAC,EACDV,OACF,CAAC;IACD,MAAM0B,QAAQ,GAAGR,sBAAsB,CAACC,OAAO,CAAC,SAAS,EAAEX,IAAI,CAAC;IAChEP,GAAG,CAACY,IAAI,CAAC;MACPa,QAAQ;MACRJ,KAAK,EAAE;QACL,GAAGtB,OAAO,CAACsB,KAAK;QAChBmB;MACF;IACF,CAAC,CAAC;EACJ;EACA,OAAOlD,SAAS,CAACU,GAAG,EAAED,OAAO,CAACoC,MAAM,CAAC,IAAIlC,MAAM,CAACK,MAAM,GAAG,IAAI,GAAGL,MAAM,CAACiC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;AAChG;AAEA,SAASG,WAAW,EAAEzC,eAAe,EAAE2C,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}