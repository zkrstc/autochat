{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.structured-clone.js\";\nimport { clear as clear2, insertEdge, insertEdgeLabel, markers_default, positionEdgeLabel } from \"./chunk-IIMUDSI4.mjs\";\nimport \"./chunk-VV3M67IP.mjs\";\nimport { clear, clear2 as clear3, insertCluster, insertNode, positionNode, setNodeElem, updateNodeBounds } from \"./chunk-HRU6DDCH.mjs\";\nimport { getSubGraphTitleMargins } from \"./chunk-K557N5IZ.mjs\";\nimport \"./chunk-H2D2JQ3I.mjs\";\nimport \"./chunk-C3MQ5ANM.mjs\";\nimport \"./chunk-O4NI6UNU.mjs\";\nimport { __name, getConfig2 as getConfig, log } from \"./chunk-YTJNT7DU.mjs\";\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nimport { layout as dagreLayout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson2 from \"dagre-d3-es/src/graphlib/json.js\";\nimport * as graphlib2 from \"dagre-d3-es/src/graphlib/index.js\";\n\n// src/rendering-util/layout-algorithms/dagre/mermaid-graphlib.js\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nvar clusterDb = /* @__PURE__ */new Map();\nvar descendants = /* @__PURE__ */new Map();\nvar parents = /* @__PURE__ */new Map();\nvar clear4 = /* @__PURE__ */__name(() => {\n  descendants.clear();\n  parents.clear();\n  clusterDb.clear();\n}, \"clear\");\nvar isDescendant = /* @__PURE__ */__name((id, ancestorId) => {\n  const ancestorDescendants = descendants.get(ancestorId) || [];\n  log.trace(\"In isDescendant\", ancestorId, \" \", id, \" = \", ancestorDescendants.includes(id));\n  return ancestorDescendants.includes(id);\n}, \"isDescendant\");\nvar edgeInCluster = /* @__PURE__ */__name((edge, clusterId) => {\n  const clusterDescendants = descendants.get(clusterId) || [];\n  log.info(\"Descendants of \", clusterId, \" is \", clusterDescendants);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId || edge.w === clusterId) {\n    return false;\n  }\n  if (!clusterDescendants) {\n    log.debug(\"Tilt, \", clusterId, \",not in descendants\");\n    return false;\n  }\n  return clusterDescendants.includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || clusterDescendants.includes(edge.w);\n}, \"edgeInCluster\");\nvar copy = /* @__PURE__ */__name((clusterId, graph, newGraph, rootId) => {\n  log.warn(\"Copying children of \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach(node => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\"Not Setting parent for node=\", node, \"cluster!==rootId\", clusterId !== rootId, \"node!==clusterId\", node !== clusterId);\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach(edge => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\"Skipping copy of edge \", edge.v, \"-->\", edge.w, \" rootId: \", rootId, \" clusterId:\", clusterId);\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n}, \"copy\");\nvar extractDescendants = /* @__PURE__ */__name((id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents.set(child, id);\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n}, \"extractDescendants\");\nvar findCommonEdges = /* @__PURE__ */__name((graph, id1, id2) => {\n  const edges1 = graph.edges().filter(edge => edge.v === id1 || edge.w === id1);\n  const edges2 = graph.edges().filter(edge => edge.v === id2 || edge.w === id2);\n  const edges1Prim = edges1.map(edge => {\n    return {\n      v: edge.v === id1 ? id2 : edge.v,\n      w: edge.w === id1 ? id1 : edge.w\n    };\n  });\n  const edges2Prim = edges2.map(edge => {\n    return {\n      v: edge.v,\n      w: edge.w\n    };\n  });\n  const result = edges1Prim.filter(edgeIn1 => {\n    return edges2Prim.some(edge => edgeIn1.v === edge.v && edgeIn1.w === edge.w);\n  });\n  return result;\n}, \"findCommonEdges\");\nvar findNonClusterChild = /* @__PURE__ */__name((id, graph, clusterId) => {\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    return id;\n  }\n  let reserve;\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph, clusterId);\n    const commonEdges = findCommonEdges(graph, clusterId, _id);\n    if (_id) {\n      if (commonEdges.length > 0) {\n        reserve = _id;\n      } else {\n        return _id;\n      }\n    }\n  }\n  return reserve;\n}, \"findNonClusterChild\");\nvar getAnchorId = /* @__PURE__ */__name(id => {\n  if (!clusterDb.has(id)) {\n    return id;\n  }\n  if (!clusterDb.get(id).externalConnections) {\n    return id;\n  }\n  if (clusterDb.has(id)) {\n    return clusterDb.get(id).id;\n  }\n  return id;\n}, \"getAnchorId\");\nvar adjustClustersAndEdges = /* @__PURE__ */__name((graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function (id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\"Cluster identified\", id, \" Replacement id in edges: \", findNonClusterChild(id, graph, id));\n      descendants.set(id, extractDescendants(id, graph));\n      clusterDb.set(id, {\n        id: findNonClusterChild(id, graph, id),\n        clusterData: graph.node(id)\n      });\n    }\n  });\n  graph.nodes().forEach(function (id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach(edge => {\n        const d1 = isDescendant(edge.v, id);\n        const d2 = isDescendant(edge.w, id);\n        if (d1 ^ d2) {\n          log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n          log.warn(\"Descendants of XXX \", id, \": \", descendants.get(id));\n          clusterDb.get(id).externalConnections = true;\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  for (let id of clusterDb.keys()) {\n    const nonClusterChild = clusterDb.get(id).id;\n    const parent = graph.parent(nonClusterChild);\n    if (parent !== id && clusterDb.has(parent) && !clusterDb.get(parent).externalConnections) {\n      clusterDb.get(id).id = parent;\n    }\n  }\n  graph.edges().forEach(function (e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\"Fix XXX\", clusterDb, \"ids:\", e.v, e.w, \"Translating: \", clusterDb.get(e.v), \" --- \", clusterDb.get(e.w));\n    if (clusterDb.get(e.v) || clusterDb.get(e.w)) {\n      log.warn(\"Fixing and trying - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        const parent = graph.parent(v);\n        clusterDb.get(parent).externalConnections = true;\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        const parent = graph.parent(w);\n        clusterDb.get(parent).externalConnections = true;\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n}, \"adjustClustersAndEdges\");\nvar extractor = /* @__PURE__ */__name((graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\"Extracting node\", node, clusterDb, clusterDb.has(node) && !clusterDb.get(node).externalConnections, !graph.parent(node), graph.node(node), graph.children(\"D\"), \" Depth \", depth);\n    if (!clusterDb.has(node)) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb.get(node).externalConnections && graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\"Cluster without external connections, without a parent and with children\", node, depth);\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb.get(node)?.clusterData?.dir) {\n        dir = clusterDb.get(node).clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb.get(node).clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function () {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb.get(node).clusterData,\n        label: clusterDb.get(node).label,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\"Cluster ** \", node, \" **not meeting the criteria !externalConnections:\", !clusterDb.get(node).externalConnections, \" no parent: \", !graph.parent(node), \" children \", graph.children(node) && graph.children(node).length > 0, graph.children(\"D\"), depth);\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data?.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n}, \"extractor\");\nvar sorter = /* @__PURE__ */__name((graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign([], nodes);\n  nodes.forEach(node => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n}, \"sorter\");\nvar sortNodesByHierarchy = /* @__PURE__ */__name(graph => sorter(graph, graph.children()), \"sortNodesByHierarchy\");\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nvar recursiveRender = /* @__PURE__ */__name(async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\n  log.warn(\"Graph in recursive render:XAX\", graphlibJson2.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.info(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(graph.nodes().map(async function (v) {\n    const node = graph.node(v);\n    if (parentCluster !== void 0) {\n      const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n      log.trace(\"Setting data for parent cluster XXX\\n Node.id = \", v, \"\\n data=\", data.height, \"\\nParent cluster\", parentCluster.height);\n      graph.setNode(parentCluster.id, data);\n      if (!graph.parent(v)) {\n        log.trace(\"Setting parent\", v, parentCluster.id);\n        graph.setParent(v, parentCluster.id, data);\n      }\n    }\n    log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n    if (node?.clusterNode) {\n      log.info(\"Cluster identified XBX\", v, node.width, graph.node(v));\n      const {\n        ranksep,\n        nodesep\n      } = graph.graph();\n      node.graph.setGraph({\n        ...node.graph.graph(),\n        ranksep: ranksep + 25,\n        nodesep\n      });\n      const o = await recursiveRender(nodes, node.graph, diagramType, id, graph.node(v), siteConfig);\n      const newEl = o.elem;\n      updateNodeBounds(node, newEl);\n      node.diff = o.diff || 0;\n      log.info(\"New compound node after recursive render XAX\", v, \"width\",\n      // node,\n      node.width, \"height\", node.height\n      // node.x,\n      // node.y\n      );\n      setNodeElem(newEl, node);\n    } else {\n      if (graph.children(v).length > 0) {\n        log.trace(\"Cluster - the non recursive path XBX\", v, node.id, node, node.width, \"Graph:\", graph);\n        log.trace(findNonClusterChild(node.id, graph));\n        clusterDb.set(node.id, {\n          id: findNonClusterChild(node.id, graph),\n          node\n        });\n      } else {\n        log.trace(\"Node - the non recursive path XAX\", v, nodes, graph.node(v), dir);\n        await insertNode(nodes, graph.node(v), {\n          config: siteConfig,\n          dir\n        });\n      }\n    }\n  }));\n  const processEdges = /* @__PURE__ */__name(async () => {\n    const edgePromises = graph.edges().map(async function (e) {\n      const edge = graph.edge(e.v, e.w, e.name);\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n      log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translating: \", clusterDb.get(e.v), clusterDb.get(e.w));\n      await insertEdgeLabel(edgeLabels, edge);\n    });\n    await Promise.all(edgePromises);\n  }, \"processEdges\");\n  await processEdges();\n  log.info(\"Graph before layout:\", JSON.stringify(graphlibJson2.write(graph)));\n  log.info(\"############################################# XXX\");\n  log.info(\"###                Layout                 ### XXX\");\n  log.info(\"############################################# XXX\");\n  dagreLayout(graph);\n  log.info(\"Graph after layout:\", JSON.stringify(graphlibJson2.write(graph)));\n  let diff = 0;\n  let {\n    subGraphTitleTotalMargin\n  } = getSubGraphTitleMargins(siteConfig);\n  await Promise.all(sortNodesByHierarchy(graph).map(async function (v) {\n    const node = graph.node(v);\n    log.info(\"Position XBX => \" + v + \": (\" + node.x, \",\" + node.y, \") width: \", node.width, \" height: \", node.height);\n    if (node?.clusterNode) {\n      node.y += subGraphTitleTotalMargin;\n      log.info(\"A tainted cluster node XBX1\", v, node.id, node.width, node.height, node.x, node.y, graph.parent(v));\n      clusterDb.get(node.id).node = node;\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        log.info(\"A pure cluster node XBX1\", v, node.id, node.x, node.y, node.width, node.height, graph.parent(v));\n        node.height += subGraphTitleTotalMargin;\n        graph.node(node.parentId);\n        const halfPadding = node?.padding / 2 || 0;\n        const labelHeight = node?.labelBBox?.height || 0;\n        const offsetY = labelHeight - halfPadding || 0;\n        log.debug(\"OffsetY\", offsetY, \"labelHeight\", labelHeight, \"halfPadding\", halfPadding);\n        await insertCluster(clusters, node);\n        clusterDb.get(node.id).node = node;\n      } else {\n        const parent = graph.node(node.parentId);\n        node.y += subGraphTitleTotalMargin / 2;\n        log.info(\"A regular node XBX1 - using the padding\", node.id, \"parent\", node.parentId, node.width, node.height, node.x, node.y, \"offsetY\", node.offsetY, \"parent\", parent, parent?.offsetY, node);\n        positionNode(node);\n      }\n    }\n  }));\n  graph.edges().forEach(function (e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    edge.points.forEach(point => point.y += subGraphTitleTotalMargin / 2);\n    const startNode = graph.node(e.v);\n    var endNode = graph.node(e.w);\n    const paths = insertEdge(edgePaths, edge, clusterDb, diagramType, startNode, endNode, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function (v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.isGroup) {\n      diff = n.diff;\n    }\n  });\n  log.warn(\"Returning from recursive render XAX\", elem, diff);\n  return {\n    elem,\n    diff\n  };\n}, \"recursiveRender\");\nvar render = /* @__PURE__ */__name(async (data4Layout, svg) => {\n  const graph = new graphlib2.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: data4Layout.direction,\n    nodesep: data4Layout.config?.nodeSpacing || data4Layout.config?.flowchart?.nodeSpacing || data4Layout.nodeSpacing,\n    ranksep: data4Layout.config?.rankSpacing || data4Layout.config?.flowchart?.rankSpacing || data4Layout.rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function () {\n    return {};\n  });\n  const element = svg.select(\"g\");\n  markers_default(element, data4Layout.markers, data4Layout.type, data4Layout.diagramId);\n  clear3();\n  clear2();\n  clear();\n  clear4();\n  data4Layout.nodes.forEach(node => {\n    graph.setNode(node.id, {\n      ...node\n    });\n    if (node.parentId) {\n      graph.setParent(node.id, node.parentId);\n    }\n  });\n  log.debug(\"Edges:\", data4Layout.edges);\n  data4Layout.edges.forEach(edge => {\n    if (edge.start === edge.end) {\n      const nodeId = edge.start;\n      const specialId1 = nodeId + \"---\" + nodeId + \"---1\";\n      const specialId2 = nodeId + \"---\" + nodeId + \"---2\";\n      const node = graph.node(nodeId);\n      graph.setNode(specialId1, {\n        domId: specialId1,\n        id: specialId1,\n        parentId: node.parentId,\n        labelStyle: \"\",\n        label: \"\",\n        padding: 0,\n        shape: \"labelRect\",\n        // shape: 'rect',\n        style: \"\",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId1, node.parentId);\n      graph.setNode(specialId2, {\n        domId: specialId2,\n        id: specialId2,\n        parentId: node.parentId,\n        labelStyle: \"\",\n        padding: 0,\n        // shape: 'rect',\n        shape: \"labelRect\",\n        label: \"\",\n        style: \"\",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId2, node.parentId);\n      const edge1 = structuredClone(edge);\n      const edgeMid = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge1.id = nodeId + \"-cyclic-special-1\";\n      edgeMid.arrowTypeStart = \"none\";\n      edgeMid.arrowTypeEnd = \"none\";\n      edgeMid.id = nodeId + \"-cyclic-special-mid\";\n      edge2.label = \"\";\n      if (node.isGroup) {\n        edge1.fromCluster = nodeId;\n        edge2.toCluster = nodeId;\n      }\n      edge2.id = nodeId + \"-cyclic-special-2\";\n      edge2.arrowTypeStart = \"none\";\n      graph.setEdge(nodeId, specialId1, edge1, nodeId + \"-cyclic-special-0\");\n      graph.setEdge(specialId1, specialId2, edgeMid, nodeId + \"-cyclic-special-1\");\n      graph.setEdge(specialId2, nodeId, edge2, nodeId + \"-cyc<lic-special-2\");\n    } else {\n      graph.setEdge(edge.start, edge.end, {\n        ...edge\n      }, edge.id);\n    }\n  });\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson2.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after XAX:\", JSON.stringify(graphlibJson2.write(graph)));\n  const siteConfig = getConfig();\n  await recursiveRender(element, graph, data4Layout.type, data4Layout.diagramId, void 0, siteConfig);\n}, \"render\");\nexport { render };","map":{"version":3,"names":["clear","clear2","insertEdge","insertEdgeLabel","markers_default","positionEdgeLabel","clear3","insertCluster","insertNode","positionNode","setNodeElem","updateNodeBounds","getSubGraphTitleMargins","__name","getConfig2","getConfig","log","layout","dagreLayout","graphlibJson2","graphlib2","graphlib","graphlibJson","clusterDb","Map","descendants","parents","clear4","isDescendant","id","ancestorId","ancestorDescendants","get","trace","includes","edgeInCluster","edge","clusterId","clusterDescendants","info","v","w","debug","copy","graph","newGraph","rootId","warn","node","nodes","children","push","forEach","length","data","setNode","parent","setParent","edges","data2","name","setEdge","e","error","removeNode","extractDescendants","res","child","set","findCommonEdges","id1","id2","edges1","filter","edges2","edges1Prim","map","edges2Prim","result","edgeIn1","some","findNonClusterChild","reserve","_id","commonEdges","getAnchorId","has","externalConnections","adjustClustersAndEdges","depth","clusterData","d1","d2","keys","nonClusterChild","JSON","stringify","removeEdge","fromCluster","toCluster","write","extractor","hasChildren","graphSettings","dir","rankdir","clusterGraph","Graph","multigraph","compound","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","label","sorter","Object","assign","sorted","sortNodesByHierarchy","recursiveRender","_elem","diagramType","parentCluster","siteConfig","elem","insert","attr","clusters","edgePaths","edgeLabels","Promise","all","parse","height","width","o","newEl","diff","config","processEdges","edgePromises","subGraphTitleTotalMargin","x","y","parentId","halfPadding","padding","labelHeight","labelBBox","offsetY","points","point","startNode","endNode","paths","n","type","isGroup","render","data4Layout","svg","direction","nodeSpacing","flowchart","rankSpacing","element","select","markers","diagramId","start","end","nodeId","specialId1","specialId2","domId","labelStyle","shape","style","edge1","structuredClone","edgeMid","edge2","arrowTypeEnd","arrowTypeStart"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/mermaid/dist/chunks/mermaid.core/dagre-OKDRZEBW.mjs"],"sourcesContent":["import {\n  clear as clear2,\n  insertEdge,\n  insertEdgeLabel,\n  markers_default,\n  positionEdgeLabel\n} from \"./chunk-IIMUDSI4.mjs\";\nimport \"./chunk-VV3M67IP.mjs\";\nimport {\n  clear,\n  clear2 as clear3,\n  insertCluster,\n  insertNode,\n  positionNode,\n  setNodeElem,\n  updateNodeBounds\n} from \"./chunk-HRU6DDCH.mjs\";\nimport {\n  getSubGraphTitleMargins\n} from \"./chunk-K557N5IZ.mjs\";\nimport \"./chunk-H2D2JQ3I.mjs\";\nimport \"./chunk-C3MQ5ANM.mjs\";\nimport \"./chunk-O4NI6UNU.mjs\";\nimport {\n  __name,\n  getConfig2 as getConfig,\n  log\n} from \"./chunk-YTJNT7DU.mjs\";\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nimport { layout as dagreLayout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson2 from \"dagre-d3-es/src/graphlib/json.js\";\nimport * as graphlib2 from \"dagre-d3-es/src/graphlib/index.js\";\n\n// src/rendering-util/layout-algorithms/dagre/mermaid-graphlib.js\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nvar clusterDb = /* @__PURE__ */ new Map();\nvar descendants = /* @__PURE__ */ new Map();\nvar parents = /* @__PURE__ */ new Map();\nvar clear4 = /* @__PURE__ */ __name(() => {\n  descendants.clear();\n  parents.clear();\n  clusterDb.clear();\n}, \"clear\");\nvar isDescendant = /* @__PURE__ */ __name((id, ancestorId) => {\n  const ancestorDescendants = descendants.get(ancestorId) || [];\n  log.trace(\"In isDescendant\", ancestorId, \" \", id, \" = \", ancestorDescendants.includes(id));\n  return ancestorDescendants.includes(id);\n}, \"isDescendant\");\nvar edgeInCluster = /* @__PURE__ */ __name((edge, clusterId) => {\n  const clusterDescendants = descendants.get(clusterId) || [];\n  log.info(\"Descendants of \", clusterId, \" is \", clusterDescendants);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId || edge.w === clusterId) {\n    return false;\n  }\n  if (!clusterDescendants) {\n    log.debug(\"Tilt, \", clusterId, \",not in descendants\");\n    return false;\n  }\n  return clusterDescendants.includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || clusterDescendants.includes(edge.w);\n}, \"edgeInCluster\");\nvar copy = /* @__PURE__ */ __name((clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n}, \"copy\");\nvar extractDescendants = /* @__PURE__ */ __name((id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents.set(child, id);\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n}, \"extractDescendants\");\nvar findCommonEdges = /* @__PURE__ */ __name((graph, id1, id2) => {\n  const edges1 = graph.edges().filter((edge) => edge.v === id1 || edge.w === id1);\n  const edges2 = graph.edges().filter((edge) => edge.v === id2 || edge.w === id2);\n  const edges1Prim = edges1.map((edge) => {\n    return { v: edge.v === id1 ? id2 : edge.v, w: edge.w === id1 ? id1 : edge.w };\n  });\n  const edges2Prim = edges2.map((edge) => {\n    return { v: edge.v, w: edge.w };\n  });\n  const result = edges1Prim.filter((edgeIn1) => {\n    return edges2Prim.some((edge) => edgeIn1.v === edge.v && edgeIn1.w === edge.w);\n  });\n  return result;\n}, \"findCommonEdges\");\nvar findNonClusterChild = /* @__PURE__ */ __name((id, graph, clusterId) => {\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    return id;\n  }\n  let reserve;\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph, clusterId);\n    const commonEdges = findCommonEdges(graph, clusterId, _id);\n    if (_id) {\n      if (commonEdges.length > 0) {\n        reserve = _id;\n      } else {\n        return _id;\n      }\n    }\n  }\n  return reserve;\n}, \"findNonClusterChild\");\nvar getAnchorId = /* @__PURE__ */ __name((id) => {\n  if (!clusterDb.has(id)) {\n    return id;\n  }\n  if (!clusterDb.get(id).externalConnections) {\n    return id;\n  }\n  if (clusterDb.has(id)) {\n    return clusterDb.get(id).id;\n  }\n  return id;\n}, \"getAnchorId\");\nvar adjustClustersAndEdges = /* @__PURE__ */ __name((graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph, id)\n      );\n      descendants.set(id, extractDescendants(id, graph));\n      clusterDb.set(id, { id: findNonClusterChild(id, graph, id), clusterData: graph.node(id) });\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        const d1 = isDescendant(edge.v, id);\n        const d2 = isDescendant(edge.w, id);\n        if (d1 ^ d2) {\n          log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n          log.warn(\"Descendants of XXX \", id, \": \", descendants.get(id));\n          clusterDb.get(id).externalConnections = true;\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  for (let id of clusterDb.keys()) {\n    const nonClusterChild = clusterDb.get(id).id;\n    const parent = graph.parent(nonClusterChild);\n    if (parent !== id && clusterDb.has(parent) && !clusterDb.get(parent).externalConnections) {\n      clusterDb.get(id).id = parent;\n    }\n  }\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb.get(e.v),\n      \" --- \",\n      clusterDb.get(e.w)\n    );\n    if (clusterDb.get(e.v) || clusterDb.get(e.w)) {\n      log.warn(\"Fixing and trying - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        const parent = graph.parent(v);\n        clusterDb.get(parent).externalConnections = true;\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        const parent = graph.parent(w);\n        clusterDb.get(parent).externalConnections = true;\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n}, \"adjustClustersAndEdges\");\nvar extractor = /* @__PURE__ */ __name((graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb.has(node) && !clusterDb.get(node).externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb.has(node)) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb.get(node).externalConnections && graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb.get(node)?.clusterData?.dir) {\n        dir = clusterDb.get(node).clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb.get(node).clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb.get(node).clusterData,\n        label: clusterDb.get(node).label,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb.get(node).externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data?.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n}, \"extractor\");\nvar sorter = /* @__PURE__ */ __name((graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign([], nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n}, \"sorter\");\nvar sortNodesByHierarchy = /* @__PURE__ */ __name((graph) => sorter(graph, graph.children()), \"sortNodesByHierarchy\");\n\n// src/rendering-util/layout-algorithms/dagre/index.js\nvar recursiveRender = /* @__PURE__ */ __name(async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\n  log.warn(\"Graph in recursive render:XAX\", graphlibJson2.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.info(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.trace(\n          \"Setting data for parent cluster XXX\\n Node.id = \",\n          v,\n          \"\\n data=\",\n          data.height,\n          \"\\nParent cluster\",\n          parentCluster.height\n        );\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node?.clusterNode) {\n        log.info(\"Cluster identified XBX\", v, node.width, graph.node(v));\n        const { ranksep, nodesep } = graph.graph();\n        node.graph.setGraph({\n          ...node.graph.graph(),\n          ranksep: ranksep + 25,\n          nodesep\n        });\n        const o = await recursiveRender(\n          nodes,\n          node.graph,\n          diagramType,\n          id,\n          graph.node(v),\n          siteConfig\n        );\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\n          \"New compound node after recursive render XAX\",\n          v,\n          \"width\",\n          // node,\n          node.width,\n          \"height\",\n          node.height\n          // node.x,\n          // node.y\n        );\n        setNodeElem(newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.trace(\n            \"Cluster - the non recursive path XBX\",\n            v,\n            node.id,\n            node,\n            node.width,\n            \"Graph:\",\n            graph\n          );\n          log.trace(findNonClusterChild(node.id, graph));\n          clusterDb.set(node.id, { id: findNonClusterChild(node.id, graph), node });\n        } else {\n          log.trace(\"Node - the non recursive path XAX\", v, nodes, graph.node(v), dir);\n          await insertNode(nodes, graph.node(v), { config: siteConfig, dir });\n        }\n      }\n    })\n  );\n  const processEdges = /* @__PURE__ */ __name(async () => {\n    const edgePromises = graph.edges().map(async function(e) {\n      const edge = graph.edge(e.v, e.w, e.name);\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n      log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n      log.info(\n        \"Fix\",\n        clusterDb,\n        \"ids:\",\n        e.v,\n        e.w,\n        \"Translating: \",\n        clusterDb.get(e.v),\n        clusterDb.get(e.w)\n      );\n      await insertEdgeLabel(edgeLabels, edge);\n    });\n    await Promise.all(edgePromises);\n  }, \"processEdges\");\n  await processEdges();\n  log.info(\"Graph before layout:\", JSON.stringify(graphlibJson2.write(graph)));\n  log.info(\"############################################# XXX\");\n  log.info(\"###                Layout                 ### XXX\");\n  log.info(\"############################################# XXX\");\n  dagreLayout(graph);\n  log.info(\"Graph after layout:\", JSON.stringify(graphlibJson2.write(graph)));\n  let diff = 0;\n  let { subGraphTitleTotalMargin } = getSubGraphTitleMargins(siteConfig);\n  await Promise.all(\n    sortNodesByHierarchy(graph).map(async function(v) {\n      const node = graph.node(v);\n      log.info(\n        \"Position XBX => \" + v + \": (\" + node.x,\n        \",\" + node.y,\n        \") width: \",\n        node.width,\n        \" height: \",\n        node.height\n      );\n      if (node?.clusterNode) {\n        node.y += subGraphTitleTotalMargin;\n        log.info(\n          \"A tainted cluster node XBX1\",\n          v,\n          node.id,\n          node.width,\n          node.height,\n          node.x,\n          node.y,\n          graph.parent(v)\n        );\n        clusterDb.get(node.id).node = node;\n        positionNode(node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\n            \"A pure cluster node XBX1\",\n            v,\n            node.id,\n            node.x,\n            node.y,\n            node.width,\n            node.height,\n            graph.parent(v)\n          );\n          node.height += subGraphTitleTotalMargin;\n          graph.node(node.parentId);\n          const halfPadding = node?.padding / 2 || 0;\n          const labelHeight = node?.labelBBox?.height || 0;\n          const offsetY = labelHeight - halfPadding || 0;\n          log.debug(\"OffsetY\", offsetY, \"labelHeight\", labelHeight, \"halfPadding\", halfPadding);\n          await insertCluster(clusters, node);\n          clusterDb.get(node.id).node = node;\n        } else {\n          const parent = graph.node(node.parentId);\n          node.y += subGraphTitleTotalMargin / 2;\n          log.info(\n            \"A regular node XBX1 - using the padding\",\n            node.id,\n            \"parent\",\n            node.parentId,\n            node.width,\n            node.height,\n            node.x,\n            node.y,\n            \"offsetY\",\n            node.offsetY,\n            \"parent\",\n            parent,\n            parent?.offsetY,\n            node\n          );\n          positionNode(node);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);\n    const startNode = graph.node(e.v);\n    var endNode = graph.node(e.w);\n    const paths = insertEdge(edgePaths, edge, clusterDb, diagramType, startNode, endNode, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.isGroup) {\n      diff = n.diff;\n    }\n  });\n  log.warn(\"Returning from recursive render XAX\", elem, diff);\n  return { elem, diff };\n}, \"recursiveRender\");\nvar render = /* @__PURE__ */ __name(async (data4Layout, svg) => {\n  const graph = new graphlib2.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: data4Layout.direction,\n    nodesep: data4Layout.config?.nodeSpacing || data4Layout.config?.flowchart?.nodeSpacing || data4Layout.nodeSpacing,\n    ranksep: data4Layout.config?.rankSpacing || data4Layout.config?.flowchart?.rankSpacing || data4Layout.rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  const element = svg.select(\"g\");\n  markers_default(element, data4Layout.markers, data4Layout.type, data4Layout.diagramId);\n  clear3();\n  clear2();\n  clear();\n  clear4();\n  data4Layout.nodes.forEach((node) => {\n    graph.setNode(node.id, { ...node });\n    if (node.parentId) {\n      graph.setParent(node.id, node.parentId);\n    }\n  });\n  log.debug(\"Edges:\", data4Layout.edges);\n  data4Layout.edges.forEach((edge) => {\n    if (edge.start === edge.end) {\n      const nodeId = edge.start;\n      const specialId1 = nodeId + \"---\" + nodeId + \"---1\";\n      const specialId2 = nodeId + \"---\" + nodeId + \"---2\";\n      const node = graph.node(nodeId);\n      graph.setNode(specialId1, {\n        domId: specialId1,\n        id: specialId1,\n        parentId: node.parentId,\n        labelStyle: \"\",\n        label: \"\",\n        padding: 0,\n        shape: \"labelRect\",\n        // shape: 'rect',\n        style: \"\",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId1, node.parentId);\n      graph.setNode(specialId2, {\n        domId: specialId2,\n        id: specialId2,\n        parentId: node.parentId,\n        labelStyle: \"\",\n        padding: 0,\n        // shape: 'rect',\n        shape: \"labelRect\",\n        label: \"\",\n        style: \"\",\n        width: 10,\n        height: 10\n      });\n      graph.setParent(specialId2, node.parentId);\n      const edge1 = structuredClone(edge);\n      const edgeMid = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge1.id = nodeId + \"-cyclic-special-1\";\n      edgeMid.arrowTypeStart = \"none\";\n      edgeMid.arrowTypeEnd = \"none\";\n      edgeMid.id = nodeId + \"-cyclic-special-mid\";\n      edge2.label = \"\";\n      if (node.isGroup) {\n        edge1.fromCluster = nodeId;\n        edge2.toCluster = nodeId;\n      }\n      edge2.id = nodeId + \"-cyclic-special-2\";\n      edge2.arrowTypeStart = \"none\";\n      graph.setEdge(nodeId, specialId1, edge1, nodeId + \"-cyclic-special-0\");\n      graph.setEdge(specialId1, specialId2, edgeMid, nodeId + \"-cyclic-special-1\");\n      graph.setEdge(specialId2, nodeId, edge2, nodeId + \"-cyc<lic-special-2\");\n    } else {\n      graph.setEdge(edge.start, edge.end, { ...edge }, edge.id);\n    }\n  });\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson2.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after XAX:\", JSON.stringify(graphlibJson2.write(graph)));\n  const siteConfig = getConfig();\n  await recursiveRender(\n    element,\n    graph,\n    data4Layout.type,\n    data4Layout.diagramId,\n    void 0,\n    siteConfig\n  );\n}, \"render\");\nexport {\n  render\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}