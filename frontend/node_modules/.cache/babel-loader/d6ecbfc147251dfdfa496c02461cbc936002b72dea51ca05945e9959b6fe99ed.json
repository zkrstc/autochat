{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * TypeScript type imports:\n *\n * @import { Graph } from '../graphlib/graph.js';\n */\nimport * as _ from 'lodash-es';\nimport * as util from './util.js';\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\n/**\n * @param {Graph} g\n */\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n  if (wRank === vRank + 1) return;\n  g.removeEdge(e);\n\n  /**\n   * @typedef {Object} Attrs\n   * @property {number} width\n   * @property {number} height\n   * @property {ReturnType<Graph[\"node\"]>} edgeLabel\n   * @property {any} edgeObj\n   * @property {ReturnType<Graph[\"node\"]>[\"rank\"]} rank\n   * @property {string} [dummy]\n   * @property {ReturnType<Graph[\"node\"]>[\"labelpos\"]} [labelpos]\n   */\n\n  /** @type {Attrs | undefined} */\n  var attrs = undefined;\n  var dummy, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      attrs.dummy = 'edge-label';\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, {\n      weight: edgeLabel.weight\n    }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n  g.setEdge(v, w, {\n    weight: edgeLabel.weight\n  }, name);\n}\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({\n        x: node.x,\n        y: node.y\n      });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}","map":{"version":3,"names":["_","util","run","undo","g","graph","dummyChains","forEach","edges","edge","normalizeEdge","e","v","vRank","node","rank","w","wRank","name","edgeLabel","labelRank","removeEdge","attrs","undefined","dummy","i","points","width","height","edgeObj","addDummyNode","labelpos","setEdge","weight","push","origLabel","successors","removeNode","x","y"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/dagre-d3-es/src/dagre/normalize.js"],"sourcesContent":["/**\n * TypeScript type imports:\n *\n * @import { Graph } from '../graphlib/graph.js';\n */\nimport * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\n/**\n * @param {Graph} g\n */\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  /**\n   * @typedef {Object} Attrs\n   * @property {number} width\n   * @property {number} height\n   * @property {ReturnType<Graph[\"node\"]>} edgeLabel\n   * @property {any} edgeObj\n   * @property {ReturnType<Graph[\"node\"]>[\"rank\"]} rank\n   * @property {string} [dummy]\n   * @property {ReturnType<Graph[\"node\"]>[\"labelpos\"]} [labelpos]\n   */\n\n  /** @type {Attrs | undefined} */\n  var attrs = undefined;\n  var dummy, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      attrs.dummy = 'edge-label';\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}