{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;\nconst unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;\nfunction calculateSize(size, ratio, precision) {\n  if (ratio === 1) {\n    return size;\n  }\n  precision = precision || 100;\n  if (typeof size === \"number\") {\n    return Math.ceil(size * ratio * precision) / precision;\n  }\n  if (typeof size !== \"string\") {\n    return size;\n  }\n  const oldParts = size.split(unitsSplit);\n  if (oldParts === null || !oldParts.length) {\n    return size;\n  }\n  const newParts = [];\n  let code = oldParts.shift();\n  let isNumber = unitsTest.test(code);\n  while (true) {\n    if (isNumber) {\n      const num = parseFloat(code);\n      if (isNaN(num)) {\n        newParts.push(code);\n      } else {\n        newParts.push(Math.ceil(num * ratio * precision) / precision);\n      }\n    } else {\n      newParts.push(code);\n    }\n    code = oldParts.shift();\n    if (code === void 0) {\n      return newParts.join(\"\");\n    }\n    isNumber = !isNumber;\n  }\n}\nexport { calculateSize };","map":{"version":3,"names":["unitsSplit","unitsTest","calculateSize","size","ratio","precision","Math","ceil","oldParts","split","length","newParts","code","shift","isNumber","test","num","parseFloat","isNaN","push","join"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/svg/size.mjs"],"sourcesContent":["const unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;\nconst unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;\nfunction calculateSize(size, ratio, precision) {\n  if (ratio === 1) {\n    return size;\n  }\n  precision = precision || 100;\n  if (typeof size === \"number\") {\n    return Math.ceil(size * ratio * precision) / precision;\n  }\n  if (typeof size !== \"string\") {\n    return size;\n  }\n  const oldParts = size.split(unitsSplit);\n  if (oldParts === null || !oldParts.length) {\n    return size;\n  }\n  const newParts = [];\n  let code = oldParts.shift();\n  let isNumber = unitsTest.test(code);\n  while (true) {\n    if (isNumber) {\n      const num = parseFloat(code);\n      if (isNaN(num)) {\n        newParts.push(code);\n      } else {\n        newParts.push(Math.ceil(num * ratio * precision) / precision);\n      }\n    } else {\n      newParts.push(code);\n    }\n    code = oldParts.shift();\n    if (code === void 0) {\n      return newParts.join(\"\");\n    }\n    isNumber = !isNumber;\n  }\n}\n\nexport { calculateSize };\n"],"mappings":";AAAA,MAAMA,UAAU,GAAG,2BAA2B;AAC9C,MAAMC,SAAS,GAAG,2BAA2B;AAC7C,SAASC,aAAaA,CAACC,IAAI,EAAEC,KAAK,EAAEC,SAAS,EAAE;EAC7C,IAAID,KAAK,KAAK,CAAC,EAAE;IACf,OAAOD,IAAI;EACb;EACAE,SAAS,GAAGA,SAAS,IAAI,GAAG;EAC5B,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAOG,IAAI,CAACC,IAAI,CAACJ,IAAI,GAAGC,KAAK,GAAGC,SAAS,CAAC,GAAGA,SAAS;EACxD;EACA,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAOA,IAAI;EACb;EACA,MAAMK,QAAQ,GAAGL,IAAI,CAACM,KAAK,CAACT,UAAU,CAAC;EACvC,IAAIQ,QAAQ,KAAK,IAAI,IAAI,CAACA,QAAQ,CAACE,MAAM,EAAE;IACzC,OAAOP,IAAI;EACb;EACA,MAAMQ,QAAQ,GAAG,EAAE;EACnB,IAAIC,IAAI,GAAGJ,QAAQ,CAACK,KAAK,CAAC,CAAC;EAC3B,IAAIC,QAAQ,GAAGb,SAAS,CAACc,IAAI,CAACH,IAAI,CAAC;EACnC,OAAO,IAAI,EAAE;IACX,IAAIE,QAAQ,EAAE;MACZ,MAAME,GAAG,GAAGC,UAAU,CAACL,IAAI,CAAC;MAC5B,IAAIM,KAAK,CAACF,GAAG,CAAC,EAAE;QACdL,QAAQ,CAACQ,IAAI,CAACP,IAAI,CAAC;MACrB,CAAC,MAAM;QACLD,QAAQ,CAACQ,IAAI,CAACb,IAAI,CAACC,IAAI,CAACS,GAAG,GAAGZ,KAAK,GAAGC,SAAS,CAAC,GAAGA,SAAS,CAAC;MAC/D;IACF,CAAC,MAAM;MACLM,QAAQ,CAACQ,IAAI,CAACP,IAAI,CAAC;IACrB;IACAA,IAAI,GAAGJ,QAAQ,CAACK,KAAK,CAAC,CAAC;IACvB,IAAID,IAAI,KAAK,KAAK,CAAC,EAAE;MACnB,OAAOD,QAAQ,CAACS,IAAI,CAAC,EAAE,CAAC;IAC1B;IACAN,QAAQ,GAAG,CAACA,QAAQ;EACtB;AACF;AAEA,SAASZ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}