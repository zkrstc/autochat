{"ast":null,"code":"const matchIconName = /^[a-z0-9]+(-[a-z0-9]+)*$/;\nconst stringToIcon = (value, validate, allowSimpleName, provider = \"\") => {\n  const colonSeparated = value.split(\":\");\n  if (value.slice(0, 1) === \"@\") {\n    if (colonSeparated.length < 2 || colonSeparated.length > 3) {\n      return null;\n    }\n    provider = colonSeparated.shift().slice(1);\n  }\n  if (colonSeparated.length > 3 || !colonSeparated.length) {\n    return null;\n  }\n  if (colonSeparated.length > 1) {\n    const name2 = colonSeparated.pop();\n    const prefix = colonSeparated.pop();\n    const result = {\n      // Allow provider without '@': \"provider:prefix:name\"\n      provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,\n      prefix,\n      name: name2\n    };\n    return validate && !validateIconName(result) ? null : result;\n  }\n  const name = colonSeparated[0];\n  const dashSeparated = name.split(\"-\");\n  if (dashSeparated.length > 1) {\n    const result = {\n      provider,\n      prefix: dashSeparated.shift(),\n      name: dashSeparated.join(\"-\")\n    };\n    return validate && !validateIconName(result) ? null : result;\n  }\n  if (allowSimpleName && provider === \"\") {\n    const result = {\n      provider,\n      prefix: \"\",\n      name\n    };\n    return validate && !validateIconName(result, allowSimpleName) ? null : result;\n  }\n  return null;\n};\nconst validateIconName = (icon, allowSimpleName) => {\n  if (!icon) {\n    return false;\n  }\n  return !!(\n  // Check prefix: cannot be empty, unless allowSimpleName is enabled\n  // Check name: cannot be empty\n  (allowSimpleName && icon.prefix === \"\" || !!icon.prefix) && !!icon.name);\n};\nexport { matchIconName, stringToIcon, validateIconName };","map":{"version":3,"names":["matchIconName","stringToIcon","value","validate","allowSimpleName","provider","colonSeparated","split","slice","length","shift","name2","pop","prefix","result","name","validateIconName","dashSeparated","join","icon"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/icon/name.mjs"],"sourcesContent":["const matchIconName = /^[a-z0-9]+(-[a-z0-9]+)*$/;\nconst stringToIcon = (value, validate, allowSimpleName, provider = \"\") => {\n  const colonSeparated = value.split(\":\");\n  if (value.slice(0, 1) === \"@\") {\n    if (colonSeparated.length < 2 || colonSeparated.length > 3) {\n      return null;\n    }\n    provider = colonSeparated.shift().slice(1);\n  }\n  if (colonSeparated.length > 3 || !colonSeparated.length) {\n    return null;\n  }\n  if (colonSeparated.length > 1) {\n    const name2 = colonSeparated.pop();\n    const prefix = colonSeparated.pop();\n    const result = {\n      // Allow provider without '@': \"provider:prefix:name\"\n      provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,\n      prefix,\n      name: name2\n    };\n    return validate && !validateIconName(result) ? null : result;\n  }\n  const name = colonSeparated[0];\n  const dashSeparated = name.split(\"-\");\n  if (dashSeparated.length > 1) {\n    const result = {\n      provider,\n      prefix: dashSeparated.shift(),\n      name: dashSeparated.join(\"-\")\n    };\n    return validate && !validateIconName(result) ? null : result;\n  }\n  if (allowSimpleName && provider === \"\") {\n    const result = {\n      provider,\n      prefix: \"\",\n      name\n    };\n    return validate && !validateIconName(result, allowSimpleName) ? null : result;\n  }\n  return null;\n};\nconst validateIconName = (icon, allowSimpleName) => {\n  if (!icon) {\n    return false;\n  }\n  return !!// Check prefix: cannot be empty, unless allowSimpleName is enabled\n  // Check name: cannot be empty\n  ((allowSimpleName && icon.prefix === \"\" || !!icon.prefix) && !!icon.name);\n};\n\nexport { matchIconName, stringToIcon, validateIconName };\n"],"mappings":"AAAA,MAAMA,aAAa,GAAG,0BAA0B;AAChD,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,QAAQ,GAAG,EAAE,KAAK;EACxE,MAAMC,cAAc,GAAGJ,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC;EACvC,IAAIL,KAAK,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE;IAC7B,IAAIF,cAAc,CAACG,MAAM,GAAG,CAAC,IAAIH,cAAc,CAACG,MAAM,GAAG,CAAC,EAAE;MAC1D,OAAO,IAAI;IACb;IACAJ,QAAQ,GAAGC,cAAc,CAACI,KAAK,CAAC,CAAC,CAACF,KAAK,CAAC,CAAC,CAAC;EAC5C;EACA,IAAIF,cAAc,CAACG,MAAM,GAAG,CAAC,IAAI,CAACH,cAAc,CAACG,MAAM,EAAE;IACvD,OAAO,IAAI;EACb;EACA,IAAIH,cAAc,CAACG,MAAM,GAAG,CAAC,EAAE;IAC7B,MAAME,KAAK,GAAGL,cAAc,CAACM,GAAG,CAAC,CAAC;IAClC,MAAMC,MAAM,GAAGP,cAAc,CAACM,GAAG,CAAC,CAAC;IACnC,MAAME,MAAM,GAAG;MACb;MACAT,QAAQ,EAAEC,cAAc,CAACG,MAAM,GAAG,CAAC,GAAGH,cAAc,CAAC,CAAC,CAAC,GAAGD,QAAQ;MAClEQ,MAAM;MACNE,IAAI,EAAEJ;IACR,CAAC;IACD,OAAOR,QAAQ,IAAI,CAACa,gBAAgB,CAACF,MAAM,CAAC,GAAG,IAAI,GAAGA,MAAM;EAC9D;EACA,MAAMC,IAAI,GAAGT,cAAc,CAAC,CAAC,CAAC;EAC9B,MAAMW,aAAa,GAAGF,IAAI,CAACR,KAAK,CAAC,GAAG,CAAC;EACrC,IAAIU,aAAa,CAACR,MAAM,GAAG,CAAC,EAAE;IAC5B,MAAMK,MAAM,GAAG;MACbT,QAAQ;MACRQ,MAAM,EAAEI,aAAa,CAACP,KAAK,CAAC,CAAC;MAC7BK,IAAI,EAAEE,aAAa,CAACC,IAAI,CAAC,GAAG;IAC9B,CAAC;IACD,OAAOf,QAAQ,IAAI,CAACa,gBAAgB,CAACF,MAAM,CAAC,GAAG,IAAI,GAAGA,MAAM;EAC9D;EACA,IAAIV,eAAe,IAAIC,QAAQ,KAAK,EAAE,EAAE;IACtC,MAAMS,MAAM,GAAG;MACbT,QAAQ;MACRQ,MAAM,EAAE,EAAE;MACVE;IACF,CAAC;IACD,OAAOZ,QAAQ,IAAI,CAACa,gBAAgB,CAACF,MAAM,EAAEV,eAAe,CAAC,GAAG,IAAI,GAAGU,MAAM;EAC/E;EACA,OAAO,IAAI;AACb,CAAC;AACD,MAAME,gBAAgB,GAAGA,CAACG,IAAI,EAAEf,eAAe,KAAK;EAClD,IAAI,CAACe,IAAI,EAAE;IACT,OAAO,KAAK;EACd;EACA,OAAO,CAAC;EAAC;EACT;EACC,CAACf,eAAe,IAAIe,IAAI,CAACN,MAAM,KAAK,EAAE,IAAI,CAAC,CAACM,IAAI,CAACN,MAAM,KAAK,CAAC,CAACM,IAAI,CAACJ,IAAI,CAAC;AAC3E,CAAC;AAED,SAASf,aAAa,EAAEC,YAAY,EAAEe,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}