{"ast":null,"code":"import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n  var e, f;\n  while (e = leaveEdge(t)) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n  cutValue = graphEdge.weight;\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n  return cutValue;\n}\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!Object.prototype.hasOwnProperty.call(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n  return nextLim;\n}\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n  var candidates = _.filter(g.edges(), function (edge) {\n    return flip === isDescendant(t, t.node(edge.v), tailLabel) && flip !== isDescendant(t, t.node(edge.w), tailLabel);\n  });\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}","map":{"version":3,"names":["_","alg","simplify","feasibleTree","longestPath","slack","networkSimplex","initLowLimValues","initCutValues","calcCutValue","leaveEdge","enterEdge","exchangeEdges","g","t","e","f","vs","postorder","nodes","slice","length","forEach","v","assignCutValue","child","childLab","node","parent","edge","cutvalue","childIsTail","graphEdge","cutValue","weight","nodeEdges","isOutEdge","other","w","pointsToHead","otherWeight","isTreeEdge","otherCutValue","tree","root","arguments","dfsAssignLowLim","visited","nextLim","low","label","neighbors","Object","prototype","hasOwnProperty","call","lim","find","edges","hasEdge","vLabel","wLabel","tailLabel","flip","candidates","filter","isDescendant","minBy","removeEdge","setEdge","updateRanks","preorder","flipped","rank","minlen","u","rootLabel"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!Object.prototype.hasOwnProperty.call(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}