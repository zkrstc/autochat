{"ast":null,"code":"const skipTags = [\"script\", \"style\"];\nfunction prettifySVG(content, tab = \"\t\", depth = 0) {\n  let result = \"\";\n  let level = 0;\n  content = content.replace(/(\\s)*\\/>/g, \" />\");\n  while (content.length > 0) {\n    const openIndex = content.indexOf(\"<\");\n    let closeIndex = content.indexOf(\">\");\n    if (openIndex === -1 && closeIndex === -1) {\n      return result;\n    }\n    if (openIndex === -1 || closeIndex === -1 || closeIndex < openIndex) {\n      return null;\n    }\n    const text = content.slice(0, openIndex);\n    const trimmedText = text.trim();\n    if (trimmedText.length) {\n      if (text.trimStart() !== text && text.trimEnd() !== text) {\n        result += trimmedText + \"\\n\" + tab.repeat(level + depth);\n      } else {\n        result = result.trim() + text;\n      }\n    }\n    content = content.slice(openIndex);\n    closeIndex -= openIndex;\n    const lastChar = content.slice(closeIndex - 1, closeIndex);\n    const isClosing = content.slice(0, 2) === \"</\";\n    let isSelfClosing = lastChar === \"/\" || lastChar === \"?\";\n    if (isClosing && isSelfClosing) {\n      return null;\n    }\n    const tagName = content.slice(isClosing ? 2 : 1).split(/[\\s>]/).shift();\n    const ignoreTagContent = !isSelfClosing && !isClosing && skipTags.includes(tagName);\n    if (!ignoreTagContent) {\n      const nextOpenIndex = content.indexOf(\"<\", 1);\n      if (nextOpenIndex !== -1 && nextOpenIndex < closeIndex) {\n        return null;\n      }\n    }\n    if (isClosing && tab.length) {\n      if (result.slice(0 - tab.length) === tab) {\n        result = result.slice(0, result.length - tab.length);\n      }\n    }\n    result += content.slice(0, closeIndex + 1);\n    content = content.slice(closeIndex + 1);\n    if (ignoreTagContent) {\n      const closingIndex = content.indexOf(\"</\" + tagName);\n      const closingEnd = content.indexOf(\">\", closingIndex);\n      if (closingIndex < 0 || closingEnd < 0) {\n        return null;\n      }\n      result += content.slice(0, closingEnd + 1);\n      content = content.slice(closingEnd + 1);\n      isSelfClosing = true;\n    }\n    if (isClosing) {\n      level--;\n      if (level < 0) {\n        return null;\n      }\n    } else if (!isSelfClosing) {\n      level++;\n    }\n    result += \"\\n\" + tab.repeat(level + depth);\n  }\n  return level === 0 ? result : null;\n}\nexport { prettifySVG };","map":{"version":3,"names":["skipTags","prettifySVG","content","tab","depth","result","level","replace","length","openIndex","indexOf","closeIndex","text","slice","trimmedText","trim","trimStart","trimEnd","repeat","lastChar","isClosing","isSelfClosing","tagName","split","shift","ignoreTagContent","includes","nextOpenIndex","closingIndex","closingEnd"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/svg/pretty.mjs"],"sourcesContent":["const skipTags = [\"script\", \"style\"];\nfunction prettifySVG(content, tab = \"\t\", depth = 0) {\n  let result = \"\";\n  let level = 0;\n  content = content.replace(/(\\s)*\\/>/g, \" />\");\n  while (content.length > 0) {\n    const openIndex = content.indexOf(\"<\");\n    let closeIndex = content.indexOf(\">\");\n    if (openIndex === -1 && closeIndex === -1) {\n      return result;\n    }\n    if (openIndex === -1 || closeIndex === -1 || closeIndex < openIndex) {\n      return null;\n    }\n    const text = content.slice(0, openIndex);\n    const trimmedText = text.trim();\n    if (trimmedText.length) {\n      if (text.trimStart() !== text && text.trimEnd() !== text) {\n        result += trimmedText + \"\\n\" + tab.repeat(level + depth);\n      } else {\n        result = result.trim() + text;\n      }\n    }\n    content = content.slice(openIndex);\n    closeIndex -= openIndex;\n    const lastChar = content.slice(closeIndex - 1, closeIndex);\n    const isClosing = content.slice(0, 2) === \"</\";\n    let isSelfClosing = lastChar === \"/\" || lastChar === \"?\";\n    if (isClosing && isSelfClosing) {\n      return null;\n    }\n    const tagName = content.slice(isClosing ? 2 : 1).split(/[\\s>]/).shift();\n    const ignoreTagContent = !isSelfClosing && !isClosing && skipTags.includes(tagName);\n    if (!ignoreTagContent) {\n      const nextOpenIndex = content.indexOf(\"<\", 1);\n      if (nextOpenIndex !== -1 && nextOpenIndex < closeIndex) {\n        return null;\n      }\n    }\n    if (isClosing && tab.length) {\n      if (result.slice(0 - tab.length) === tab) {\n        result = result.slice(0, result.length - tab.length);\n      }\n    }\n    result += content.slice(0, closeIndex + 1);\n    content = content.slice(closeIndex + 1);\n    if (ignoreTagContent) {\n      const closingIndex = content.indexOf(\"</\" + tagName);\n      const closingEnd = content.indexOf(\">\", closingIndex);\n      if (closingIndex < 0 || closingEnd < 0) {\n        return null;\n      }\n      result += content.slice(0, closingEnd + 1);\n      content = content.slice(closingEnd + 1);\n      isSelfClosing = true;\n    }\n    if (isClosing) {\n      level--;\n      if (level < 0) {\n        return null;\n      }\n    } else if (!isSelfClosing) {\n      level++;\n    }\n    result += \"\\n\" + tab.repeat(level + depth);\n  }\n  return level === 0 ? result : null;\n}\n\nexport { prettifySVG };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}