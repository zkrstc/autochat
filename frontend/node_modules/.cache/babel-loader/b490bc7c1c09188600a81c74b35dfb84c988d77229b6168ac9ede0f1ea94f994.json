{"ast":null,"code":"/* IMPORT */\nimport _ from '../utils/index.js';\nimport ChannelsReusable from '../channels/reusable.js';\n/* MAIN */\nconst RGB = {\n  /* VARIABLES */\n  re: /^rgba?\\(\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?))\\s*?(?:,|\\s)\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?))\\s*?(?:,|\\s)\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?))(?:\\s*?(?:,|\\/)\\s*?\\+?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?)))?\\s*?\\)$/i,\n  /* API */\n  parse: color => {\n    const charCode = color.charCodeAt(0);\n    if (charCode !== 114 && charCode !== 82) return; // 'r'/'R'\n    const match = color.match(RGB.re);\n    if (!match) return;\n    const [, r, isRedPercentage, g, isGreenPercentage, b, isBluePercentage, a, isAlphaPercentage] = match;\n    return ChannelsReusable.set({\n      r: _.channel.clamp.r(isRedPercentage ? parseFloat(r) * 2.55 : parseFloat(r)),\n      g: _.channel.clamp.g(isGreenPercentage ? parseFloat(g) * 2.55 : parseFloat(g)),\n      b: _.channel.clamp.b(isBluePercentage ? parseFloat(b) * 2.55 : parseFloat(b)),\n      a: a ? _.channel.clamp.a(isAlphaPercentage ? parseFloat(a) / 100 : parseFloat(a)) : 1\n    }, color);\n  },\n  stringify: channels => {\n    const {\n      r,\n      g,\n      b,\n      a\n    } = channels;\n    if (a < 1) {\n      // RGBA\n      return `rgba(${_.lang.round(r)}, ${_.lang.round(g)}, ${_.lang.round(b)}, ${_.lang.round(a)})`;\n    } else {\n      // RGB\n      return `rgb(${_.lang.round(r)}, ${_.lang.round(g)}, ${_.lang.round(b)})`;\n    }\n  }\n};\n/* EXPORT */\nexport default RGB;","map":{"version":3,"names":["_","ChannelsReusable","RGB","re","parse","color","charCode","charCodeAt","match","r","isRedPercentage","g","isGreenPercentage","b","isBluePercentage","a","isAlphaPercentage","set","channel","clamp","parseFloat","stringify","channels","lang","round"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/khroma/dist/color/rgb.js"],"sourcesContent":["/* IMPORT */\nimport _ from '../utils/index.js';\nimport ChannelsReusable from '../channels/reusable.js';\n/* MAIN */\nconst RGB = {\n    /* VARIABLES */\n    re: /^rgba?\\(\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?))\\s*?(?:,|\\s)\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?))\\s*?(?:,|\\s)\\s*?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?))(?:\\s*?(?:,|\\/)\\s*?\\+?(-?(?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:e\\d+)?(%?)))?\\s*?\\)$/i,\n    /* API */\n    parse: (color) => {\n        const charCode = color.charCodeAt(0);\n        if (charCode !== 114 && charCode !== 82)\n            return; // 'r'/'R'\n        const match = color.match(RGB.re);\n        if (!match)\n            return;\n        const [, r, isRedPercentage, g, isGreenPercentage, b, isBluePercentage, a, isAlphaPercentage] = match;\n        return ChannelsReusable.set({\n            r: _.channel.clamp.r(isRedPercentage ? parseFloat(r) * 2.55 : parseFloat(r)),\n            g: _.channel.clamp.g(isGreenPercentage ? parseFloat(g) * 2.55 : parseFloat(g)),\n            b: _.channel.clamp.b(isBluePercentage ? parseFloat(b) * 2.55 : parseFloat(b)),\n            a: a ? _.channel.clamp.a(isAlphaPercentage ? parseFloat(a) / 100 : parseFloat(a)) : 1\n        }, color);\n    },\n    stringify: (channels) => {\n        const { r, g, b, a } = channels;\n        if (a < 1) { // RGBA\n            return `rgba(${_.lang.round(r)}, ${_.lang.round(g)}, ${_.lang.round(b)}, ${_.lang.round(a)})`;\n        }\n        else { // RGB\n            return `rgb(${_.lang.round(r)}, ${_.lang.round(g)}, ${_.lang.round(b)})`;\n        }\n    }\n};\n/* EXPORT */\nexport default RGB;\n"],"mappings":"AAAA;AACA,OAAOA,CAAC,MAAM,mBAAmB;AACjC,OAAOC,gBAAgB,MAAM,yBAAyB;AACtD;AACA,MAAMC,GAAG,GAAG;EACR;EACAC,EAAE,EAAE,8PAA8P;EAClQ;EACAC,KAAK,EAAGC,KAAK,IAAK;IACd,MAAMC,QAAQ,GAAGD,KAAK,CAACE,UAAU,CAAC,CAAC,CAAC;IACpC,IAAID,QAAQ,KAAK,GAAG,IAAIA,QAAQ,KAAK,EAAE,EACnC,OAAO,CAAC;IACZ,MAAME,KAAK,GAAGH,KAAK,CAACG,KAAK,CAACN,GAAG,CAACC,EAAE,CAAC;IACjC,IAAI,CAACK,KAAK,EACN;IACJ,MAAM,GAAGC,CAAC,EAAEC,eAAe,EAAEC,CAAC,EAAEC,iBAAiB,EAAEC,CAAC,EAAEC,gBAAgB,EAAEC,CAAC,EAAEC,iBAAiB,CAAC,GAAGR,KAAK;IACrG,OAAOP,gBAAgB,CAACgB,GAAG,CAAC;MACxBR,CAAC,EAAET,CAAC,CAACkB,OAAO,CAACC,KAAK,CAACV,CAAC,CAACC,eAAe,GAAGU,UAAU,CAACX,CAAC,CAAC,GAAG,IAAI,GAAGW,UAAU,CAACX,CAAC,CAAC,CAAC;MAC5EE,CAAC,EAAEX,CAAC,CAACkB,OAAO,CAACC,KAAK,CAACR,CAAC,CAACC,iBAAiB,GAAGQ,UAAU,CAACT,CAAC,CAAC,GAAG,IAAI,GAAGS,UAAU,CAACT,CAAC,CAAC,CAAC;MAC9EE,CAAC,EAAEb,CAAC,CAACkB,OAAO,CAACC,KAAK,CAACN,CAAC,CAACC,gBAAgB,GAAGM,UAAU,CAACP,CAAC,CAAC,GAAG,IAAI,GAAGO,UAAU,CAACP,CAAC,CAAC,CAAC;MAC7EE,CAAC,EAAEA,CAAC,GAAGf,CAAC,CAACkB,OAAO,CAACC,KAAK,CAACJ,CAAC,CAACC,iBAAiB,GAAGI,UAAU,CAACL,CAAC,CAAC,GAAG,GAAG,GAAGK,UAAU,CAACL,CAAC,CAAC,CAAC,GAAG;IACxF,CAAC,EAAEV,KAAK,CAAC;EACb,CAAC;EACDgB,SAAS,EAAGC,QAAQ,IAAK;IACrB,MAAM;MAAEb,CAAC;MAAEE,CAAC;MAAEE,CAAC;MAAEE;IAAE,CAAC,GAAGO,QAAQ;IAC/B,IAAIP,CAAC,GAAG,CAAC,EAAE;MAAE;MACT,OAAO,QAAQf,CAAC,CAACuB,IAAI,CAACC,KAAK,CAACf,CAAC,CAAC,KAAKT,CAAC,CAACuB,IAAI,CAACC,KAAK,CAACb,CAAC,CAAC,KAAKX,CAAC,CAACuB,IAAI,CAACC,KAAK,CAACX,CAAC,CAAC,KAAKb,CAAC,CAACuB,IAAI,CAACC,KAAK,CAACT,CAAC,CAAC,GAAG;IACjG,CAAC,MACI;MAAE;MACH,OAAO,OAAOf,CAAC,CAACuB,IAAI,CAACC,KAAK,CAACf,CAAC,CAAC,KAAKT,CAAC,CAACuB,IAAI,CAACC,KAAK,CAACb,CAAC,CAAC,KAAKX,CAAC,CAACuB,IAAI,CAACC,KAAK,CAACX,CAAC,CAAC,GAAG;IAC5E;EACJ;AACJ,CAAC;AACD;AACA,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}