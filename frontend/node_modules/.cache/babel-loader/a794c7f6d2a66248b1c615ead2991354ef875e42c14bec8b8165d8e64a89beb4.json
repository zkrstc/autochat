{"ast":null,"code":"import { getEmojiMatchesInText, sortEmojiMatchesInText } from './find.mjs';\nimport '../convert.mjs';\nimport '../data.mjs';\nimport '../format.mjs';\nfunction findAndReplaceEmojisInText(regexp, content, callback) {\n  const matches = getEmojiMatchesInText(regexp, content);\n  if (!matches.length) {\n    return null;\n  }\n  const sortedMatches = sortEmojiMatchesInText(content, matches);\n  let result = \"\";\n  let replaced = false;\n  for (let i = 0; i < sortedMatches.length; i++) {\n    const item = sortedMatches[i];\n    result += item.prev;\n    const replacement = callback({\n      ...item.match\n    }, result);\n    if (replacement === void 0) {\n      result += item.match.match;\n    } else {\n      result += replacement;\n      replaced = true;\n    }\n  }\n  result += sortedMatches[sortedMatches.length - 1].next;\n  return replaced ? result : null;\n}\nexport { findAndReplaceEmojisInText };","map":{"version":3,"names":["getEmojiMatchesInText","sortEmojiMatchesInText","findAndReplaceEmojisInText","regexp","content","callback","matches","length","sortedMatches","result","replaced","i","item","prev","replacement","match","next"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/emoji/replace/replace.mjs"],"sourcesContent":["import { getEmojiMatchesInText, sortEmojiMatchesInText } from './find.mjs';\nimport '../convert.mjs';\nimport '../data.mjs';\nimport '../format.mjs';\n\nfunction findAndReplaceEmojisInText(regexp, content, callback) {\n  const matches = getEmojiMatchesInText(regexp, content);\n  if (!matches.length) {\n    return null;\n  }\n  const sortedMatches = sortEmojiMatchesInText(content, matches);\n  let result = \"\";\n  let replaced = false;\n  for (let i = 0; i < sortedMatches.length; i++) {\n    const item = sortedMatches[i];\n    result += item.prev;\n    const replacement = callback(\n      {\n        ...item.match\n      },\n      result\n    );\n    if (replacement === void 0) {\n      result += item.match.match;\n    } else {\n      result += replacement;\n      replaced = true;\n    }\n  }\n  result += sortedMatches[sortedMatches.length - 1].next;\n  return replaced ? result : null;\n}\n\nexport { findAndReplaceEmojisInText };\n"],"mappings":"AAAA,SAASA,qBAAqB,EAAEC,sBAAsB,QAAQ,YAAY;AAC1E,OAAO,gBAAgB;AACvB,OAAO,aAAa;AACpB,OAAO,eAAe;AAEtB,SAASC,0BAA0BA,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EAC7D,MAAMC,OAAO,GAAGN,qBAAqB,CAACG,MAAM,EAAEC,OAAO,CAAC;EACtD,IAAI,CAACE,OAAO,CAACC,MAAM,EAAE;IACnB,OAAO,IAAI;EACb;EACA,MAAMC,aAAa,GAAGP,sBAAsB,CAACG,OAAO,EAAEE,OAAO,CAAC;EAC9D,IAAIG,MAAM,GAAG,EAAE;EACf,IAAIC,QAAQ,GAAG,KAAK;EACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,aAAa,CAACD,MAAM,EAAEI,CAAC,EAAE,EAAE;IAC7C,MAAMC,IAAI,GAAGJ,aAAa,CAACG,CAAC,CAAC;IAC7BF,MAAM,IAAIG,IAAI,CAACC,IAAI;IACnB,MAAMC,WAAW,GAAGT,QAAQ,CAC1B;MACE,GAAGO,IAAI,CAACG;IACV,CAAC,EACDN,MACF,CAAC;IACD,IAAIK,WAAW,KAAK,KAAK,CAAC,EAAE;MAC1BL,MAAM,IAAIG,IAAI,CAACG,KAAK,CAACA,KAAK;IAC5B,CAAC,MAAM;MACLN,MAAM,IAAIK,WAAW;MACrBJ,QAAQ,GAAG,IAAI;IACjB;EACF;EACAD,MAAM,IAAID,aAAa,CAACA,aAAa,CAACD,MAAM,GAAG,CAAC,CAAC,CAACS,IAAI;EACtD,OAAON,QAAQ,GAAGD,MAAM,GAAG,IAAI;AACjC;AAEA,SAASP,0BAA0B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}