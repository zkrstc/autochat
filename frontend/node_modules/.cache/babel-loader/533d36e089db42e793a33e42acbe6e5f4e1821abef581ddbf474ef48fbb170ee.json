{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport { computed, ref, watch } from 'vue';\nimport { isString } from '@vue/shared';\nfunction getPct(str) {\n  return Number(str.slice(0, -1)) / 100;\n}\nfunction getPx(str) {\n  return Number(str.slice(0, -2));\n}\nfunction isPct(itemSize) {\n  return isString(itemSize) && itemSize.endsWith(\"%\");\n}\nfunction isPx(itemSize) {\n  return isString(itemSize) && itemSize.endsWith(\"px\");\n}\nfunction useSize(panels, containerSize) {\n  const propSizes = computed(() => panels.value.map(i => i.size));\n  const panelCounts = computed(() => panels.value.length);\n  const percentSizes = ref([]);\n  watch([propSizes, panelCounts, containerSize], () => {\n    var _a;\n    let ptgList = [];\n    let emptyCount = 0;\n    for (let i = 0; i < panelCounts.value; i += 1) {\n      const itemSize = (_a = panels.value[i]) == null ? void 0 : _a.size;\n      if (isPct(itemSize)) {\n        ptgList[i] = getPct(itemSize);\n      } else if (isPx(itemSize)) {\n        ptgList[i] = getPx(itemSize) / containerSize.value;\n      } else if (itemSize || itemSize === 0) {\n        const num = Number(itemSize);\n        if (!Number.isNaN(num)) {\n          ptgList[i] = num / containerSize.value;\n        }\n      } else {\n        emptyCount += 1;\n        ptgList[i] = void 0;\n      }\n    }\n    const totalPtg = ptgList.reduce((acc, ptg) => acc + (ptg || 0), 0);\n    if (totalPtg > 1 || !emptyCount) {\n      const scale = 1 / totalPtg;\n      ptgList = ptgList.map(ptg => ptg === void 0 ? 0 : ptg * scale);\n    } else {\n      const avgRest = (1 - totalPtg) / emptyCount;\n      ptgList = ptgList.map(ptg => ptg === void 0 ? avgRest : ptg);\n    }\n    percentSizes.value = ptgList;\n  });\n  const ptg2px = ptg => ptg * containerSize.value;\n  const pxSizes = computed(() => percentSizes.value.map(ptg2px));\n  return {\n    percentSizes,\n    pxSizes\n  };\n}\nexport { getPct, getPx, isPct, isPx, useSize };","map":{"version":3,"names":["getPct","str","Number","slice","getPx","isPct","itemSize","isString","endsWith","isPx","useSize","panels","containerSize","propSizes","computed","value","map","i","size","panelCounts","length","percentSizes","ref","watch","_a","ptgList","emptyCount","num","isNaN","totalPtg","reduce","acc","ptg","scale","avgRest","ptg2px","pxSizes"],"sources":["../../../../../../../packages/components/splitter/src/hooks/useSize.ts"],"sourcesContent":["import { computed, ref, watch } from 'vue'\nimport { isString } from '@element-plus/utils'\nimport type { ComputedRef, Ref } from 'vue'\nimport type { PanelItemState } from '../type'\n\nexport function getPct(str: string) {\n  return Number(str.slice(0, -1)) / 100\n}\n\nexport function getPx(str: string) {\n  return Number(str.slice(0, -2))\n}\n\nexport function isPct(\n  itemSize: string | number | undefined\n): itemSize is string {\n  return isString(itemSize) && itemSize.endsWith('%')\n}\n\nexport function isPx(\n  itemSize: string | number | undefined\n): itemSize is string {\n  return isString(itemSize) && itemSize.endsWith('px')\n}\n\nexport function useSize(\n  panels: Ref<PanelItemState[]>,\n  containerSize: ComputedRef<number>\n) {\n  const propSizes = computed(() => panels.value.map((i) => i.size))\n\n  const panelCounts = computed(() => panels.value.length)\n\n  const percentSizes = ref<number[]>([])\n\n  watch([propSizes, panelCounts, containerSize], () => {\n    let ptgList: (number | undefined)[] = []\n    let emptyCount = 0\n\n    // Convert the passed props size to a percentage\n    for (let i = 0; i < panelCounts.value; i += 1) {\n      const itemSize = panels.value[i]?.size\n\n      if (isPct(itemSize)) {\n        ptgList[i] = getPct(itemSize)\n      } else if (isPx(itemSize)) {\n        ptgList[i] = getPx(itemSize) / containerSize.value\n      } else if (itemSize || itemSize === 0) {\n        const num = Number(itemSize)\n\n        if (!Number.isNaN(num)) {\n          ptgList[i] = num / containerSize.value\n        }\n      } else {\n        emptyCount += 1\n        ptgList[i] = undefined\n      }\n    }\n\n    const totalPtg = ptgList.reduce<number>((acc, ptg) => acc + (ptg || 0), 0)\n\n    if (totalPtg > 1 || !emptyCount) {\n      // If it is greater than 1, the scaling ratio\n      const scale = 1 / totalPtg\n      ptgList = ptgList.map((ptg) => (ptg === undefined ? 0 : ptg * scale))\n    } else {\n      // If it is less than 1, the filling ratio\n      const avgRest = (1 - totalPtg) / emptyCount\n      ptgList = ptgList.map((ptg) => (ptg === undefined ? avgRest : ptg))\n    }\n\n    percentSizes.value = ptgList as number[]\n  })\n\n  const ptg2px = (ptg: number) => ptg * containerSize.value\n  const pxSizes = computed(() => percentSizes.value.map(ptg2px))\n\n  return { percentSizes, pxSizes }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}