{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as _ from 'lodash-es';\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nexport function initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(_.map(simpleNodes, function (v) {\n    return g.node(v).rank;\n  }));\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n  return layers;\n}","map":{"version":3,"names":["_","initOrder","g","visited","simpleNodes","filter","nodes","v","children","length","maxRank","max","map","node","rank","layers","range","dfs","has","push","forEach","successors","orderedVs","sortBy"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/dagre-d3-es/src/dagre/order/init-order.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nexport function initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    }),\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n"],"mappings":";AAAA,OAAO,KAAKA,CAAC,MAAM,WAAW;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,CAAC,EAAE;EAC3B,IAAIC,OAAO,GAAG,CAAC,CAAC;EAChB,IAAIC,WAAW,GAAGJ,CAAC,CAACK,MAAM,CAACH,CAAC,CAACI,KAAK,CAAC,CAAC,EAAE,UAAUC,CAAC,EAAE;IACjD,OAAO,CAACL,CAAC,CAACM,QAAQ,CAACD,CAAC,CAAC,CAACE,MAAM;EAC9B,CAAC,CAAC;EACF,IAAIC,OAAO,GAAGV,CAAC,CAACW,GAAG,CACjBX,CAAC,CAACY,GAAG,CAACR,WAAW,EAAE,UAAUG,CAAC,EAAE;IAC9B,OAAOL,CAAC,CAACW,IAAI,CAACN,CAAC,CAAC,CAACO,IAAI;EACvB,CAAC,CACH,CAAC;EACD,IAAIC,MAAM,GAAGf,CAAC,CAACY,GAAG,CAACZ,CAAC,CAACgB,KAAK,CAACN,OAAO,GAAG,CAAC,CAAC,EAAE,YAAY;IACnD,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,SAASO,GAAGA,CAACV,CAAC,EAAE;IACd,IAAIP,CAAC,CAACkB,GAAG,CAACf,OAAO,EAAEI,CAAC,CAAC,EAAE;IACvBJ,OAAO,CAACI,CAAC,CAAC,GAAG,IAAI;IACjB,IAAIM,IAAI,GAAGX,CAAC,CAACW,IAAI,CAACN,CAAC,CAAC;IACpBQ,MAAM,CAACF,IAAI,CAACC,IAAI,CAAC,CAACK,IAAI,CAACZ,CAAC,CAAC;IACzBP,CAAC,CAACoB,OAAO,CAAClB,CAAC,CAACmB,UAAU,CAACd,CAAC,CAAC,EAAEU,GAAG,CAAC;EACjC;EAEA,IAAIK,SAAS,GAAGtB,CAAC,CAACuB,MAAM,CAACnB,WAAW,EAAE,UAAUG,CAAC,EAAE;IACjD,OAAOL,CAAC,CAACW,IAAI,CAACN,CAAC,CAAC,CAACO,IAAI;EACvB,CAAC,CAAC;EACFd,CAAC,CAACoB,OAAO,CAACE,SAAS,EAAEL,GAAG,CAAC;EAEzB,OAAOF,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}