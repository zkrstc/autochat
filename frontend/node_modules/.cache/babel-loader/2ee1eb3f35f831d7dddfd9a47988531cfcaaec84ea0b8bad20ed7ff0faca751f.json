{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { findNodeForKeyword, findNodeForProperty } from '../utils/grammar-utils.js';\nimport { streamAst } from '../utils/ast-utils.js';\nimport { tokenToRange } from '../utils/cst-utils.js';\nimport { interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\nimport { diagnosticData } from './validation-registry.js';\nexport class DefaultDocumentValidator {\n  constructor(services) {\n    this.validationRegistry = services.validation.ValidationRegistry;\n    this.metadata = services.LanguageMetaData;\n  }\n  async validateDocument(document, options = {}, cancelToken = CancellationToken.None) {\n    const parseResult = document.parseResult;\n    const diagnostics = [];\n    await interruptAndCheck(cancelToken);\n    if (!options.categories || options.categories.includes('built-in')) {\n      this.processLexingErrors(parseResult, diagnostics, options);\n      if (options.stopAfterLexingErrors && diagnostics.some(d => {\n        var _a;\n        return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.LexingError;\n      })) {\n        return diagnostics;\n      }\n      this.processParsingErrors(parseResult, diagnostics, options);\n      if (options.stopAfterParsingErrors && diagnostics.some(d => {\n        var _a;\n        return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.ParsingError;\n      })) {\n        return diagnostics;\n      }\n      this.processLinkingErrors(document, diagnostics, options);\n      if (options.stopAfterLinkingErrors && diagnostics.some(d => {\n        var _a;\n        return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.LinkingError;\n      })) {\n        return diagnostics;\n      }\n    }\n    // Process custom validations\n    try {\n      diagnostics.push(...(await this.validateAst(parseResult.value, options, cancelToken)));\n    } catch (err) {\n      if (isOperationCancelled(err)) {\n        throw err;\n      }\n      console.error('An error occurred during validation:', err);\n    }\n    await interruptAndCheck(cancelToken);\n    return diagnostics;\n  }\n  processLexingErrors(parseResult, diagnostics, _options) {\n    var _a, _b, _c;\n    const lexerDiagnostics = [...parseResult.lexerErrors, ...((_b = (_a = parseResult.lexerReport) === null || _a === void 0 ? void 0 : _a.diagnostics) !== null && _b !== void 0 ? _b : [])];\n    for (const lexerDiagnostic of lexerDiagnostics) {\n      const severity = (_c = lexerDiagnostic.severity) !== null && _c !== void 0 ? _c : 'error';\n      const diagnostic = {\n        severity: toDiagnosticSeverity(severity),\n        range: {\n          start: {\n            line: lexerDiagnostic.line - 1,\n            character: lexerDiagnostic.column - 1\n          },\n          end: {\n            line: lexerDiagnostic.line - 1,\n            character: lexerDiagnostic.column + lexerDiagnostic.length - 1\n          }\n        },\n        message: lexerDiagnostic.message,\n        data: toDiagnosticData(severity),\n        source: this.getSource()\n      };\n      diagnostics.push(diagnostic);\n    }\n  }\n  processParsingErrors(parseResult, diagnostics, _options) {\n    for (const parserError of parseResult.parserErrors) {\n      let range = undefined;\n      // We can run into the chevrotain error recovery here\n      // The token contained in the parser error might be automatically inserted\n      // In this case every position value will be `NaN`\n      if (isNaN(parserError.token.startOffset)) {\n        // Some special parser error types contain a `previousToken`\n        // We can simply append our diagnostic to that token\n        if ('previousToken' in parserError) {\n          const token = parserError.previousToken;\n          if (!isNaN(token.startOffset)) {\n            const position = {\n              line: token.endLine - 1,\n              character: token.endColumn\n            };\n            range = {\n              start: position,\n              end: position\n            };\n          } else {\n            // No valid prev token. Might be empty document or containing only hidden tokens.\n            // Point to document start\n            const position = {\n              line: 0,\n              character: 0\n            };\n            range = {\n              start: position,\n              end: position\n            };\n          }\n        }\n      } else {\n        range = tokenToRange(parserError.token);\n      }\n      if (range) {\n        const diagnostic = {\n          severity: toDiagnosticSeverity('error'),\n          range,\n          message: parserError.message,\n          data: diagnosticData(DocumentValidator.ParsingError),\n          source: this.getSource()\n        };\n        diagnostics.push(diagnostic);\n      }\n    }\n  }\n  processLinkingErrors(document, diagnostics, _options) {\n    for (const reference of document.references) {\n      const linkingError = reference.error;\n      if (linkingError) {\n        const info = {\n          node: linkingError.container,\n          property: linkingError.property,\n          index: linkingError.index,\n          data: {\n            code: DocumentValidator.LinkingError,\n            containerType: linkingError.container.$type,\n            property: linkingError.property,\n            refText: linkingError.reference.$refText\n          }\n        };\n        diagnostics.push(this.toDiagnostic('error', linkingError.message, info));\n      }\n    }\n  }\n  async validateAst(rootNode, options, cancelToken = CancellationToken.None) {\n    const validationItems = [];\n    const acceptor = (severity, message, info) => {\n      validationItems.push(this.toDiagnostic(severity, message, info));\n    };\n    await this.validateAstBefore(rootNode, options, acceptor, cancelToken);\n    await this.validateAstNodes(rootNode, options, acceptor, cancelToken);\n    await this.validateAstAfter(rootNode, options, acceptor, cancelToken);\n    return validationItems;\n  }\n  async validateAstBefore(rootNode, options, acceptor, cancelToken = CancellationToken.None) {\n    var _a;\n    const checksBefore = this.validationRegistry.checksBefore;\n    for (const checkBefore of checksBefore) {\n      await interruptAndCheck(cancelToken);\n      await checkBefore(rootNode, acceptor, (_a = options.categories) !== null && _a !== void 0 ? _a : [], cancelToken);\n    }\n  }\n  async validateAstNodes(rootNode, options, acceptor, cancelToken = CancellationToken.None) {\n    await Promise.all(streamAst(rootNode).map(async node => {\n      await interruptAndCheck(cancelToken);\n      const checks = this.validationRegistry.getChecks(node.$type, options.categories);\n      for (const check of checks) {\n        await check(node, acceptor, cancelToken);\n      }\n    }));\n  }\n  async validateAstAfter(rootNode, options, acceptor, cancelToken = CancellationToken.None) {\n    var _a;\n    const checksAfter = this.validationRegistry.checksAfter;\n    for (const checkAfter of checksAfter) {\n      await interruptAndCheck(cancelToken);\n      await checkAfter(rootNode, acceptor, (_a = options.categories) !== null && _a !== void 0 ? _a : [], cancelToken);\n    }\n  }\n  toDiagnostic(severity, message, info) {\n    return {\n      message,\n      range: getDiagnosticRange(info),\n      severity: toDiagnosticSeverity(severity),\n      code: info.code,\n      codeDescription: info.codeDescription,\n      tags: info.tags,\n      relatedInformation: info.relatedInformation,\n      data: info.data,\n      source: this.getSource()\n    };\n  }\n  getSource() {\n    return this.metadata.languageId;\n  }\n}\nexport function getDiagnosticRange(info) {\n  if (info.range) {\n    return info.range;\n  }\n  let cstNode;\n  if (typeof info.property === 'string') {\n    cstNode = findNodeForProperty(info.node.$cstNode, info.property, info.index);\n  } else if (typeof info.keyword === 'string') {\n    cstNode = findNodeForKeyword(info.node.$cstNode, info.keyword, info.index);\n  }\n  cstNode !== null && cstNode !== void 0 ? cstNode : cstNode = info.node.$cstNode;\n  if (!cstNode) {\n    return {\n      start: {\n        line: 0,\n        character: 0\n      },\n      end: {\n        line: 0,\n        character: 0\n      }\n    };\n  }\n  return cstNode.range;\n}\n/**\n * Transforms the diagnostic severity from the {@link LexingDiagnosticSeverity} format to LSP's `DiagnosticSeverity` format.\n *\n * @param severity The lexing diagnostic severity\n * @returns Diagnostic severity according to `vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity`\n */\nexport function toDiagnosticSeverity(severity) {\n  switch (severity) {\n    case 'error':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'info':\n      return 3;\n    case 'hint':\n      return 4;\n    default:\n      throw new Error('Invalid diagnostic severity: ' + severity);\n  }\n}\nexport function toDiagnosticData(severity) {\n  switch (severity) {\n    case 'error':\n      return diagnosticData(DocumentValidator.LexingError);\n    case 'warning':\n      return diagnosticData(DocumentValidator.LexingWarning);\n    case 'info':\n      return diagnosticData(DocumentValidator.LexingInfo);\n    case 'hint':\n      return diagnosticData(DocumentValidator.LexingHint);\n    default:\n      throw new Error('Invalid diagnostic severity: ' + severity);\n  }\n}\nexport var DocumentValidator;\n(function (DocumentValidator) {\n  DocumentValidator.LexingError = 'lexing-error';\n  DocumentValidator.LexingWarning = 'lexing-warning';\n  DocumentValidator.LexingInfo = 'lexing-info';\n  DocumentValidator.LexingHint = 'lexing-hint';\n  DocumentValidator.ParsingError = 'parsing-error';\n  DocumentValidator.LinkingError = 'linking-error';\n})(DocumentValidator || (DocumentValidator = {}));","map":{"version":3,"names":["CancellationToken","findNodeForKeyword","findNodeForProperty","streamAst","tokenToRange","interruptAndCheck","isOperationCancelled","diagnosticData","DefaultDocumentValidator","constructor","services","validationRegistry","validation","ValidationRegistry","metadata","LanguageMetaData","validateDocument","document","options","cancelToken","None","parseResult","diagnostics","categories","includes","processLexingErrors","stopAfterLexingErrors","some","d","_a","data","code","DocumentValidator","LexingError","processParsingErrors","stopAfterParsingErrors","ParsingError","processLinkingErrors","stopAfterLinkingErrors","LinkingError","push","validateAst","value","err","console","error","_options","lexerDiagnostics","lexerErrors","_b","lexerReport","lexerDiagnostic","severity","_c","diagnostic","toDiagnosticSeverity","range","start","line","character","column","end","length","message","toDiagnosticData","source","getSource","parserError","parserErrors","undefined","isNaN","token","startOffset","previousToken","position","endLine","endColumn","reference","references","linkingError","info","node","container","property","index","containerType","$type","refText","$refText","toDiagnostic","rootNode","validationItems","acceptor","validateAstBefore","validateAstNodes","validateAstAfter","checksBefore","checkBefore","Promise","all","map","checks","getChecks","check","checksAfter","checkAfter","getDiagnosticRange","codeDescription","tags","relatedInformation","languageId","cstNode","$cstNode","keyword","Error","LexingWarning","LexingInfo","LexingHint"],"sources":["../../src/validation/document-validator.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}