{"ast":null,"code":"var _Class;\nimport { AbstractMermaidTokenBuilder, CommonValueConverter, MermaidGeneratedSharedModule, RadarGeneratedModule, __name } from \"./chunk-7PKI6E2E.mjs\";\n\n// src/language/radar/module.ts\nimport { EmptyFileSystem, createDefaultCoreModule, createDefaultSharedCoreModule, inject } from \"langium\";\n\n// src/language/radar/tokenBuilder.ts\nvar RadarTokenBuilder = (_Class = class RadarTokenBuilder extends AbstractMermaidTokenBuilder {\n  constructor() {\n    super([\"radar-beta\"]);\n  }\n}, __name(_Class, \"RadarTokenBuilder\"), _Class);\n\n// src/language/radar/module.ts\nvar RadarModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */__name(() => new RadarTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */__name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createRadarServices(context = EmptyFileSystem) {\n  const shared = inject(createDefaultSharedCoreModule(context), MermaidGeneratedSharedModule);\n  const Radar = inject(createDefaultCoreModule({\n    shared\n  }), RadarGeneratedModule, RadarModule);\n  shared.ServiceRegistry.register(Radar);\n  return {\n    shared,\n    Radar\n  };\n}\n__name(createRadarServices, \"createRadarServices\");\nexport { RadarModule, createRadarServices };","map":{"version":3,"names":["AbstractMermaidTokenBuilder","CommonValueConverter","MermaidGeneratedSharedModule","RadarGeneratedModule","__name","EmptyFileSystem","createDefaultCoreModule","createDefaultSharedCoreModule","inject","RadarTokenBuilder","_Class","constructor","RadarModule","parser","TokenBuilder","ValueConverter","createRadarServices","context","shared","Radar","ServiceRegistry","register"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-2O5ZK7RR.mjs"],"sourcesContent":["import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  RadarGeneratedModule,\n  __name\n} from \"./chunk-7PKI6E2E.mjs\";\n\n// src/language/radar/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/radar/tokenBuilder.ts\nvar RadarTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"RadarTokenBuilder\");\n  }\n  constructor() {\n    super([\"radar-beta\"]);\n  }\n};\n\n// src/language/radar/module.ts\nvar RadarModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new RadarTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createRadarServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Radar = inject(\n    createDefaultCoreModule({ shared }),\n    RadarGeneratedModule,\n    RadarModule\n  );\n  shared.ServiceRegistry.register(Radar);\n  return { shared, Radar };\n}\n__name(createRadarServices, \"createRadarServices\");\n\nexport {\n  RadarModule,\n  createRadarServices\n};\n"],"mappings":";AAAA,SACEA,2BAA2B,EAC3BC,oBAAoB,EACpBC,4BAA4B,EAC5BC,oBAAoB,EACpBC,MAAM,QACD,sBAAsB;;AAE7B;AACA,SACEC,eAAe,EACfC,uBAAuB,EACvBC,6BAA6B,EAC7BC,MAAM,QACD,SAAS;;AAEhB;AACA,IAAIC,iBAAiB,IAAAC,MAAA,GAAG,MAApBD,iBAAiB,SAAiBT,2BAA2B,CAAC;EAIhEW,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC;EACvB;AACF,CAAC,EALGP,MAAM,CAAAM,MAAA,EAAO,mBAAmB,CAAC,EAAAA,MAAA,CAKpC;;AAED;AACA,IAAIE,WAAW,GAAG;EAChBC,MAAM,EAAE;IACNC,YAAY,EAAE,eAAgBV,MAAM,CAAC,MAAM,IAAIK,iBAAiB,CAAC,CAAC,EAAE,cAAc,CAAC;IACnFM,cAAc,EAAE,eAAgBX,MAAM,CAAC,MAAM,IAAIH,oBAAoB,CAAC,CAAC,EAAE,gBAAgB;EAC3F;AACF,CAAC;AACD,SAASe,mBAAmBA,CAACC,OAAO,GAAGZ,eAAe,EAAE;EACtD,MAAMa,MAAM,GAAGV,MAAM,CACnBD,6BAA6B,CAACU,OAAO,CAAC,EACtCf,4BACF,CAAC;EACD,MAAMiB,KAAK,GAAGX,MAAM,CAClBF,uBAAuB,CAAC;IAAEY;EAAO,CAAC,CAAC,EACnCf,oBAAoB,EACpBS,WACF,CAAC;EACDM,MAAM,CAACE,eAAe,CAACC,QAAQ,CAACF,KAAK,CAAC;EACtC,OAAO;IAAED,MAAM;IAAEC;EAAM,CAAC;AAC1B;AACAf,MAAM,CAACY,mBAAmB,EAAE,qBAAqB,CAAC;AAElD,SACEJ,WAAW,EACXI,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}