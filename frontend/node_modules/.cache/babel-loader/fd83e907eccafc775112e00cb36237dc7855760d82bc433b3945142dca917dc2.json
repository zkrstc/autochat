{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { getEmojiSequenceFromString, getUnqualifiedEmojiSequence } from './cleanup.mjs';\nimport { getEmojiSequenceKeyword } from './format.mjs';\nimport { createOptimisedRegexForEmojiSequences } from './regex/create.mjs';\nimport { findMissingEmojis } from './test/missing.mjs';\nimport { parseEmojiTestFile } from './test/parse.mjs';\nimport { combineSimilarEmojiTestData } from './test/similar.mjs';\nimport { getEmojiTestDataTree } from './test/tree.mjs';\nimport { getQualifiedEmojiVariations } from './test/variations.mjs';\nimport './convert.mjs';\nimport './data.mjs';\nimport './regex/tree.mjs';\nimport './regex/base.mjs';\nimport './regex/numbers.mjs';\nimport './regex/similar.mjs';\nimport './test/components.mjs';\nimport './test/name.mjs';\nfunction prepareEmojiForIconsList(icons, rawTestData) {\n  const testData = rawTestData ? parseEmojiTestFile(rawTestData) : void 0;\n  let iconsList = [];\n  for (const char in icons) {\n    const sequence = getEmojiSequenceFromString(char);\n    iconsList.push({\n      icon: icons[char],\n      sequence\n    });\n  }\n  iconsList = getQualifiedEmojiVariations(iconsList);\n  if (testData) {\n    iconsList = iconsList.concat(findMissingEmojis(iconsList, getEmojiTestDataTree(combineSimilarEmojiTestData(testData))));\n  }\n  const preparedIcons = iconsList.map(item => {\n    const sequence = getEmojiSequenceKeyword(getUnqualifiedEmojiSequence(item.sequence));\n    return {\n      icon: item.icon,\n      sequence\n    };\n  });\n  const regex = createOptimisedRegexForEmojiSequences(iconsList.map(item => item.sequence));\n  return {\n    regex,\n    icons: preparedIcons\n  };\n}\nfunction prepareEmojiForIconSet(iconSet, rawTestData) {\n  return prepareEmojiForIconsList(iconSet.chars || {}, rawTestData);\n}\nexport { prepareEmojiForIconSet, prepareEmojiForIconsList };","map":{"version":3,"names":["getEmojiSequenceFromString","getUnqualifiedEmojiSequence","getEmojiSequenceKeyword","createOptimisedRegexForEmojiSequences","findMissingEmojis","parseEmojiTestFile","combineSimilarEmojiTestData","getEmojiTestDataTree","getQualifiedEmojiVariations","prepareEmojiForIconsList","icons","rawTestData","testData","iconsList","char","sequence","push","icon","concat","preparedIcons","map","item","regex","prepareEmojiForIconSet","iconSet","chars"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/emoji/parse.mjs"],"sourcesContent":["import { getEmojiSequenceFromString, getUnqualifiedEmojiSequence } from './cleanup.mjs';\nimport { getEmojiSequenceKeyword } from './format.mjs';\nimport { createOptimisedRegexForEmojiSequences } from './regex/create.mjs';\nimport { findMissingEmojis } from './test/missing.mjs';\nimport { parseEmojiTestFile } from './test/parse.mjs';\nimport { combineSimilarEmojiTestData } from './test/similar.mjs';\nimport { getEmojiTestDataTree } from './test/tree.mjs';\nimport { getQualifiedEmojiVariations } from './test/variations.mjs';\nimport './convert.mjs';\nimport './data.mjs';\nimport './regex/tree.mjs';\nimport './regex/base.mjs';\nimport './regex/numbers.mjs';\nimport './regex/similar.mjs';\nimport './test/components.mjs';\nimport './test/name.mjs';\n\nfunction prepareEmojiForIconsList(icons, rawTestData) {\n  const testData = rawTestData ? parseEmojiTestFile(rawTestData) : void 0;\n  let iconsList = [];\n  for (const char in icons) {\n    const sequence = getEmojiSequenceFromString(char);\n    iconsList.push({\n      icon: icons[char],\n      sequence\n    });\n  }\n  iconsList = getQualifiedEmojiVariations(iconsList);\n  if (testData) {\n    iconsList = iconsList.concat(\n      findMissingEmojis(\n        iconsList,\n        getEmojiTestDataTree(combineSimilarEmojiTestData(testData))\n      )\n    );\n  }\n  const preparedIcons = iconsList.map((item) => {\n    const sequence = getEmojiSequenceKeyword(\n      getUnqualifiedEmojiSequence(item.sequence)\n    );\n    return {\n      icon: item.icon,\n      sequence\n    };\n  });\n  const regex = createOptimisedRegexForEmojiSequences(\n    iconsList.map((item) => item.sequence)\n  );\n  return {\n    regex,\n    icons: preparedIcons\n  };\n}\nfunction prepareEmojiForIconSet(iconSet, rawTestData) {\n  return prepareEmojiForIconsList(iconSet.chars || {}, rawTestData);\n}\n\nexport { prepareEmojiForIconSet, prepareEmojiForIconsList };\n"],"mappings":";;;AAAA,SAASA,0BAA0B,EAAEC,2BAA2B,QAAQ,eAAe;AACvF,SAASC,uBAAuB,QAAQ,cAAc;AACtD,SAASC,qCAAqC,QAAQ,oBAAoB;AAC1E,SAASC,iBAAiB,QAAQ,oBAAoB;AACtD,SAASC,kBAAkB,QAAQ,kBAAkB;AACrD,SAASC,2BAA2B,QAAQ,oBAAoB;AAChE,SAASC,oBAAoB,QAAQ,iBAAiB;AACtD,SAASC,2BAA2B,QAAQ,uBAAuB;AACnE,OAAO,eAAe;AACtB,OAAO,YAAY;AACnB,OAAO,kBAAkB;AACzB,OAAO,kBAAkB;AACzB,OAAO,qBAAqB;AAC5B,OAAO,qBAAqB;AAC5B,OAAO,uBAAuB;AAC9B,OAAO,iBAAiB;AAExB,SAASC,wBAAwBA,CAACC,KAAK,EAAEC,WAAW,EAAE;EACpD,MAAMC,QAAQ,GAAGD,WAAW,GAAGN,kBAAkB,CAACM,WAAW,CAAC,GAAG,KAAK,CAAC;EACvE,IAAIE,SAAS,GAAG,EAAE;EAClB,KAAK,MAAMC,IAAI,IAAIJ,KAAK,EAAE;IACxB,MAAMK,QAAQ,GAAGf,0BAA0B,CAACc,IAAI,CAAC;IACjDD,SAAS,CAACG,IAAI,CAAC;MACbC,IAAI,EAAEP,KAAK,CAACI,IAAI,CAAC;MACjBC;IACF,CAAC,CAAC;EACJ;EACAF,SAAS,GAAGL,2BAA2B,CAACK,SAAS,CAAC;EAClD,IAAID,QAAQ,EAAE;IACZC,SAAS,GAAGA,SAAS,CAACK,MAAM,CAC1Bd,iBAAiB,CACfS,SAAS,EACTN,oBAAoB,CAACD,2BAA2B,CAACM,QAAQ,CAAC,CAC5D,CACF,CAAC;EACH;EACA,MAAMO,aAAa,GAAGN,SAAS,CAACO,GAAG,CAAEC,IAAI,IAAK;IAC5C,MAAMN,QAAQ,GAAGb,uBAAuB,CACtCD,2BAA2B,CAACoB,IAAI,CAACN,QAAQ,CAC3C,CAAC;IACD,OAAO;MACLE,IAAI,EAAEI,IAAI,CAACJ,IAAI;MACfF;IACF,CAAC;EACH,CAAC,CAAC;EACF,MAAMO,KAAK,GAAGnB,qCAAqC,CACjDU,SAAS,CAACO,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACN,QAAQ,CACvC,CAAC;EACD,OAAO;IACLO,KAAK;IACLZ,KAAK,EAAES;EACT,CAAC;AACH;AACA,SAASI,sBAAsBA,CAACC,OAAO,EAAEb,WAAW,EAAE;EACpD,OAAOF,wBAAwB,CAACe,OAAO,CAACC,KAAK,IAAI,CAAC,CAAC,EAAEd,WAAW,CAAC;AACnE;AAEA,SAASY,sBAAsB,EAAEd,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}