{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { defineComponent, toRef, getCurrentInstance, watch, provide, reactive, openBlock, createElementBlock, normalizeClass, unref, renderSlot, createCommentVNode } from 'vue';\nimport { splitterProps } from './splitter.mjs';\nimport { splitterRootContextKey } from './type.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useContainer } from './hooks/useContainer.mjs';\nimport { useSize } from './hooks/useSize.mjs';\nimport { useResize } from './hooks/useResize.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useOrderedChildren } from '../../../hooks/use-ordered-children/index.mjs';\nconst __default__ = defineComponent({\n  name: \"ElSplitter\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: splitterProps,\n  emits: [\"resizeStart\", \"resize\", \"resizeEnd\"],\n  setup(__props, {\n    emit: emits\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"splitter\");\n    const {\n      containerEl,\n      containerSize\n    } = useContainer(toRef(props, \"layout\"));\n    const {\n      removeChild: unregisterPanel,\n      children: panels,\n      addChild: sortPanel\n    } = useOrderedChildren(getCurrentInstance(), \"ElSplitterPanel\");\n    watch(panels, () => {\n      panels.value.forEach((instance, index) => {\n        instance.setIndex(index);\n      });\n    });\n    const {\n      percentSizes,\n      pxSizes\n    } = useSize(panels, containerSize);\n    const {\n      onMoveStart,\n      onMoving,\n      onMoveEnd,\n      onCollapse,\n      movingIndex\n    } = useResize(panels, containerSize, pxSizes);\n    const onResizeStart = index => {\n      onMoveStart(index);\n      emits(\"resizeStart\", index, pxSizes.value);\n    };\n    const onResize = (index, offset) => {\n      onMoving(index, offset);\n      emits(\"resize\", index, pxSizes.value);\n    };\n    const onResizeEnd = index => {\n      onMoveEnd();\n      emits(\"resizeEnd\", index, pxSizes.value);\n    };\n    provide(splitterRootContextKey, reactive({\n      panels,\n      percentSizes,\n      pxSizes,\n      layout: props.layout,\n      movingIndex,\n      containerSize,\n      onMoveStart: onResizeStart,\n      onMoving: onResize,\n      onMoveEnd: onResizeEnd,\n      onCollapse,\n      registerPanel: panel => {\n        panels.value.push(panel);\n      },\n      sortPanel,\n      unregisterPanel\n    }));\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"containerEl\",\n        ref: containerEl,\n        class: normalizeClass([unref(ns).b(), unref(ns).e(_ctx.layout)])\n      }, [renderSlot(_ctx.$slots, \"default\"), createCommentVNode(\" Prevent iframe touch events from breaking \"), unref(movingIndex) ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass([unref(ns).e(\"mask\"), unref(ns).e(`mask-${_ctx.layout}`)])\n      }, null, 2)) : createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n});\nvar Splitter = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"splitter.vue\"]]);\nexport { Splitter as default };","map":{"version":3,"names":["name","ns","useNamespace","containerEl","containerSize","useContainer","toRef","props","removeChild","unregisterPanel","children","panels","addChild","sortPanel","useOrderedChildren","getCurrentInstance","watch","value","forEach","instance","index","setIndex","percentSizes","pxSizes","useSize","onMoveStart","onMoving","onMoveEnd","onCollapse","movingIndex","useResize","onResizeStart","emits","onResize","offset","onResizeEnd","provide","splitterRootContextKey","reactive","layout","registerPanel","panel","push","_ctx","_cache","openBlock","createElementBlock","ref_key","ref","class","normalizeClass","unref","b","e","renderSlot","$slots"],"sources":["../../../../../../packages/components/splitter/src/splitter.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { getCurrentInstance, provide, reactive, toRef, watch } from 'vue'\nimport { useNamespace, useOrderedChildren } from '@element-plus/hooks'\nimport { useContainer, useResize, useSize } from './hooks'\nimport { splitterProps } from './splitter'\nimport { type PanelItemState, splitterRootContextKey } from './type'\n\nconst ns = useNamespace('splitter')\n\ndefineOptions({\n  name: 'ElSplitter',\n})\n\nconst emits = defineEmits<{\n  (e: 'resizeStart', index: number, sizes: number[]): void\n  (e: 'resize', index: number, sizes: number[]): void\n  (e: 'resizeEnd', index: number, sizes: number[]): void\n}>()\n\nconst props = defineProps(splitterProps)\n\nconst { containerEl, containerSize } = useContainer(toRef(props, 'layout'))\n\nconst {\n  removeChild: unregisterPanel,\n  children: panels,\n  addChild: sortPanel,\n} = useOrderedChildren<PanelItemState>(getCurrentInstance()!, 'ElSplitterPanel')\n\nwatch(panels, () => {\n  panels.value.forEach((instance: PanelItemState, index: number) => {\n    instance.setIndex(index)\n  })\n})\n\nconst { percentSizes, pxSizes } = useSize(panels, containerSize)\n\nconst { onMoveStart, onMoving, onMoveEnd, onCollapse, movingIndex } = useResize(\n  panels,\n  containerSize,\n  pxSizes\n)\n\nconst onResizeStart = (index: number) => {\n  onMoveStart(index)\n  emits('resizeStart', index, pxSizes.value)\n}\n\nconst onResize = (index: number, offset: number) => {\n  onMoving(index, offset)\n  emits('resize', index, pxSizes.value)\n}\n\nconst onResizeEnd = (index: number) => {\n  onMoveEnd()\n  emits('resizeEnd', index, pxSizes.value)\n}\n\nprovide(\n  splitterRootContextKey,\n  reactive({\n    panels,\n    percentSizes,\n    pxSizes,\n    layout: props.layout,\n    movingIndex,\n    containerSize,\n    onMoveStart: onResizeStart,\n    onMoving: onResize,\n    onMoveEnd: onResizeEnd,\n    onCollapse,\n    registerPanel: (panel: PanelItemState) => {\n      panels.value.push(panel)\n    },\n    sortPanel,\n    unregisterPanel,\n  })\n)\n</script>\n\n<template>\n  <div ref=\"containerEl\" :class=\"[ns.b(), ns.e(layout)]\">\n    <slot />\n    <!-- Prevent iframe touch events from breaking -->\n    <div v-if=\"movingIndex\" :class=\"[ns.e('mask'), ns.e(`mask-${layout}`)]\" />\n  </div>\n</template>\n"],"mappings":";;;;;;;;;;;;mCASc;EACZA,IAAM;AACR;;;;;;;;;IAJM,MAAAC,EAAA,GAAKC,YAAA,CAAa,UAAU;IAc5B;MAAEC,WAAA;MAAaC;IAAc,IAAIC,YAAA,CAAaC,KAAM,CAAAC,KAAA,EAAO,QAAQ,CAAC;IAEpE;MACJC,WAAa,EAAAC,eAAA;MACbC,QAAU,EAAAC,MAAA;MACVC,QAAU,EAAAC;IAAA,CACR,GAAAC,kBAAA,CAAmCC,kBAAmB,IAAI,iBAAiB;IAE/EC,KAAA,CAAML,MAAA,EAAQ,MAAM;MAClBA,MAAA,CAAOM,KAAM,CAAAC,OAAA,CAAQ,CAACC,QAAA,EAA0BC,KAAkB;QAChED,QAAA,CAASE,QAAA,CAASD,KAAK;MAAA,CACxB;IAAA,CACF;IAED,MAAM;MAAEE,YAAc;MAAAC;IAAA,CAAY,GAAAC,OAAA,CAAQb,MAAA,EAAQP,aAAa;IAE/D,MAAM;MAAEqB,WAAa;MAAAC,QAAA;MAAUC,SAAW;MAAAC,UAAA;MAAYC;IAAA,CAAgB,GAAAC,SAAA,CAAAnB,MAAA,EAAAP,aAAA,EAAAmB,OAAA;IACpE,MAAAQ,aAAA,GAAAX,KAAA;MACAK,WAAA,CAAAL,KAAA;MACAY,KAAA,gBAAAZ,KAAA,EAAAG,OAAA,CAAAN,KAAA;IAAA,CACF;IAEM,MAAAgB,QAAA,GAAAA,CAAAb,KAAiB,EAAkBc,MAAA;MACvCR,QAAA,CAAAN,KAAiB,EAAAc,MAAA;MACXF,KAAA,WAAAZ,KAAe,EAAOG,OAAA,CAAAN,KAAQ,CAAK;IAAA,CAC3C;IAEM,MAAAkB,WAAW,GAACf,KAAkC;MAClDO,SAAS;MACHK,KAAA,YAAiB,EAAAZ,KAAA,EAAAG,OAAa,CAAAN,KAAA;IAAA,CACtC;IAEMmB,OAAA,CAAAC,sBAAiC,EAAAC,QAAA;MAC3B3B,MAAA;MACJW,YAAA;MACRC,OAAA;MAEAgB,MAAA,EAAAhC,KAAA,CAAAgC,MAAA;MACEV,WAAA;MACAzB,aAAS;MACPqB,WAAA,EAAAM,aAAA;MACAL,QAAA,EAAAO,QAAA;MACAN,SAAA,EAAAQ,WAAA;MAAAP,UACQ;MACRY,aAAA,EAAAC,KAAA;QACA9B,MAAA,CAAAM,KAAA,CAAAyB,IAAA,CAAAD,KAAA;MAAA;MACa5B,SACH;MAAAJ;IACC,CACX;IACA,QAAAkC,IAAA,EAAAC,MAAgB,KAA0B;MACjC,OAAAC,SAAM,IAAAC,kBAAU;QACzBC,OAAA;QACAC,GAAA,EAAA7C,WAAA;QACA8C,KAAA,EAAAC,cAAA,EAAAC,KAAA,CAAAlD,EAAA,EAAAmD,CAAA,IAAAD,KAAA,CAAAlD,EAAA,EAAAoD,CAAA,CAAAV,IAAA,CAAAJ,MAAA;MAAA,CACD,GACHe,UAAA,CAAAX,IAAA,CAAAY,MAAA,c","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}