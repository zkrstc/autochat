{"ast":null,"code":"import { defineComponent, watch, renderSlot } from 'vue';\nimport { provideGlobalConfig } from './hooks/use-global-config.mjs';\nimport { configProviderProps } from './config-provider-props.mjs';\nconst messageConfig = {};\nconst ConfigProvider = defineComponent({\n  name: \"ElConfigProvider\",\n  props: configProviderProps,\n  setup(props, {\n    slots\n  }) {\n    const config = provideGlobalConfig(props);\n    watch(() => props.message, val => {\n      var _a, _b;\n      Object.assign(messageConfig, (_b = (_a = config == null ? void 0 : config.value) == null ? void 0 : _a.message) != null ? _b : {}, val != null ? val : {});\n    }, {\n      immediate: true,\n      deep: true\n    });\n    return () => renderSlot(slots, \"default\", {\n      config: config == null ? void 0 : config.value\n    });\n  }\n});\nexport { ConfigProvider as default, messageConfig };","map":{"version":3,"names":["messageConfig","ConfigProvider","defineComponent","name","props","configProviderProps","setup","slots","config","provideGlobalConfig","watch","message","val","_a","_b","Object","assign","value","immediate","deep","renderSlot"],"sources":["../../../../../../packages/components/config-provider/src/config-provider.ts"],"sourcesContent":["import { defineComponent, renderSlot, watch } from 'vue'\nimport { provideGlobalConfig } from './hooks/use-global-config'\nimport { configProviderProps } from './config-provider-props'\n\nimport type { MessageConfigContext } from '@element-plus/components/message'\n\nexport const messageConfig: MessageConfigContext = {}\n\nconst ConfigProvider = defineComponent({\n  name: 'ElConfigProvider',\n  props: configProviderProps,\n\n  setup(props, { slots }) {\n    const config = provideGlobalConfig(props)\n    watch(\n      () => props.message,\n      (val) => {\n        Object.assign(messageConfig, config?.value?.message ?? {}, val ?? {})\n      },\n      { immediate: true, deep: true }\n    )\n    return () => renderSlot(slots, 'default', { config: config?.value })\n  },\n})\nexport type ConfigProviderInstance = InstanceType<typeof ConfigProvider> &\n  unknown\n\nexport default ConfigProvider\n"],"mappings":";;;AAGY,MAACA,aAAa,GAAG;AACxB,MAACC,cAAc,GAAGC,eAAe,CAAC;EACrCC,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAEC,mBAAmB;EAC1BC,KAAKA,CAACF,KAAK,EAAE;IAAEG;EAAK,CAAE,EAAE;IACtB,MAAMC,MAAM,GAAGC,mBAAmB,CAACL,KAAK,CAAC;IACzCM,KAAK,CAAC,MAAMN,KAAK,CAACO,OAAO,EAAGC,GAAG,IAAK;MAClC,IAAIC,EAAE,EAAEC,EAAE;MACVC,MAAM,CAACC,MAAM,CAAChB,aAAa,EAAE,CAACc,EAAE,GAAG,CAACD,EAAE,GAAGL,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACS,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGJ,EAAE,CAACF,OAAO,KAAK,IAAI,GAAGG,EAAE,GAAG,EAAE,EAAEF,GAAG,IAAI,IAAI,GAAGA,GAAG,GAAG,EAAE,CAAC;IAChK,CAAK,EAAE;MAAEM,SAAS,EAAE,IAAI;MAAEC,IAAI,EAAE;IAAI,CAAE,CAAC;IACnC,OAAO,MAAMC,UAAU,CAACb,KAAK,EAAE,SAAS,EAAE;MAAEC,MAAM,EAAEA,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACS;IAAK,CAAE,CAAC;EACjG;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}