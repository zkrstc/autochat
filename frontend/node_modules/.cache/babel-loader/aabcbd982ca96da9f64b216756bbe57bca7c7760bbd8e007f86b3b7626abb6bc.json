{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"chatbot-dialog\"\n};\nconst _hoisted_2 = {\n  class: \"chatbot-header\"\n};\nconst _hoisted_3 = {\n  class: \"chatbot-messages\"\n};\nconst _hoisted_4 = {\n  class: \"chatbot-message-content\"\n};\nconst _hoisted_5 = {\n  class: \"chatbot-input-area\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" 悬浮按钮 \"), _createElementVNode(\"div\", {\n    class: \"chatbot-float-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleChat && $options.toggleChat(...args))\n  }, _cache[5] || (_cache[5] = [_createElementVNode(\"i\", {\n    class: \"fas fa-comment-dots\"\n  }, null, -1 /* HOISTED */)])), _createCommentVNode(\" 聊天对话框 \"), $data.showChat ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[7] || (_cache[7] = _createElementVNode(\"span\", null, \"DeepSeek 助手\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.toggleChat && $options.toggleChat(...args)),\n    class: \"chatbot-close-btn\"\n  }, _cache[6] || (_cache[6] = [_createElementVNode(\"i\", {\n    class: \"fas fa-times\"\n  }, null, -1 /* HOISTED */)]))]), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (msg, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass(['chatbot-message', msg.sender])\n    }, [_createElementVNode(\"div\", _hoisted_4, _toDisplayString(msg.text), 1 /* TEXT */)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_5, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.userInput = $event),\n    onKeyup: _cache[3] || (_cache[3] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    placeholder: \"输入您的问题...\",\n    class: \"chatbot-input\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.userInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.sendMessage && $options.sendMessage(...args)),\n    class: \"chatbot-send-btn\"\n  }, _cache[8] || (_cache[8] = [_createElementVNode(\"i\", {\n    class: \"fas fa-paper-plane\"\n  }, null, -1 /* HOISTED */)]))])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_createCommentVNode","_createElementVNode","onClick","_cache","args","$options","toggleChat","$data","showChat","_hoisted_1","_hoisted_2","_hoisted_3","_Fragment","_renderList","messages","msg","index","_normalizeClass","sender","_hoisted_4","_toDisplayString","text","_hoisted_5","$event","userInput","onKeyup","_withKeys","sendMessage","placeholder"],"sources":["C:\\Users\\ASUS\\Desktop\\autochat\\frontend\\src\\views\\ChatbotFloat.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <!-- 悬浮按钮 -->\r\n        <div class=\"chatbot-float-button\" @click=\"toggleChat\">\r\n            <i class=\"fas fa-comment-dots\"></i>\r\n        </div>\r\n\r\n        <!-- 聊天对话框 -->\r\n        <div v-if=\"showChat\" class=\"chatbot-dialog\">\r\n            <div class=\"chatbot-header\">\r\n                <span>DeepSeek 助手</span>\r\n                <button @click=\"toggleChat\" class=\"chatbot-close-btn\">\r\n                    <i class=\"fas fa-times\"></i>\r\n                </button>\r\n            </div>\r\n\r\n            <div class=\"chatbot-messages\">\r\n                <div v-for=\"(msg, index) in messages\" :key=\"index\" :class=\"['chatbot-message', msg.sender]\">\r\n                    <div class=\"chatbot-message-content\">{{ msg.text }}</div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"chatbot-input-area\">\r\n                <input v-model=\"userInput\" @keyup.enter=\"sendMessage\" placeholder=\"输入您的问题...\" class=\"chatbot-input\" />\r\n                <button @click=\"sendMessage\" class=\"chatbot-send-btn\">\r\n                    <i class=\"fas fa-paper-plane\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: 'ChatbotFloat',\r\n    data() {\r\n        return {\r\n            showChat: false,\r\n            userInput: '',\r\n            messages: [\r\n                { text: '您好！我是DeepSeek助手，有什么可以帮您的吗？', sender: 'bot' }\r\n            ]\r\n        }\r\n    },\r\n    methods: {\r\n        toggleChat() {\r\n            this.showChat = !this.showChat\r\n        },\r\n        sendMessage() {\r\n            if (!this.userInput.trim()) return\r\n\r\n            // 添加用户消息\r\n            this.messages.push({\r\n                text: this.userInput,\r\n                sender: 'user'\r\n            })\r\n\r\n            const userMessage = this.userInput\r\n            this.userInput = ''\r\n\r\n            // 模拟API调用\r\n            this.getBotResponse(userMessage)\r\n        },\r\n        async getBotResponse(userMessage) {\r\n            try {\r\n                // 替换为实际的API调用\r\n                const response = await fetch('/api/chat', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer sk-b980ba2bac8142cdadbe10a0155f4ec4'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        message: userMessage,\r\n                        // 其他必要参数\r\n                    })\r\n                });\r\n\r\n                const data = await response.json();\r\n                this.messages.push({\r\n                    text: data.reply,\r\n                    sender: 'bot'\r\n                });\r\n\r\n            } catch (error) {\r\n                this.messages.push({\r\n                    text: '抱歉，请求API时出错: ' + error.message,\r\n                    sender: 'bot'\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* 悬浮按钮样式 */\r\n.chatbot-float-button {\r\n    position: fixed;\r\n    bottom: 30px;\r\n    right: 30px;\r\n    width: 60px;\r\n    height: 60px;\r\n    background-color: #4f46e5;\r\n    color: white;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    cursor: pointer;\r\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n    z-index: 9999;\r\n    font-size: 24px;\r\n    transition: all 0.3s ease;\r\n}\r\n\r\n.chatbot-float-button:hover {\r\n    background-color: #4338ca;\r\n    transform: scale(1.05);\r\n}\r\n\r\n/* 对话框样式 */\r\n.chatbot-dialog {\r\n    position: fixed;\r\n    bottom: 100px;\r\n    right: 30px;\r\n    width: 350px;\r\n    max-height: 500px;\r\n    background-color: white;\r\n    border-radius: 12px;\r\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);\r\n    display: flex;\r\n    flex-direction: column;\r\n    z-index: 9998;\r\n    overflow: hidden;\r\n}\r\n\r\n.chatbot-header {\r\n    padding: 15px;\r\n    background-color: #4f46e5;\r\n    color: white;\r\n    font-weight: bold;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n.chatbot-close-btn {\r\n    background: none;\r\n    border: none;\r\n    color: white;\r\n    cursor: pointer;\r\n    font-size: 16px;\r\n}\r\n\r\n.chatbot-messages {\r\n    flex: 1;\r\n    padding: 15px;\r\n    overflow-y: auto;\r\n    max-height: 400px;\r\n}\r\n\r\n.chatbot-message {\r\n    margin-bottom: 12px;\r\n    display: flex;\r\n}\r\n\r\n.chatbot-message.user {\r\n    justify-content: flex-end;\r\n}\r\n\r\n.chatbot-message.bot {\r\n    justify-content: flex-start;\r\n}\r\n\r\n.chatbot-message-content {\r\n    max-width: 80%;\r\n    padding: 10px 15px;\r\n    border-radius: 18px;\r\n}\r\n\r\n.chatbot-message.user .chatbot-message-content {\r\n    background-color: #4f46e5;\r\n    color: white;\r\n    border-bottom-right-radius: 4px;\r\n}\r\n\r\n.chatbot-message.bot .chatbot-message-content {\r\n    background-color: #f3f4f6;\r\n    color: #111827;\r\n    border-bottom-left-radius: 4px;\r\n}\r\n\r\n.chatbot-input-area {\r\n    display: flex;\r\n    padding: 12px;\r\n    border-top: 1px solid #e5e7eb;\r\n}\r\n\r\n.chatbot-input {\r\n    flex: 1;\r\n    padding: 10px 15px;\r\n    border: 1px solid #d1d5db;\r\n    border-radius: 20px;\r\n    outline: none;\r\n    margin-right: 10px;\r\n}\r\n\r\n.chatbot-input:focus {\r\n    border-color: #4f46e5;\r\n}\r\n\r\n.chatbot-send-btn {\r\n    width: 40px;\r\n    height: 40px;\r\n    background-color: #4f46e5;\r\n    color: white;\r\n    border: none;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.chatbot-send-btn:hover {\r\n    background-color: #4338ca;\r\n}\r\n</style>"],"mappings":";;EAAAA,GAAA;EAQ6BC,KAAK,EAAC;;;EAClBA,KAAK,EAAC;AAAgB;;EAOtBA,KAAK,EAAC;AAAkB;;EAEhBA,KAAK,EAAC;AAAyB;;EAIvCA,KAAK,EAAC;AAAoB;;uBArBvCC,mBAAA,CA4BM,cA3BFC,mBAAA,UAAa,EACbC,mBAAA,CAEM;IAFDH,KAAK,EAAC,sBAAsB;IAAEI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;gCAChDH,mBAAA,CAAmC;IAAhCH,KAAK,EAAC;EAAqB,2B,IAGlCE,mBAAA,WAAc,EACHO,KAAA,CAAAC,QAAQ,I,cAAnBT,mBAAA,CAoBM,OApBNU,UAoBM,GAnBFR,mBAAA,CAKM,OALNS,UAKM,G,0BAJFT,mBAAA,CAAwB,cAAlB,aAAW,sBACjBA,mBAAA,CAES;IAFAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;IAAEN,KAAK,EAAC;gCAC9BG,mBAAA,CAA4B;IAAzBH,KAAK,EAAC;EAAc,2B,MAI/BG,mBAAA,CAIM,OAJNU,UAIM,I,kBAHFZ,mBAAA,CAEMa,SAAA,QAnBtBC,WAAA,CAiB4CN,KAAA,CAAAO,QAAQ,EAjBpD,CAiB6BC,GAAG,EAAEC,KAAK;yBAAvBjB,mBAAA,CAEM;MAFiCF,GAAG,EAAEmB,KAAK;MAAGlB,KAAK,EAjBzEmB,eAAA,qBAiB+FF,GAAG,CAACG,MAAM;QACrFjB,mBAAA,CAAyD,OAAzDkB,UAAyD,EAAAC,gBAAA,CAAjBL,GAAG,CAACM,IAAI,iB;oCAIxDpB,mBAAA,CAKM,OALNqB,UAKM,G,gBAJFrB,mBAAA,CAAsG;IAvBtH,uBAAAE,MAAA,QAAAA,MAAA,MAAAoB,MAAA,IAuBgChB,KAAA,CAAAiB,SAAS,GAAAD,MAAA;IAAGE,OAAK,EAAAtB,MAAA,QAAAA,MAAA,MAvBjDuB,SAAA,KAAAtB,IAAA,KAuByDC,QAAA,CAAAsB,WAAA,IAAAtB,QAAA,CAAAsB,WAAA,IAAAvB,IAAA,CAAW;IAAEwB,WAAW,EAAC,WAAW;IAAC9B,KAAK,EAAC;iEAApES,KAAA,CAAAiB,SAAS,E,GACzBvB,mBAAA,CAES;IAFAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAsB,WAAA,IAAAtB,QAAA,CAAAsB,WAAA,IAAAvB,IAAA,CAAW;IAAEN,KAAK,EAAC;gCAC/BG,mBAAA,CAAkC;IAA/BH,KAAK,EAAC;EAAoB,2B,UAzBjDE,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}