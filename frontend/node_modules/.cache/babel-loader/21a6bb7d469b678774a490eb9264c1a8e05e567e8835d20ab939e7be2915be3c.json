{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { defineComponent, useAttrs, ref, computed, watch, nextTick, onMounted, openBlock, createBlock, unref, withCtx, withDirectives, createElementBlock, normalizeClass, normalizeStyle, createVNode, createSlots, withModifiers, renderSlot, Fragment, renderList, toDisplayString, createElementVNode, withKeys, vModelText, createCommentVNode, isRef, vShow } from 'vue';\nimport { cloneDeep, debounce } from 'lodash-unified';\nimport { useCssVar, useResizeObserver, isClient } from '@vueuse/core';\nimport { ElCascaderPanel } from '../../cascader-panel/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { CircleClose, ArrowDown, Check } from '@element-plus/icons-vue';\nimport { cascaderProps, cascaderEmits } from './cascader.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useFormItem } from '../../form/src/hooks/use-form-item.mjs';\nimport { useEmptyValues } from '../../../hooks/use-empty-values/index.mjs';\nimport { useComposition } from '../../../hooks/use-composition/index.mjs';\nimport { useFormSize } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isPromise } from '@vue/shared';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\nconst COMPONENT_NAME = \"ElCascader\";\nconst __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: cascaderProps,\n  emits: cascaderEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const popperOptions = {\n      modifiers: [{\n        name: \"arrowPosition\",\n        enabled: true,\n        phase: \"main\",\n        fn: ({\n          state\n        }) => {\n          const {\n            modifiersData,\n            placement\n          } = state;\n          if ([\"right\", \"left\", \"bottom\", \"top\"].includes(placement)) return;\n          if (modifiersData.arrow) {\n            modifiersData.arrow.x = 35;\n          }\n        },\n        requires: [\"arrow\"]\n      }]\n    };\n    const attrs = useAttrs();\n    let inputInitialHeight = 0;\n    let pressDeleteCount = 0;\n    const nsCascader = useNamespace(\"cascader\");\n    const nsInput = useNamespace(\"input\");\n    const {\n      t\n    } = useLocale();\n    const {\n      form,\n      formItem\n    } = useFormItem();\n    const {\n      valueOnClear\n    } = useEmptyValues(props);\n    const {\n      isComposing,\n      handleComposition\n    } = useComposition({\n      afterComposition(event) {\n        var _a;\n        const text = (_a = event.target) == null ? void 0 : _a.value;\n        handleInput(text);\n      }\n    });\n    const tooltipRef = ref(null);\n    const input = ref(null);\n    const tagWrapper = ref(null);\n    const cascaderPanelRef = ref(null);\n    const suggestionPanel = ref(null);\n    const popperVisible = ref(false);\n    const inputHover = ref(false);\n    const filtering = ref(false);\n    const filterFocus = ref(false);\n    const inputValue = ref(\"\");\n    const searchInputValue = ref(\"\");\n    const presentTags = ref([]);\n    const allPresentTags = ref([]);\n    const suggestions = ref([]);\n    const cascaderStyle = computed(() => {\n      return attrs.style;\n    });\n    const isDisabled = computed(() => props.disabled || (form == null ? void 0 : form.disabled));\n    const inputPlaceholder = computed(() => {\n      var _a;\n      return (_a = props.placeholder) != null ? _a : t(\"el.cascader.placeholder\");\n    });\n    const currentPlaceholder = computed(() => searchInputValue.value || presentTags.value.length > 0 || isComposing.value ? \"\" : inputPlaceholder.value);\n    const realSize = useFormSize();\n    const tagSize = computed(() => realSize.value === \"small\" ? \"small\" : \"default\");\n    const multiple = computed(() => !!props.props.multiple);\n    const readonly = computed(() => !props.filterable || multiple.value);\n    const searchKeyword = computed(() => multiple.value ? searchInputValue.value : inputValue.value);\n    const checkedNodes = computed(() => {\n      var _a;\n      return ((_a = cascaderPanelRef.value) == null ? void 0 : _a.checkedNodes) || [];\n    });\n    const clearBtnVisible = computed(() => {\n      if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value) return false;\n      return !!checkedNodes.value.length;\n    });\n    const presentText = computed(() => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      const nodes = checkedNodes.value;\n      return nodes.length ? multiple.value ? \"\" : nodes[0].calcText(showAllLevels, separator) : \"\";\n    });\n    const validateState = computed(() => (formItem == null ? void 0 : formItem.validateState) || \"\");\n    const checkedValue = computed({\n      get() {\n        return cloneDeep(props.modelValue);\n      },\n      set(val) {\n        const value = val != null ? val : valueOnClear.value;\n        emit(UPDATE_MODEL_EVENT, value);\n        emit(CHANGE_EVENT, value);\n        if (props.validateEvent) {\n          formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn(err));\n        }\n      }\n    });\n    const cascaderKls = computed(() => {\n      return [nsCascader.b(), nsCascader.m(realSize.value), nsCascader.is(\"disabled\", isDisabled.value), attrs.class];\n    });\n    const cascaderIconKls = computed(() => {\n      return [nsInput.e(\"icon\"), \"icon-arrow-down\", nsCascader.is(\"reverse\", popperVisible.value)];\n    });\n    const inputClass = computed(() => {\n      return nsCascader.is(\"focus\", popperVisible.value || filterFocus.value);\n    });\n    const contentRef = computed(() => {\n      var _a, _b;\n      return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    const togglePopperVisible = visible => {\n      var _a, _b, _c;\n      if (isDisabled.value) return;\n      visible = visible != null ? visible : !popperVisible.value;\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible;\n        (_b = (_a = input.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute(\"aria-expanded\", `${visible}`);\n        if (visible) {\n          updatePopperPosition();\n          nextTick((_c = cascaderPanelRef.value) == null ? void 0 : _c.scrollToExpandingNode);\n        } else if (props.filterable) {\n          syncPresentTextValue();\n        }\n        emit(\"visibleChange\", visible);\n      }\n    };\n    const updatePopperPosition = () => {\n      nextTick(() => {\n        var _a;\n        (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper();\n      });\n    };\n    const hideSuggestionPanel = () => {\n      filtering.value = false;\n    };\n    const genTag = node => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      return {\n        node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled,\n        isCollapseTag: false\n      };\n    };\n    const deleteTag = tag => {\n      var _a;\n      const node = tag.node;\n      node.doCheck(false);\n      (_a = cascaderPanelRef.value) == null ? void 0 : _a.calculateCheckedValue();\n      emit(\"removeTag\", node.valueByOption);\n    };\n    const calculatePresentTags = () => {\n      if (!multiple.value) return;\n      const nodes = checkedNodes.value;\n      const tags = [];\n      const allTags = [];\n      nodes.forEach(node => allTags.push(genTag(node)));\n      allPresentTags.value = allTags;\n      if (nodes.length) {\n        nodes.slice(0, props.maxCollapseTags).forEach(node => tags.push(genTag(node)));\n        const rest = nodes.slice(props.maxCollapseTags);\n        const restCount = rest.length;\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: `+ ${restCount}`,\n              closable: false,\n              isCollapseTag: true\n            });\n          } else {\n            rest.forEach(node => tags.push(genTag(node)));\n          }\n        }\n      }\n      presentTags.value = tags;\n    };\n    const calculateSuggestions = () => {\n      var _a, _b;\n      const {\n        filterMethod,\n        showAllLevels,\n        separator\n      } = props;\n      const res = (_b = (_a = cascaderPanelRef.value) == null ? void 0 : _a.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter(node => {\n        if (node.isDisabled) return false;\n        node.calcText(showAllLevels, separator);\n        return filterMethod(node, searchKeyword.value);\n      });\n      if (multiple.value) {\n        presentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n        allPresentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n      }\n      filtering.value = true;\n      suggestions.value = res;\n      updatePopperPosition();\n    };\n    const focusFirstNode = () => {\n      var _a;\n      let firstNode;\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(`.${nsCascader.e(\"suggestion-item\")}`);\n      } else {\n        firstNode = (_a = cascaderPanelRef.value) == null ? void 0 : _a.$el.querySelector(`.${nsCascader.b(\"node\")}[tabindex=\"-1\"]`);\n      }\n      if (firstNode) {\n        firstNode.focus();\n        !filtering.value && firstNode.click();\n      }\n    };\n    const updateStyle = () => {\n      var _a, _b;\n      const inputInner = (_a = input.value) == null ? void 0 : _a.input;\n      const tagWrapperEl = tagWrapper.value;\n      const suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;\n      if (!isClient || !inputInner) return;\n      if (suggestionPanelEl) {\n        const suggestionList = suggestionPanelEl.querySelector(`.${nsCascader.e(\"suggestion-list\")}`);\n        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`;\n      }\n      if (tagWrapperEl) {\n        const {\n          offsetHeight\n        } = tagWrapperEl;\n        const height = presentTags.value.length > 0 ? `${Math.max(offsetHeight, inputInitialHeight) - 2}px` : `${inputInitialHeight}px`;\n        inputInner.style.height = height;\n        updatePopperPosition();\n      }\n    };\n    const getCheckedNodes = leafOnly => {\n      var _a;\n      return (_a = cascaderPanelRef.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);\n    };\n    const handleExpandChange = value => {\n      updatePopperPosition();\n      emit(\"expandChange\", value);\n    };\n    const handleKeyDown = e => {\n      if (isComposing.value) return;\n      switch (e.code) {\n        case EVENT_CODE.enter:\n        case EVENT_CODE.numpadEnter:\n          togglePopperVisible();\n          break;\n        case EVENT_CODE.down:\n          togglePopperVisible(true);\n          nextTick(focusFirstNode);\n          e.preventDefault();\n          break;\n        case EVENT_CODE.esc:\n          if (popperVisible.value === true) {\n            e.preventDefault();\n            e.stopPropagation();\n            togglePopperVisible(false);\n          }\n          break;\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n    const handleClear = () => {\n      var _a;\n      (_a = cascaderPanelRef.value) == null ? void 0 : _a.clearCheckedNodes();\n      if (!popperVisible.value && props.filterable) {\n        syncPresentTextValue();\n      }\n      togglePopperVisible(false);\n      emit(\"clear\");\n    };\n    const syncPresentTextValue = () => {\n      const {\n        value\n      } = presentText;\n      inputValue.value = value;\n      searchInputValue.value = value;\n    };\n    const handleSuggestionClick = node => {\n      var _a, _b;\n      const {\n        checked\n      } = node;\n      if (multiple.value) {\n        (_a = cascaderPanelRef.value) == null ? void 0 : _a.handleCheckChange(node, !checked, false);\n      } else {\n        !checked && ((_b = cascaderPanelRef.value) == null ? void 0 : _b.handleCheckChange(node, true, false));\n        togglePopperVisible(false);\n      }\n    };\n    const handleSuggestionKeyDown = e => {\n      const target = e.target;\n      const {\n        code\n      } = e;\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            e.preventDefault();\n            const distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, `.${nsCascader.e(\"suggestion-item\")}[tabindex=\"-1\"]`));\n            break;\n          }\n        case EVENT_CODE.enter:\n        case EVENT_CODE.numpadEnter:\n          target.click();\n          break;\n      }\n    };\n    const handleDelete = () => {\n      const tags = presentTags.value;\n      const lastTag = tags[tags.length - 1];\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;\n      if (!lastTag || !pressDeleteCount || props.collapseTags && tags.length > 1) return;\n      if (lastTag.hitState) {\n        deleteTag(lastTag);\n      } else {\n        lastTag.hitState = true;\n      }\n    };\n    const handleFocus = e => {\n      const el = e.target;\n      const name = nsCascader.e(\"search-input\");\n      if (el.className === name) {\n        filterFocus.value = true;\n      }\n      emit(\"focus\", e);\n    };\n    const handleBlur = e => {\n      filterFocus.value = false;\n      emit(\"blur\", e);\n    };\n    const handleFilter = debounce(() => {\n      const {\n        value\n      } = searchKeyword;\n      if (!value) return;\n      const passed = props.beforeFilter(value);\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions).catch(() => {});\n      } else if (passed !== false) {\n        calculateSuggestions();\n      } else {\n        hideSuggestionPanel();\n      }\n    }, props.debounce);\n    const handleInput = (val, e) => {\n      !popperVisible.value && togglePopperVisible(true);\n      if (e == null ? void 0 : e.isComposing) return;\n      val ? handleFilter() : hideSuggestionPanel();\n    };\n    const getInputInnerHeight = inputInner => Number.parseFloat(useCssVar(nsInput.cssVarName(\"input-height\"), inputInner).value) - 2;\n    watch(filtering, updatePopperPosition);\n    watch([checkedNodes, isDisabled, () => props.collapseTags], calculatePresentTags);\n    watch(presentTags, () => {\n      nextTick(() => updateStyle());\n    });\n    watch(realSize, async () => {\n      await nextTick();\n      const inputInner = input.value.input;\n      inputInitialHeight = getInputInnerHeight(inputInner) || inputInitialHeight;\n      updateStyle();\n    });\n    watch(presentText, syncPresentTextValue, {\n      immediate: true\n    });\n    onMounted(() => {\n      const inputInner = input.value.input;\n      const inputInnerHeight = getInputInnerHeight(inputInner);\n      inputInitialHeight = inputInner.offsetHeight || inputInnerHeight;\n      useResizeObserver(inputInner, updateStyle);\n    });\n    expose({\n      getCheckedNodes,\n      cascaderPanelRef,\n      togglePopperVisible,\n      contentRef,\n      presentText\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"tooltipRef\",\n        ref: tooltipRef,\n        visible: popperVisible.value,\n        teleported: _ctx.teleported,\n        \"popper-class\": [unref(nsCascader).e(\"dropdown\"), _ctx.popperClass],\n        \"popper-options\": popperOptions,\n        \"fallback-placements\": _ctx.fallbackPlacements,\n        \"stop-popper-mouse-event\": false,\n        \"gpu-acceleration\": false,\n        placement: _ctx.placement,\n        transition: `${unref(nsCascader).namespace.value}-zoom-in-top`,\n        effect: \"light\",\n        pure: \"\",\n        persistent: _ctx.persistent,\n        onHide: hideSuggestionPanel\n      }, {\n        default: withCtx(() => [withDirectives((openBlock(), createElementBlock(\"div\", {\n          class: normalizeClass(unref(cascaderKls)),\n          style: normalizeStyle(unref(cascaderStyle)),\n          onClick: () => togglePopperVisible(unref(readonly) ? void 0 : true),\n          onKeydown: handleKeyDown,\n          onMouseenter: $event => inputHover.value = true,\n          onMouseleave: $event => inputHover.value = false\n        }, [createVNode(unref(ElInput), {\n          ref_key: \"input\",\n          ref: input,\n          modelValue: inputValue.value,\n          \"onUpdate:modelValue\": $event => inputValue.value = $event,\n          placeholder: unref(currentPlaceholder),\n          readonly: unref(readonly),\n          disabled: unref(isDisabled),\n          \"validate-event\": false,\n          size: unref(realSize),\n          class: normalizeClass(unref(inputClass)),\n          tabindex: unref(multiple) && _ctx.filterable && !unref(isDisabled) ? -1 : void 0,\n          onCompositionstart: unref(handleComposition),\n          onCompositionupdate: unref(handleComposition),\n          onCompositionend: unref(handleComposition),\n          onFocus: handleFocus,\n          onBlur: handleBlur,\n          onInput: handleInput\n        }, createSlots({\n          suffix: withCtx(() => [unref(clearBtnVisible) ? (openBlock(), createBlock(unref(ElIcon), {\n            key: \"clear\",\n            class: normalizeClass([unref(nsInput).e(\"icon\"), \"icon-circle-close\"]),\n            onClick: withModifiers(handleClear, [\"stop\"])\n          }, {\n            default: withCtx(() => [createVNode(unref(CircleClose))]),\n            _: 1\n          }, 8, [\"class\", \"onClick\"])) : (openBlock(), createBlock(unref(ElIcon), {\n            key: \"arrow-down\",\n            class: normalizeClass(unref(cascaderIconKls)),\n            onClick: withModifiers($event => togglePopperVisible(), [\"stop\"])\n          }, {\n            default: withCtx(() => [createVNode(unref(ArrowDown))]),\n            _: 1\n          }, 8, [\"class\", \"onClick\"]))]),\n          _: 2\n        }, [_ctx.$slots.prefix ? {\n          name: \"prefix\",\n          fn: withCtx(() => [renderSlot(_ctx.$slots, \"prefix\")])\n        } : void 0]), 1032, [\"modelValue\", \"onUpdate:modelValue\", \"placeholder\", \"readonly\", \"disabled\", \"size\", \"class\", \"tabindex\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\"]), unref(multiple) ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          ref_key: \"tagWrapper\",\n          ref: tagWrapper,\n          class: normalizeClass([unref(nsCascader).e(\"tags\"), unref(nsCascader).is(\"validate\", Boolean(unref(validateState)))])\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(presentTags.value, tag => {\n          return openBlock(), createBlock(unref(ElTag), {\n            key: tag.key,\n            type: _ctx.tagType,\n            size: unref(tagSize),\n            effect: _ctx.tagEffect,\n            hit: tag.hitState,\n            closable: tag.closable,\n            \"disable-transitions\": \"\",\n            onClose: $event => deleteTag(tag)\n          }, {\n            default: withCtx(() => [tag.isCollapseTag === false ? (openBlock(), createElementBlock(\"span\", {\n              key: 0\n            }, toDisplayString(tag.text), 1)) : (openBlock(), createBlock(unref(ElTooltip), {\n              key: 1,\n              disabled: popperVisible.value || !_ctx.collapseTagsTooltip,\n              \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n              placement: \"bottom\",\n              effect: \"light\"\n            }, {\n              default: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(tag.text), 1)]),\n              content: withCtx(() => [createElementVNode(\"div\", {\n                class: normalizeClass(unref(nsCascader).e(\"collapse-tags\"))\n              }, [(openBlock(true), createElementBlock(Fragment, null, renderList(allPresentTags.value.slice(_ctx.maxCollapseTags), (tag2, idx) => {\n                return openBlock(), createElementBlock(\"div\", {\n                  key: idx,\n                  class: normalizeClass(unref(nsCascader).e(\"collapse-tag\"))\n                }, [(openBlock(), createBlock(unref(ElTag), {\n                  key: tag2.key,\n                  class: \"in-tooltip\",\n                  type: _ctx.tagType,\n                  size: unref(tagSize),\n                  effect: _ctx.tagEffect,\n                  hit: tag2.hitState,\n                  closable: tag2.closable,\n                  \"disable-transitions\": \"\",\n                  onClose: $event => deleteTag(tag2)\n                }, {\n                  default: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(tag2.text), 1)]),\n                  _: 2\n                }, 1032, [\"type\", \"size\", \"effect\", \"hit\", \"closable\", \"onClose\"]))], 2);\n              }), 128))], 2)]),\n              _: 2\n            }, 1032, [\"disabled\"]))]),\n            _: 2\n          }, 1032, [\"type\", \"size\", \"effect\", \"hit\", \"closable\", \"onClose\"]);\n        }), 128)), _ctx.filterable && !unref(isDisabled) ? withDirectives((openBlock(), createElementBlock(\"input\", {\n          key: 0,\n          \"onUpdate:modelValue\": $event => searchInputValue.value = $event,\n          type: \"text\",\n          class: normalizeClass(unref(nsCascader).e(\"search-input\")),\n          placeholder: unref(presentText) ? \"\" : unref(inputPlaceholder),\n          onInput: e => handleInput(searchInputValue.value, e),\n          onClick: withModifiers($event => togglePopperVisible(true), [\"stop\"]),\n          onKeydown: withKeys(handleDelete, [\"delete\"]),\n          onCompositionstart: unref(handleComposition),\n          onCompositionupdate: unref(handleComposition),\n          onCompositionend: unref(handleComposition),\n          onFocus: handleFocus,\n          onBlur: handleBlur\n        }, null, 42, [\"onUpdate:modelValue\", \"placeholder\", \"onInput\", \"onClick\", \"onKeydown\", \"onCompositionstart\", \"onCompositionupdate\", \"onCompositionend\"])), [[vModelText, searchInputValue.value]]) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true)], 46, [\"onClick\", \"onMouseenter\", \"onMouseleave\"])), [[unref(ClickOutside), () => togglePopperVisible(false), unref(contentRef)]])]),\n        content: withCtx(() => [withDirectives(createVNode(unref(ElCascaderPanel), {\n          ref_key: \"cascaderPanelRef\",\n          ref: cascaderPanelRef,\n          modelValue: unref(checkedValue),\n          \"onUpdate:modelValue\": $event => isRef(checkedValue) ? checkedValue.value = $event : null,\n          options: _ctx.options,\n          props: props.props,\n          border: false,\n          \"render-label\": _ctx.$slots.default,\n          onExpandChange: handleExpandChange,\n          onClose: $event => _ctx.$nextTick(() => togglePopperVisible(false))\n        }, {\n          empty: withCtx(() => [renderSlot(_ctx.$slots, \"empty\")]),\n          _: 3\n        }, 8, [\"modelValue\", \"onUpdate:modelValue\", \"options\", \"props\", \"render-label\", \"onClose\"]), [[vShow, !filtering.value]]), _ctx.filterable ? withDirectives((openBlock(), createBlock(unref(ElScrollbar), {\n          key: 0,\n          ref_key: \"suggestionPanel\",\n          ref: suggestionPanel,\n          tag: \"ul\",\n          class: normalizeClass(unref(nsCascader).e(\"suggestion-panel\")),\n          \"view-class\": unref(nsCascader).e(\"suggestion-list\"),\n          onKeydown: handleSuggestionKeyDown\n        }, {\n          default: withCtx(() => [suggestions.value.length ? (openBlock(true), createElementBlock(Fragment, {\n            key: 0\n          }, renderList(suggestions.value, item => {\n            return openBlock(), createElementBlock(\"li\", {\n              key: item.uid,\n              class: normalizeClass([unref(nsCascader).e(\"suggestion-item\"), unref(nsCascader).is(\"checked\", item.checked)]),\n              tabindex: -1,\n              onClick: $event => handleSuggestionClick(item)\n            }, [renderSlot(_ctx.$slots, \"suggestion-item\", {\n              item\n            }, () => [createElementVNode(\"span\", null, toDisplayString(item.text), 1), item.checked ? (openBlock(), createBlock(unref(ElIcon), {\n              key: 0\n            }, {\n              default: withCtx(() => [createVNode(unref(Check))]),\n              _: 1\n            })) : createCommentVNode(\"v-if\", true)])], 10, [\"onClick\"]);\n          }), 128)) : renderSlot(_ctx.$slots, \"empty\", {\n            key: 1\n          }, () => [createElementVNode(\"li\", {\n            class: normalizeClass(unref(nsCascader).e(\"empty-text\"))\n          }, toDisplayString(unref(t)(\"el.cascader.noMatch\")), 3)])]),\n          _: 3\n        }, 8, [\"class\", \"view-class\"])), [[vShow, filtering.value]]) : createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"visible\", \"teleported\", \"popper-class\", \"fallback-placements\", \"placement\", \"transition\", \"persistent\"]);\n    };\n  }\n});\nvar Cascader = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"cascader.vue\"]]);\nexport { Cascader as default };","map":{"version":3,"names":["name","COMPONENT_NAME","popperOptions","modifiers","enabled","phase","fn","state","modifiersData","placement","includes","arrow","x","requires","attrs","useAttrs","inputInitialHeight","pressDeleteCount","nsCascader","useNamespace","nsInput","t","useLocale","form","formItem","useFormItem","valueOnClear","useEmptyValues","props","isComposing","handleComposition","useComposition","afterComposition","event","_a","text","target","value","handleInput","tooltipRef","ref","input","tagWrapper","cascaderPanelRef","suggestionPanel","popperVisible","inputHover","filtering","filterFocus","inputValue","searchInputValue","presentTags","allPresentTags","suggestions","cascaderStyle","computed","style","isDisabled","disabled","inputPlaceholder","placeholder","currentPlaceholder","length","realSize","useFormSize","tagSize","multiple","readonly","filterable","searchKeyword","checkedNodes","clearBtnVisible","clearable","presentText","showAllLevels","separator","nodes","calcText","validateState","checkedValue","get","cloneDeep","modelValue","set","val","emit","UPDATE_MODEL_EVENT","CHANGE_EVENT","validateEvent","validate","catch","err","debugWarn","cascaderKls","b","m","is","class","cascaderIconKls","e","inputClass","contentRef","_b","popperRef","togglePopperVisible","visible","_c","setAttribute","updatePopperPosition","nextTick","scrollToExpandingNode","syncPresentTextValue","updatePopper","hideSuggestionPanel","genTag","node","key","uid","hitState","closable","isCollapseTag","deleteTag","tag","doCheck","calculateCheckedValue","valueByOption","calculatePresentTags","tags","allTags","forEach","push","slice","maxCollapseTags","rest","restCount","collapseTags","calculateSuggestions","filterMethod","res","getFlattedNodes","checkStrictly","filter","focusFirstNode","firstNode","$el","querySelector","focus","click","updateStyle","inputInner","tagWrapperEl","suggestionPanelEl","isClient","suggestionList","minWidth","offsetWidth","offsetHeight","height","Math","max","getCheckedNodes","leafOnly","handleExpandChange","handleKeyDown","code","EVENT_CODE","enter","numpadEnter","down","preventDefault","esc","stopPropagation","tab","handleClear","clearCheckedNodes","handleSuggestionClick","checked","handleCheckChange","handleSuggestionKeyDown","up","distance","focusNode","getSibling","handleDelete","lastTag","handleFocus","el","className","handleBlur","handleFilter","debounce","passed","beforeFilter","isPromise","then","getInputInnerHeight","Number","parseFloat","useCssVar","cssVarName","watch","immediate","onMounted","inputInnerHeight","useResizeObserver","expose","_ctx","_cache","openBlock","createBlock","unref","ElTooltip","ref_key","teleported","popperClass","fallbackPlacements","transition","namespace","effect","pure","persistent","onHide"],"sources":["../../../../../../packages/components/cascader/src/cascader.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"tooltipRef\"\n    :visible=\"popperVisible\"\n    :teleported=\"teleported\"\n    :popper-class=\"[nsCascader.e('dropdown'), popperClass]\"\n    :popper-options=\"popperOptions\"\n    :fallback-placements=\"fallbackPlacements\"\n    :stop-popper-mouse-event=\"false\"\n    :gpu-acceleration=\"false\"\n    :placement=\"placement\"\n    :transition=\"`${nsCascader.namespace.value}-zoom-in-top`\"\n    effect=\"light\"\n    pure\n    :persistent=\"persistent\"\n    @hide=\"hideSuggestionPanel\"\n  >\n    <template #default>\n      <div\n        v-clickoutside:[contentRef]=\"() => togglePopperVisible(false)\"\n        :class=\"cascaderKls\"\n        :style=\"cascaderStyle\"\n        @click=\"() => togglePopperVisible(readonly ? undefined : true)\"\n        @keydown=\"handleKeyDown\"\n        @mouseenter=\"inputHover = true\"\n        @mouseleave=\"inputHover = false\"\n      >\n        <el-input\n          ref=\"input\"\n          v-model=\"inputValue\"\n          :placeholder=\"currentPlaceholder\"\n          :readonly=\"readonly\"\n          :disabled=\"isDisabled\"\n          :validate-event=\"false\"\n          :size=\"realSize\"\n          :class=\"inputClass\"\n          :tabindex=\"multiple && filterable && !isDisabled ? -1 : undefined\"\n          @compositionstart=\"handleComposition\"\n          @compositionupdate=\"handleComposition\"\n          @compositionend=\"handleComposition\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @input=\"handleInput\"\n        >\n          <template v-if=\"$slots.prefix\" #prefix>\n            <slot name=\"prefix\" />\n          </template>\n          <template #suffix>\n            <el-icon\n              v-if=\"clearBtnVisible\"\n              key=\"clear\"\n              :class=\"[nsInput.e('icon'), 'icon-circle-close']\"\n              @click.stop=\"handleClear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-else\n              key=\"arrow-down\"\n              :class=\"cascaderIconKls\"\n              @click.stop=\"togglePopperVisible()\"\n            >\n              <arrow-down />\n            </el-icon>\n          </template>\n        </el-input>\n\n        <div\n          v-if=\"multiple\"\n          ref=\"tagWrapper\"\n          :class=\"[\n            nsCascader.e('tags'),\n            nsCascader.is('validate', Boolean(validateState)),\n          ]\"\n        >\n          <el-tag\n            v-for=\"tag in presentTags\"\n            :key=\"tag.key\"\n            :type=\"tagType\"\n            :size=\"tagSize\"\n            :effect=\"tagEffect\"\n            :hit=\"tag.hitState\"\n            :closable=\"tag.closable\"\n            disable-transitions\n            @close=\"deleteTag(tag)\"\n          >\n            <template v-if=\"tag.isCollapseTag === false\">\n              <span>{{ tag.text }}</span>\n            </template>\n            <template v-else>\n              <el-tooltip\n                :disabled=\"popperVisible || !collapseTagsTooltip\"\n                :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n                placement=\"bottom\"\n                effect=\"light\"\n              >\n                <template #default>\n                  <span>{{ tag.text }}</span>\n                </template>\n                <template #content>\n                  <div :class=\"nsCascader.e('collapse-tags')\">\n                    <div\n                      v-for=\"(tag2, idx) in allPresentTags.slice(\n                        maxCollapseTags\n                      )\"\n                      :key=\"idx\"\n                      :class=\"nsCascader.e('collapse-tag')\"\n                    >\n                      <el-tag\n                        :key=\"tag2.key\"\n                        class=\"in-tooltip\"\n                        :type=\"tagType\"\n                        :size=\"tagSize\"\n                        :effect=\"tagEffect\"\n                        :hit=\"tag2.hitState\"\n                        :closable=\"tag2.closable\"\n                        disable-transitions\n                        @close=\"deleteTag(tag2)\"\n                      >\n                        <span>{{ tag2.text }}</span>\n                      </el-tag>\n                    </div>\n                  </div>\n                </template>\n              </el-tooltip>\n            </template>\n          </el-tag>\n          <input\n            v-if=\"filterable && !isDisabled\"\n            v-model=\"searchInputValue\"\n            type=\"text\"\n            :class=\"nsCascader.e('search-input')\"\n            :placeholder=\"presentText ? '' : inputPlaceholder\"\n            @input=\"(e) => handleInput(searchInputValue, e as KeyboardEvent)\"\n            @click.stop=\"togglePopperVisible(true)\"\n            @keydown.delete=\"handleDelete\"\n            @compositionstart=\"handleComposition\"\n            @compositionupdate=\"handleComposition\"\n            @compositionend=\"handleComposition\"\n            @focus=\"handleFocus\"\n            @blur=\"handleBlur\"\n          />\n        </div>\n      </div>\n    </template>\n\n    <template #content>\n      <el-cascader-panel\n        v-show=\"!filtering\"\n        ref=\"cascaderPanelRef\"\n        v-model=\"checkedValue\"\n        :options=\"options\"\n        :props=\"props.props\"\n        :border=\"false\"\n        :render-label=\"$slots.default\"\n        @expand-change=\"handleExpandChange\"\n        @close=\"$nextTick(() => togglePopperVisible(false))\"\n      >\n        <template #empty>\n          <slot name=\"empty\" />\n        </template>\n      </el-cascader-panel>\n      <el-scrollbar\n        v-if=\"filterable\"\n        v-show=\"filtering\"\n        ref=\"suggestionPanel\"\n        tag=\"ul\"\n        :class=\"nsCascader.e('suggestion-panel')\"\n        :view-class=\"nsCascader.e('suggestion-list')\"\n        @keydown=\"handleSuggestionKeyDown\"\n      >\n        <template v-if=\"suggestions.length\">\n          <li\n            v-for=\"item in suggestions\"\n            :key=\"item.uid\"\n            :class=\"[\n              nsCascader.e('suggestion-item'),\n              nsCascader.is('checked', item.checked),\n            ]\"\n            :tabindex=\"-1\"\n            @click=\"handleSuggestionClick(item)\"\n          >\n            <slot name=\"suggestion-item\" :item=\"item\">\n              <span>{{ item.text }}</span>\n              <el-icon v-if=\"item.checked\">\n                <check />\n              </el-icon>\n            </slot>\n          </li>\n        </template>\n        <slot v-else name=\"empty\">\n          <li :class=\"nsCascader.e('empty-text')\">\n            {{ t('el.cascader.noMatch') }}\n          </li>\n        </slot>\n      </el-scrollbar>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, onMounted, ref, useAttrs, watch } from 'vue'\nimport { cloneDeep, debounce } from 'lodash-unified'\nimport { useCssVar, useResizeObserver } from '@vueuse/core'\nimport {\n  debugWarn,\n  focusNode,\n  getSibling,\n  isClient,\n  isPromise,\n} from '@element-plus/utils'\nimport ElCascaderPanel from '@element-plus/components/cascader-panel'\nimport ElInput from '@element-plus/components/input'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTag from '@element-plus/components/tag'\nimport ElIcon from '@element-plus/components/icon'\nimport { useFormItem, useFormSize } from '@element-plus/components/form'\nimport { ClickOutside as vClickoutside } from '@element-plus/directives'\nimport {\n  useComposition,\n  useEmptyValues,\n  useLocale,\n  useNamespace,\n} from '@element-plus/hooks'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { ArrowDown, Check, CircleClose } from '@element-plus/icons-vue'\nimport { cascaderEmits, cascaderProps } from './cascader'\n\nimport type { Options } from '@element-plus/components/popper'\nimport type { ComputedRef, Ref, StyleValue } from 'vue'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\nimport type { InputInstance } from '@element-plus/components/input'\nimport type { ScrollbarInstance } from '@element-plus/components/scrollbar'\nimport type {\n  CascaderNode,\n  CascaderPanelInstance,\n  CascaderValue,\n  Tag,\n} from '@element-plus/components/cascader-panel'\n\nconst popperOptions: Partial<Options> = {\n  modifiers: [\n    {\n      name: 'arrowPosition',\n      enabled: true,\n      phase: 'main',\n      fn: ({ state }) => {\n        const { modifiersData, placement } = state as any\n        if (['right', 'left', 'bottom', 'top'].includes(placement)) return\n        if (modifiersData.arrow) {\n          modifiersData.arrow.x = 35\n        }\n      },\n      requires: ['arrow'],\n    },\n  ],\n}\nconst COMPONENT_NAME = 'ElCascader'\n\ndefineOptions({\n  name: COMPONENT_NAME,\n})\n\nconst props = defineProps(cascaderProps)\nconst emit = defineEmits(cascaderEmits)\nconst attrs = useAttrs()\n\nlet inputInitialHeight = 0\nlet pressDeleteCount = 0\n\nconst nsCascader = useNamespace('cascader')\nconst nsInput = useNamespace('input')\n\nconst { t } = useLocale()\nconst { form, formItem } = useFormItem()\nconst { valueOnClear } = useEmptyValues(props)\nconst { isComposing, handleComposition } = useComposition({\n  afterComposition(event) {\n    const text = (event.target as HTMLInputElement)?.value\n    handleInput(text)\n  },\n})\n\nconst tooltipRef: Ref<TooltipInstance | null> = ref(null)\nconst input: Ref<InputInstance | null> = ref(null)\nconst tagWrapper = ref(null)\nconst cascaderPanelRef: Ref<CascaderPanelInstance | null> = ref(null)\nconst suggestionPanel: Ref<ScrollbarInstance | null> = ref(null)\nconst popperVisible = ref(false)\nconst inputHover = ref(false)\nconst filtering = ref(false)\nconst filterFocus = ref(false)\nconst inputValue = ref('')\nconst searchInputValue = ref('')\nconst presentTags: Ref<Tag[]> = ref([])\nconst allPresentTags: Ref<Tag[]> = ref([])\nconst suggestions: Ref<CascaderNode[]> = ref([])\n\nconst cascaderStyle = computed<StyleValue>(() => {\n  return attrs.style as StyleValue\n})\n\nconst isDisabled = computed(() => props.disabled || form?.disabled)\nconst inputPlaceholder = computed(\n  () => props.placeholder ?? t('el.cascader.placeholder')\n)\nconst currentPlaceholder = computed(() =>\n  searchInputValue.value || presentTags.value.length > 0 || isComposing.value\n    ? ''\n    : inputPlaceholder.value\n)\nconst realSize = useFormSize()\nconst tagSize = computed(() =>\n  realSize.value === 'small' ? 'small' : 'default'\n)\nconst multiple = computed(() => !!props.props.multiple)\nconst readonly = computed(() => !props.filterable || multiple.value)\nconst searchKeyword = computed(() =>\n  multiple.value ? searchInputValue.value : inputValue.value\n)\nconst checkedNodes: ComputedRef<CascaderNode[]> = computed(\n  () => cascaderPanelRef.value?.checkedNodes || []\n)\nconst clearBtnVisible = computed(() => {\n  if (\n    !props.clearable ||\n    isDisabled.value ||\n    filtering.value ||\n    !inputHover.value\n  )\n    return false\n\n  return !!checkedNodes.value.length\n})\nconst presentText = computed(() => {\n  const { showAllLevels, separator } = props\n  const nodes = checkedNodes.value\n  return nodes.length\n    ? multiple.value\n      ? ''\n      : nodes[0].calcText(showAllLevels, separator)\n    : ''\n})\n\nconst validateState = computed(() => formItem?.validateState || '')\n\nconst checkedValue = computed<CascaderValue>({\n  get() {\n    return cloneDeep(props.modelValue) as CascaderValue\n  },\n  set(val) {\n    // https://github.com/element-plus/element-plus/issues/17647\n    const value = val ?? valueOnClear.value\n    emit(UPDATE_MODEL_EVENT, value)\n    emit(CHANGE_EVENT, value)\n    if (props.validateEvent) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  },\n})\n\nconst cascaderKls = computed(() => {\n  return [\n    nsCascader.b(),\n    nsCascader.m(realSize.value),\n    nsCascader.is('disabled', isDisabled.value),\n    attrs.class,\n  ]\n})\n\nconst cascaderIconKls = computed(() => {\n  return [\n    nsInput.e('icon'),\n    'icon-arrow-down',\n    nsCascader.is('reverse', popperVisible.value),\n  ]\n})\n\nconst inputClass = computed(() => {\n  return nsCascader.is('focus', popperVisible.value || filterFocus.value)\n})\n\nconst contentRef = computed(() => {\n  return tooltipRef.value?.popperRef?.contentRef\n})\n\nconst togglePopperVisible = (visible?: boolean) => {\n  if (isDisabled.value) return\n\n  visible = visible ?? !popperVisible.value\n\n  if (visible !== popperVisible.value) {\n    popperVisible.value = visible\n    input.value?.input?.setAttribute('aria-expanded', `${visible}`)\n\n    if (visible) {\n      updatePopperPosition()\n      nextTick(cascaderPanelRef.value?.scrollToExpandingNode)\n    } else if (props.filterable) {\n      syncPresentTextValue()\n    }\n\n    emit('visibleChange', visible)\n  }\n}\n\nconst updatePopperPosition = () => {\n  nextTick(() => {\n    tooltipRef.value?.updatePopper()\n  })\n}\nconst hideSuggestionPanel = () => {\n  filtering.value = false\n}\n\nconst genTag = (node: CascaderNode): Tag => {\n  const { showAllLevels, separator } = props\n  return {\n    node,\n    key: node.uid,\n    text: node.calcText(showAllLevels, separator),\n    hitState: false,\n    closable: !isDisabled.value && !node.isDisabled,\n    isCollapseTag: false,\n  }\n}\n\nconst deleteTag = (tag: Tag) => {\n  const node = tag.node as CascaderNode\n  node.doCheck(false)\n  cascaderPanelRef.value?.calculateCheckedValue()\n  emit('removeTag', node.valueByOption)\n}\n\nconst calculatePresentTags = () => {\n  if (!multiple.value) return\n\n  const nodes = checkedNodes.value\n  const tags: Tag[] = []\n\n  const allTags: Tag[] = []\n  nodes.forEach((node) => allTags.push(genTag(node)))\n  allPresentTags.value = allTags\n\n  if (nodes.length) {\n    nodes\n      .slice(0, props.maxCollapseTags)\n      .forEach((node) => tags.push(genTag(node)))\n    const rest = nodes.slice(props.maxCollapseTags)\n    const restCount = rest.length\n\n    if (restCount) {\n      if (props.collapseTags) {\n        tags.push({\n          key: -1,\n          text: `+ ${restCount}`,\n          closable: false,\n          isCollapseTag: true,\n        })\n      } else {\n        rest.forEach((node) => tags.push(genTag(node)))\n      }\n    }\n  }\n\n  presentTags.value = tags\n}\n\nconst calculateSuggestions = () => {\n  const { filterMethod, showAllLevels, separator } = props\n  const res = cascaderPanelRef.value\n    ?.getFlattedNodes(!props.props.checkStrictly)\n    ?.filter((node) => {\n      if (node.isDisabled) return false\n      node.calcText(showAllLevels, separator)\n      return filterMethod(node, searchKeyword.value)\n    })\n\n  if (multiple.value) {\n    presentTags.value.forEach((tag) => {\n      tag.hitState = false\n    })\n    allPresentTags.value.forEach((tag) => {\n      tag.hitState = false\n    })\n  }\n\n  filtering.value = true\n  suggestions.value = res!\n  updatePopperPosition()\n}\n\nconst focusFirstNode = () => {\n  let firstNode!: HTMLElement\n\n  if (filtering.value && suggestionPanel.value) {\n    firstNode = suggestionPanel.value.$el.querySelector(\n      `.${nsCascader.e('suggestion-item')}`\n    )\n  } else {\n    firstNode = cascaderPanelRef.value?.$el.querySelector(\n      `.${nsCascader.b('node')}[tabindex=\"-1\"]`\n    )\n  }\n\n  if (firstNode) {\n    firstNode.focus()\n    !filtering.value && firstNode.click()\n  }\n}\n\nconst updateStyle = () => {\n  const inputInner = input.value?.input\n  const tagWrapperEl = tagWrapper.value\n  const suggestionPanelEl = suggestionPanel.value?.$el\n\n  if (!isClient || !inputInner) return\n\n  if (suggestionPanelEl) {\n    const suggestionList = suggestionPanelEl.querySelector(\n      `.${nsCascader.e('suggestion-list')}`\n    )\n    suggestionList.style.minWidth = `${inputInner.offsetWidth}px`\n  }\n\n  if (tagWrapperEl) {\n    const { offsetHeight } = tagWrapperEl\n    // 2 is el-input__wrapper padding\n    const height =\n      presentTags.value.length > 0\n        ? `${Math.max(offsetHeight, inputInitialHeight) - 2}px`\n        : `${inputInitialHeight}px`\n    inputInner.style.height = height\n    updatePopperPosition()\n  }\n}\n\nconst getCheckedNodes = (leafOnly: boolean) => {\n  return cascaderPanelRef.value?.getCheckedNodes(leafOnly)\n}\n\nconst handleExpandChange = (value: CascaderValue) => {\n  updatePopperPosition()\n  emit('expandChange', value)\n}\n\nconst handleKeyDown = (e: KeyboardEvent) => {\n  if (isComposing.value) return\n\n  switch (e.code) {\n    case EVENT_CODE.enter:\n    case EVENT_CODE.numpadEnter:\n      togglePopperVisible()\n      break\n    case EVENT_CODE.down:\n      togglePopperVisible(true)\n      nextTick(focusFirstNode)\n      e.preventDefault()\n      break\n    case EVENT_CODE.esc:\n      if (popperVisible.value === true) {\n        e.preventDefault()\n        e.stopPropagation()\n        togglePopperVisible(false)\n      }\n      break\n    case EVENT_CODE.tab:\n      togglePopperVisible(false)\n      break\n  }\n}\n\nconst handleClear = () => {\n  cascaderPanelRef.value?.clearCheckedNodes()\n  if (!popperVisible.value && props.filterable) {\n    syncPresentTextValue()\n  }\n  togglePopperVisible(false)\n  emit('clear')\n}\n\nconst syncPresentTextValue = () => {\n  const { value } = presentText\n  inputValue.value = value\n  searchInputValue.value = value\n}\n\nconst handleSuggestionClick = (node: CascaderNode) => {\n  const { checked } = node\n\n  if (multiple.value) {\n    cascaderPanelRef.value?.handleCheckChange(node, !checked, false)\n  } else {\n    !checked && cascaderPanelRef.value?.handleCheckChange(node, true, false)\n    togglePopperVisible(false)\n  }\n}\n\nconst handleSuggestionKeyDown = (e: KeyboardEvent) => {\n  const target = e.target as HTMLElement\n  const { code } = e\n\n  switch (code) {\n    case EVENT_CODE.up:\n    case EVENT_CODE.down: {\n      e.preventDefault()\n      const distance = code === EVENT_CODE.up ? -1 : 1\n      focusNode(\n        getSibling(\n          target,\n          distance,\n          `.${nsCascader.e('suggestion-item')}[tabindex=\"-1\"]`\n        ) as HTMLElement\n      )\n      break\n    }\n    case EVENT_CODE.enter:\n    case EVENT_CODE.numpadEnter:\n      target.click()\n      break\n  }\n}\n\nconst handleDelete = () => {\n  const tags = presentTags.value\n  const lastTag = tags[tags.length - 1]\n  pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1\n\n  if (!lastTag || !pressDeleteCount || (props.collapseTags && tags.length > 1))\n    return\n\n  if (lastTag.hitState) {\n    deleteTag(lastTag)\n  } else {\n    lastTag.hitState = true\n  }\n}\n\nconst handleFocus = (e: FocusEvent) => {\n  const el = e.target as HTMLInputElement\n  const name = nsCascader.e('search-input')\n  if (el.className === name) {\n    filterFocus.value = true\n  }\n  emit('focus', e)\n}\n\nconst handleBlur = (e: FocusEvent) => {\n  filterFocus.value = false\n  emit('blur', e)\n}\n\nconst handleFilter = debounce(() => {\n  const { value } = searchKeyword\n\n  if (!value) return\n\n  const passed = props.beforeFilter(value)\n\n  if (isPromise(passed)) {\n    passed.then(calculateSuggestions).catch(() => {\n      /* prevent log error */\n    })\n  } else if (passed !== false) {\n    calculateSuggestions()\n  } else {\n    hideSuggestionPanel()\n  }\n}, props.debounce)\n\nconst handleInput = (val: string, e?: KeyboardEvent) => {\n  !popperVisible.value && togglePopperVisible(true)\n\n  if (e?.isComposing) return\n\n  val ? handleFilter() : hideSuggestionPanel()\n}\n\nconst getInputInnerHeight = (inputInner: HTMLElement): number =>\n  Number.parseFloat(\n    useCssVar(nsInput.cssVarName('input-height'), inputInner).value\n  ) - 2\n\nwatch(filtering, updatePopperPosition)\n\nwatch(\n  [checkedNodes, isDisabled, () => props.collapseTags],\n  calculatePresentTags\n)\n\nwatch(presentTags, () => {\n  nextTick(() => updateStyle())\n})\n\nwatch(realSize, async () => {\n  await nextTick()\n  const inputInner = input.value!.input!\n  inputInitialHeight = getInputInnerHeight(inputInner) || inputInitialHeight\n  updateStyle()\n})\n\nwatch(presentText, syncPresentTextValue, { immediate: true })\n\nonMounted(() => {\n  const inputInner = input.value!.input!\n\n  const inputInnerHeight = getInputInnerHeight(inputInner)\n\n  inputInitialHeight = inputInner.offsetHeight || inputInnerHeight\n  useResizeObserver(inputInner, updateStyle)\n})\n\ndefineExpose({\n  /**\n   * @description get an array of currently selected node,(leafOnly) whether only return the leaf checked nodes, default is `false`\n   */\n  getCheckedNodes,\n  /**\n   * @description cascader panel ref\n   */\n  cascaderPanelRef,\n  /**\n   * @description toggle the visible of popper\n   */\n  togglePopperVisible,\n  /**\n   * @description cascader content ref\n   */\n  contentRef,\n  /**\n   * @description selected content text\n   */\n  presentText,\n})\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAwQc;EACZA,IAAM,EAAAC;AACR;;;;;;;;;;IArBA,MAAMC,aAAkC;MACtCC,SAAW,GACT;QACEH,IAAM;QACNI,OAAS;QACTC,KAAO;QACPC,EAAI,EAAAA,CAAC;UAAEC;QAAA,CAAY;UACX;YAAEC,aAAe;YAAAC;UAAA,CAAc,GAAAF,KAAA;UACjC,KAAC,SAAS,MAAQ,YAAU,KAAK,CAAE,CAAAG,QAAA,CAASD,SAAS,CAAG,EAC5D;UACE,IAAAD,aAAA,CAAAG,KAAwB;YAC1BH,aAAA,CAAAG,KAAA,CAAAC,CAAA;UAAA;QACF,CACA;QACFC,QAAA;MAAA,CACF;IAUF;IAEA,MAAyBC,KAAA,GAAAC,QAAA;IACzB,IAAIC,kBAAmB;IAEjB,IAAAC,gBAAA;IACA,MAAAC,UAAU,GAAAC,YAAoB;IAE9B,MAAAC,OAAI,GAAcD,YAAA;IACxB,MAAM;MAAEE;IAAA,IAAMC,SAAS;IACvB,MAAM;MAAEC,IAAA;MAAAC;IAAiB,IAAAC,WAAA,EAAe;IACxC,MAAM;MAAEC;IAAA,CAA+B,GAAAC,cAAA,CAAAC,KAAmB;IAAA;MAAAC,WACvC;MAAOC;IAAA,IAAAC,cAAA;MAChBC,iBAAAC,KAA2C;QACjD,IAAAC,EAAA;QACF,MAAAC,IAAA,IAAAD,EAAA,GAAAD,KAAA,CAAAG,MAAA,qBAAAF,EAAA,CAAAG,KAAA;QACDC,WAAA,CAAAH,IAAA;MAED;IACA,CAAM;IACA,MAAAI,UAAA,GAAaC,GAAA,CAAI,IAAI;IACrB,MAAAC,KAAA,GAAAD,GAAA;IACA,MAAAE,UAAA,GAAAF,GAAA,MAAqD;IACrD,MAAAG,gBAAgB,GAAAH,GAAS;IACzB,MAAAI,eAAA,GAAsBJ,GAAA;IACtB,MAAAK,aAAA,GAAgBL,GAAK;IACrB,MAAAM,UAAA,GAAAN,GAAA,MAAuB;IACvB,MAAAO,SAAA,GAAAP,GAAA,MAAmB;IACnB,MAAAQ,WAAA,GAAAR,GAAA,MAAuB,CAAE;IACzB,MAAAS,UAAA,GAAAT,GAA8B,GAAC,CAAC;IAChC,MAAAU,gBAAA,GAAiCV,GAAC,CAAC;IACnC,MAAAW,WAAA,GAAmCX,GAAI,GAAE;IAEzC,MAAAY,cAAA,GAAAZ,GAAA;IACJ,MAAAa,WAAa,GAAAb,GAAA;IACf,MAACc,aAAA,GAAAC,QAAA;MAED,OAAAzC,KAAA,CAAA0C,KAA4B;IAC5B;IAAyB,MACjBC,UAAqB,GAAAF,QAAA,OAA2B3B,KAAA,CAAA8B,QAAA,KAAAnC,IAAA,oBAAAA,IAAA,CAAAmC,QAAA;IACxD,MAAAC,gBAAA,GAAAJ,QAAA;MACA,IAAMrB,EAAqB;MAAS,OACjB,CAAAA,EAAA,GAAAN,KAAA,CAAAgC,WAAA,KAAqB,OAAA1B,EAAA,GAAAb,CAAA,0BAAoB;IAErC,CACvB;IACA,MAAMwC,kBAAuB,GAAAN,QAAA,OAAAL,gBAAA,CAAAb,KAAA,IAAAc,WAAA,CAAAd,KAAA,CAAAyB,MAAA,QAAAjC,WAAA,CAAAQ,KAAA,QAAAsB,gBAAA,CAAAtB,KAAA;IAC7B,MAAM0B,QAAU,GAAAC,WAAA;IAAA,MACdC,OAAA,GAAAV,QAAmB,OAAAQ,QAAoB,CAAA1B,KAAA;IACzC,MAAA6B,QAAA,GAAAX,QAAA,SAAA3B,KAAA,CAAAA,KAAA,CAAAsC,QAAA;IACA,MAAMC,QAAA,GAAWZ,QAAS,OAAM,CAAC3B,KAAC,CAAAwC,UAAoB,IAAAF,QAAA,CAAA7B,KAAA;IACtD,MAAMgC,aAAoB,GAAAd,QAAA,OAAaW,QAAA,CAAA7B,KAAA,GAAAa,gBAA4B,CAAAb,KAAA,GAAAY,UAAA,CAAAZ,KAAA;IACnE,MAAMiC,YAAgB,GAAAf,QAAA;MAAS,IAC7BrB,EAAA;MACF,SAAAA,EAAA,GAAAS,gBAAA,CAAAN,KAAA,qBAAAH,EAAA,CAAAoC,YAAA;IACA;IAAkD,MAC1CC,eAAA,GAAAhB,QAAwB;MAChC,KAAA3B,KAAA,CAAA4C,SAAA,IAAAf,UAAA,CAAApB,KAAA,IAAAU,SAAA,CAAAV,KAAA,KAAAS,UAAA,CAAAT,KAAA,EACM;MAEF,SAAAiC,YACA,CAAAjC,KAAA,CAAAyB,MAAA;IAIA,CAAO;IAEF,MAAAW,WAAE,GAAAlB,QAAmB;MAC7B;QAAAmB,aAAA;QAAAC;MAAA,IAAA/C,KAAA;MACK,MAAAgD,KAAA,GAAAN,YAAA,CAAuBjC,KAAM;MAC3B,OAAAuC,KAAiB,CAAAd,MAAA,GAAAI,QAAA,CAAA7B,KAAc,QAAAuC,KAAA,IAAAC,QAAA,CAAAH,aAAA,EAAAC,SAAA;IACrC;IACO,MAAAG,aACH,GAAAvB,QAAA,OACE,CAAA/B,QACA,IAAM,IAAG,YAAwBA,QAAA,CAAAsD,aAAS,KAC5C;IACN,MAACC,YAAA,GAAAxB,QAAA;MAEDyB,IAAA,EAAsB;QAEtB,OAAAC,SAAA,CAAqBrD,KAAwB,CAAAsD,UAAA;MAAA,CACrC;MACGC,IAAAC,GAAA;QACT,MAAA/C,KAAA,GAAA+C,GAAA,WAAAA,GAAA,GAAA1D,YAAA,CAAAW,KAAA;QAAAgD,IACS,CAAAC,kBAAA,EAAAjD,KAAA;QAEDgD,IAAA,CAAAE,YAAA,EAAAlD,KAA4B;QAClC,IAAAT,KAAA,CAAA4D,aAAA,EAAyB;UACzBhE,QAAA,WAAwB,SAAAA,QAAA,CAAAiE,QAAA,WAAAC,KAAA,CAAAC,GAAA,IAAAC,SAAA,CAAAD,GAAA;QACxB;MACE;IAA0D,CAC5D;IACF,MAAAE,WAAA,GAAAtC,QAAA;MACD,QAEKrC,UAAA,CAAA4E,CAAA,IACG5E,UAAA,CAAA6E,CAAA,CAAAhC,QAAA,CAAA1B,KAAA,GACLnB,UAAA,CAAW8E,EAAE,aAAAvC,UAAA,CAAApB,KAAA,GACbvB,KAAA,CAAAmF,KAAW,CAAgB;IACe;IAE5C,MAAAC,eAAA,GAAA3C,QAAA;MACD,QAEKnC,OAAA,CAAA+E,CAAA,UACG,mBACLjF,UAAU,CAAM8E,EAAA,YAAAnD,aAAA,CAAAR,KAAA,EAChB;IAAA;IAEF,MAAA+D,UAAA,GAAA7C,QAAA;MACD,OAAArC,UAAA,CAAA8E,EAAA,UAAAnD,aAAA,CAAAR,KAAA,IAAAW,WAAA,CAAAX,KAAA;IAED,CAAM;IACJ,MAAAgE,UAAA,GAAA9C,QAAqB,OAAuB;MAC7C,IAAArB,EAAA,EAAAoE,EAAA;MAEK,QAAAA,EAAA,IAAApE,EAAA,GAAAK,UAA4B,CAAAF,KAAA,qBAAAH,EAAA,CAAAqE,SAAA,qBAAAD,EAAA,CAAAD,UAAA;IAChC,CAAO;IACT,MAACG,mBAAA,GAAAC,OAAA;MAEK,IAAAvE,EAAA,EAAAoE,EAAA,EAAAI,EAAA;MACJ,IAAIjD,UAAA,CAAWpB,KAAO,EAEZ;MAENoE,OAAA,GAAAA,OAAA,WAAAA,OAAiC,IAAA5D,aAAA,CAAAR,KAAA;MACnC,IAAAoE,OAAA,KAAc5D,aAAQ,CAAAR,KAAA;QACtBQ,aAAa,CAAOR,KAAA,GAAAoE,OAAA;QAEpB,CAAAH,EAAA,GAAa,CAAApE,EAAA,GAAAO,KAAA,CAAAJ,KAAA,qBAAAH,EAAA,CAAAO,KAAA,qBAAA6D,EAAA,CAAAK,YAAA,qBAAAF,OAAA;QACU,IAAAA,OAAA;UACZG,oBAAA;UACXC,QAAA,CAAW,CAAAH,EAAA,GAAM/D,gBAAY,CAAAN,KAAA,qBAAAqE,EAAA,CAAAI,qBAAA;QAC3B,CAAqB,UAAAlF,KAAA,CAAAwC,UAAA;UACvB2C,oBAAA;QAEA;QACF1B,IAAA,kBAAAoB,OAAA;MAAA;IAGF;IACE,MAAAG,oBAAe,GAAAA,CAAA;MACbC,QAAA;QACD,IAAA3E,EAAA;QACH,CAAAA,EAAA,GAAAK,UAAA,CAAAF,KAAA,qBAAAH,EAAA,CAAA8E,YAAA;MACA;IACE;IACF,MAAAC,mBAAA,GAAAA,CAAA;MAEMlE,SAAA,CAAAV,KAAsC;IAC1C,CAAM;IACC,MAAA6E,MAAA,GAAAC,IAAA;MACL;QAAAzC,aAAA;QAAAC;MAAA,IAAA/C,KAAA;MAAA,OACK;QACLuF,IAAM;QACNC,GAAU,EAAAD,IAAA,CAAAE,GAAA;QACVlF,IAAU,EAAAgF,IAAA,CAACtC,QAAW,CAAAH,aAAe,EAAAC,SAAA;QACrC2C,QAAe;QACjBC,QAAA,GAAA9D,UAAA,CAAApB,KAAA,KAAA8E,IAAA,CAAA1D,UAAA;QACF+D,aAAA;MAEA,CAAM;IACJ;IACA,MAAAC,SAAa,GAAKC,GAAA;MAClB,IAAAxF,EAAA;MACK,MAAAiF,IAAA,GAAAO,GAAA,CAAAP,IAAA;MACPA,IAAA,CAAAQ,OAAA;MAEA,CAAAzF,EAAA,GAAAS,gBAAA,CAAAN,KAAmC,qBAAAH,EAAA,CAAA0F,qBAAA;MAC7BvC,IAAA,CAAC,WAAgB,EAAA8B,IAAA,CAAAU,aAAA;IAErB;IACA,MAAAC,oBAAqB,GAAAA,CAAA;MAErB,KAAA5D,QAAA,CAAA7B,KAAwB,EAClB;MACN,MAAAuC,KAAA,GAAAN,YAAuB,CAAAjC,KAAA;MAEvB,MAAA0F,IAAU,GAAQ;MAChB,MAAAC,OACS,KAAS;MAElBpD,KAAA,CAAAqD,OAAa,CAAAd,IAAA,IAAYa,OAAA,CAAAE,IAAqB,CAAAhB,MAAA,CAAAC,IAAA;MAC9C/D,cAAA,CAAAf,KAAkB,GAAK2F,OAAA;MAEvB,IAAApD,KAAe,CAAAd,MAAA;QACbc,KAAA,CAAIuD,KAAA,CAAM,CAAc,EAAAvG,KAAA,CAAAwG,eAAA,EAAAH,OAAA,CAAAd,IAAA,IAAAY,IAAA,CAAAG,IAAA,CAAAhB,MAAA,CAAAC,IAAA;QACtB,MAAAkB,IAAU,GAAAzD,KAAA,CAAAuD,KAAA,CAAAvG,KAAA,CAAAwG,eAAA;QAAA,MACRE,SAAK,GAAAD,IAAA,CAAAvE,MAAA;QACL,IAAAwE,SAAA;UAAoB,IACpB1G,KAAU,CAAA2G,YAAA;YAAAR,IACK,CAAAG,IAAA;cAChBd,GAAA;cACIjF,IAAA,OAAAmG,SAAA;cACAf,QAAA,OAAkB;cACzBC,aAAA;YAAA,CACF;UAAA,CACF;YAEAa,IAAA,CAAAJ,OAAoB,CAAAd,IAAA,IAAAY,IAAA,CAAAG,IAAA,CAAAhB,MAAA,CAAAC,IAAA;UAAA;QAGtB;MACE;MACMhE,WAAA,CAAMd,KAAiB,GAAA0F,IAAA;IAGzB,CAAI;IACC,MAAAS,oBAAA,GAAAA,CAAA,KAAiC;MAC/B,IAAAtG,EAAA,EAAAoE,EAAA;MACT,MAAC;QAAAmC,YAAA;QAAA/D,aAAA;QAAAC;MAAA,IAAA/C,KAAA;MAEH,MAAA8G,GAAA,IAAapC,EAAO,IAAApE,EAAA,GAAAS,gBAAA,CAAAN,KAAA,qBAAAH,EAAA,CAAAyG,eAAA,EAAA/G,KAAA,CAAAA,KAAA,CAAAgH,aAAA,sBAAAtC,EAAA,CAAAuC,MAAA,CAAA1B,IAAA;QACN,IAAAA,IAAA,CAAA1D,UAAc,EACxB,OAAe;QACjB0D,IAAC,CAAAtC,QAAA,CAAAH,aAAA,EAAAC,SAAA;QACc,OAAA8D,YAAA,CAAAtB,IAAc,EAAA9C,aAAS,CAAAhC,KAAA;MACpC;MAAe,IAChB6B,QAAA,CAAA7B,KAAA;QACHc,WAAA,CAAAd,KAAA,CAAA4F,OAAA,CAAAP,GAAA;UAEAA,GAAA,CAAAJ,QAAkB;QAClB;QACqBlE,cAAA,CAAAf,KAAA,CAAA4F,OAAA,CAAAP,GAAA;UACvBA,GAAA,CAAAJ,QAAA;QAEA,EAAM;MACJ;MAEIvE,SAAA,CAAAV,KAAmB;MACTgB,WAAA,CAAAhB,KAAA,GAAAqG,GAAA;MAA0B9B,oBACnB;IAAkB,CACrC;IAAA,MACKkC,cAAA,GAAAA,CAAA;MACO,IAAA5G,EAAA;MAA4B,IACtC6G,SAAI;MACN,IAAAhG,SAAA,CAAAV,KAAA,IAAAO,eAAA,CAAAP,KAAA;QACF0G,SAAA,GAAAnG,eAAA,CAAAP,KAAA,CAAA2G,GAAA,CAAAC,aAAA,KAAA/H,UAAA,CAAAiF,CAAA;MAEA,OAAe;QACb4C,SAAA,GAAgB,CAAA7G,EAAA,GAAAS,gBAAA,CAAAN,KAAA,qBAAAH,EAAA,CAAA8G,GAAA,CAAAC,aAAA,KAAA/H,UAAA,CAAA4E,CAAA;MAChB;MACF,IAAAiD,SAAA;QACFA,SAAA,CAAAG,KAAA;QAEA,CAAAnG,SAAA,CAAAV,KAAoB,IAAM0G,SAAA,CAAAI,KAAA;MACxB;IACA;IACM,MAAAC,WAAA,GAAAA,CAAA;MAEF,IAAAlH,EAAa,EAAAoE,EAAA;MAEjB,MAAuB+C,UAAA,IAAAnH,EAAA,GAAAO,KAAA,CAAAJ,KAAA,qBAAAH,EAAA,CAAAO,KAAA;MACrB,MAAA6G,YAAA,GAAA5G,UAAyC,CAAAL,KAAA;MAAA,MACnCkH,iBAAa,IAAAjD,EAAA,GAAA1D,eAAkB,CAAAP,KAAA,qBAAAiE,EAAA,CAAA0C,GAAA;MACrC,KAAAQ,QAAA,KAAAH,UAAA,EACA;MACF,IAAAE,iBAAA;QAEA,MAAkBE,cAAA,GAAAF,iBAAA,CAAAN,aAAA,KAAA/H,UAAA,CAAAiF,CAAA;QACVsD,cAAA,CAAAjG,KAAA,CAAekG,QAAI,MAAAL,UAAA,CAAAM,WAAA;MAEzB;MAIA,IAAAL,YAAA;QACqB;UAAAM;QAAA,IAAAN,YAAA;QACvB,MAAAO,MAAA,GAAA1G,WAAA,CAAAd,KAAA,CAAAyB,MAAA,UAAAgG,IAAA,CAAAC,GAAA,CAAAH,YAAA,EAAA5I,kBAAA,eAAAA,kBAAA;QACFqI,UAAA,CAAA7F,KAAA,CAAAqG,MAAA,GAAAA,MAAA;QAEMjD,oBAAkB,EAAuB;MAC7C;IAAuD,CACzD;IAEM,MAAAoD,eAAA,GAAAC,QAA+C;MAC9B,IAAA/H,EAAA;MACrB,QAAAA,EAAA,GAAAS,gBAA0B,CAAAN,KAAA,qBAAAH,EAAA,CAAA8H,eAAA,CAAAC,QAAA;IAAA,CAC5B;IAEM,MAAAC,kBAAsC,GAAA7H,KAAA;MAC1CuE,oBAAuB;MAEvBvB,IAAA,eAAgB,EAAAhD,KAAA;IAAA;IACE,MAAA8H,aACA,GAAAhE,CAAA;MACM,IAAAtE,WAAA,CAAAQ,KAAA,EACpB;MAAA,QACc8D,CAAA,CAAAiE,IAAA;QACd,KAAAC,UAAA,CAAAC,KAAA;QACA,KAAAD,UAAuB,CAAAE,WAAA;UACvB/D,mBAAiB;UACjB;QACF,KAAK6D,UAAW,CAAAG,IAAA;UACVhE,mBAAA;UACFK,QAAiB,CAAAiC,cAAA;UACjB3C,CAAA,CAAAsE,cAAkB;UAClB;QACF,KAAAJ,UAAA,CAAAK,GAAA;UACA,IAAA7H,aAAA,CAAAR,KAAA;YAAA8D,CACG,CAAWsE,cAAA;YACdtE,CAAA,CAAAwE,eAAA,EAAyB;YACzBnE,mBAAA;UAAA;UAEN;QAEA,KAAA6D,UAAA,CAAoBO,GAAM;UACxBpE,mBAAA,CAAwB,KAAkB;UACtC;MACF;IAAqB,CACvB;IACA,MAAAqE,WAAA,GAAAA,CAAA,KAAyB;MACzB,IAAA3I,EAAY;MACd,CAAAA,EAAA,GAAAS,gBAAA,CAAAN,KAAA,qBAAAH,EAAA,CAAA4I,iBAAA;MAEA,IAAM,CAAAjI,aAAA,CAAAR,KAAA,IAA6BT,KAAA,CAAAwC,UAAA;QAC3B2C,oBAAY;MAClB;MACAP,mBAAyB;MAC3BnB,IAAA;IAEA,CAAM;IACE,MAAA0B,oBAAc,GAAAA,CAAA;MAEpB;QAAA1E;MAAa,CAAO,GAAAoC,WAAA;MAClBxB,UAAA,CAAAZ,KAAA,GAAiBA,KAAO;MAC1Ba,gBAAO,CAAAb,KAAA,GAAAA,KAAA;IACL;IACA,MAAA0I,qBAAyB,GAAA5D,IAAA;MAC3B,IAAAjF,EAAA,EAAAoE,EAAA;MACF;QAAA0E;MAAA,IAAA7D,IAAA;MAEM,IAAAjD,QAAA,CAAA7B,KAAA;QACJ,CAAAH,EAAA,GAAAS,gBAAiB,CAAAN,KAAA,qBAAAH,EAAA,CAAA+I,iBAAA,CAAA9D,IAAA,GAAA6D,OAAA;MACjB,CAAM;QAEN,CAAAA,OAAc,MAAA1E,EAAA,GAAA3D,gBAAA,CAAAN,KAAA,qBAAAiE,EAAA,CAAA2E,iBAAA,CAAA9D,IAAA;QACZX,mBAAgB;MAAA;IAEd;IACA,MAAA0E,uBAAiB,GAAoB/E,CAAA;MACrC,MAAA/D,MAAA,GAAA+D,CAAA,CAAA/D,MAAA;MACE;QAAAgI;MAAA,IAAAjE,CAAA;MACE,QAAAiE,IAAA;QACA,KAAAC,UAAA,CAAAc,EAAA;QAAA,KAAAd,UACI,CAAAG,IAAA;UAAa;YACnBrE,CAAA,CAAAsE,cAAA;YACF,MAAAW,QAAA,GAAAhB,IAAA,KAAAC,UAAA,CAAAc,EAAA;YACAE,SAAA,CAAAC,UAAA,CAAAlJ,MAAA,EAAAgJ,QAAA,MAAAlK,UAAA,CAAAiF,CAAA;YACF;UAAA;QAEA,KAAKkE,UAAW,CAAAC,KAAA;QACd,KAAAD,UAAa,CAAAE,WAAA;UACbnI,MAAA,CAAA+G,KAAA;UACJ;MAAA;IAGF;IACE,MAAAoC,YAAyB,GAAAA,CAAA;MACzB,MAAMxD,IAAU,GAAA5E,WAAU,CAAAd,KAAA;MACP,MAAAmJ,OAAA,GAAAzD,IAAA,CAAAA,IAAA,CAAAjE,MAAA,IAAiB,CAAQ;MAE5C7C,gBAAgB,GAAAiC,gBAAA,CAAAb,KAA4B,OAAApB,gBAAqB,GAAS;MACxE,KAAAuK,OAAA,KAAAvK,gBAAA,IAAAW,KAAA,CAAA2G,YAAA,IAAAR,IAAA,CAAAjE,MAAA,MAEF;MACE,IAAA0H,OAAA,CAAUlE,QAAO;QACZG,SAAA,CAAA+D,OAAA;MACL;QACFA,OAAA,CAAAlE,QAAA;MAAA;IAGF,CAAM;IACJ,MAAAmE,WAAa,GAAAtF,CAAA;MACP,MAAAuF,EAAA,GAAAvF,CAAA,CAAO/D,MAAW;MACpB,MAAApC,IAAA,GAAAkB,UAAuB,CAAAiF,CAAA;MACzB,IAAAuF,EAAA,CAAAC,SAAoB,KAAA3L,IAAA;QACtBgD,WAAA,CAAAX,KAAA;MACA;MACFgD,IAAA,UAAAc,CAAA;IAEA,CAAM;IACJ,MAAAyF,UAAoB,GAAAzF,CAAA;MACpBnD,WAAA,CAAAX,KAAc;MAChBgD,IAAA,SAAAc,CAAA;IAEA,CAAM;IACE,MAAA0F,YAAY,GAAAC,QAAA;MAElB,MAAY;QAAAzJ;MAAA,IAAAgC,aAAA;MAEN,KAAAhC,KAAA,EAEF;MACF,MAAA0J,MAAY,GAAAnK,KAAA,CAAAoK,YAAA,CAAoB3J,KAAE;MAAY,IAE7C4J,SAAA,CAAAF,MAAA;QACHA,MAAA,CAAAG,IAAA,CAAA1D,oBAA6B,EAAA9C,KAAA,QAC3B,CAAqB;MAAA,CAChB,UAAAqG,MAAA;QACevD,oBAAA;MAAA,CACtB;QAAAvB,mBACe;MAEjB;IACE,CAAC,EAAArF,KAAA,CAAAkK,QAAc,CAAS;IAExB,MAAIxJ,WAAgB,GAAAA,CAAA8C,GAAA,EAAAe,CAAA;MAEd,CAAAtD,aAAA,CAAAR,KAAA,IAAqCmE,mBAAA;MAC7C,IAAAL,CAAA,oBAAAA,CAAA,CAAAtE,WAAA,EAEM;MAEFuD,GAAA,GAAAyG,YAAkB,KAAA5E,mBAAyB;IAAe,CACxD;IAEN,MAAMkF,mBAA+B,GAAA9C,UAAA,IAAA+C,MAAA,CAAAC,UAAA,CAAAC,SAAA,CAAAlL,OAAA,CAAAmL,UAAA,kBAAAlD,UAAA,EAAAhH,KAAA;IAErCmK,KAAA,CAAAzJ,SAAA,EAAA6D,oBAAA;IAAA4F,KACG,EAAAlI,YAA0B,EAAAb,UAAA,QAAA7B,KAAwB,CAAA2G,YAAA,GAAAT,oBAAA;IACnD0E,KAAA,CAAArJ,WAAA;MACF0D,QAAA,OAAAuC,WAAA;IAEA;IACWoD,KAAA,CAAAzI,QAAA;MACV,MAAA8C,QAAA;MAED,MAAAwC,UAA4B,GAAA5G,KAAA,CAAAJ,KAAA,CAAAI,KAAA;MAC1BzB,kBAAe,GAAAmL,mBAAA,CAAA9C,UAAA,KAAArI,kBAAA;MACToI,WAAA;IACN,CAAqB;IACToD,KAAA,CAAA/H,WAAA,EAAAsC,oBAAA;MAAA0F,SAAA;IAAA;IACdC,SAAC;MAED,MAAmBrD,UAAA,GAAA5G,KAAA,CAAAJ,KAAA,CAAAI,KAAA;MAEnB,MAAAkK,gBAAgB,GAAAR,mBAAA,CAAA9C,UAAA;MACRrI,kBAAA,GAAAqI,UAA0B,CAAAO,YAAA,IAAA+C,gBAAA;MAE1BC,iBAAA,CAAAvD,UAAA,EAAAD,WAAA;IAEN;IACAyD,MAAA;MACD7C,eAAA;MAEYrH,gBAAA;MAAA6D,mBAAA;MAAAH,UAAA;MAAA5B;IAAA,CAIX;IAAA,QAAAqI,IAAA,EAAAC,MAAA;MAAA,OAAAC,SAAA,IAAAC,WAAA,CAAAC,KAAA,CAAAC,SAAA;QAAAC,OAAA;QAIA5K,GAAA,EAAAD,UAAA;QAAAkE,OAAA,EAAA5D,aAAA,CAAAR,KAAA;QAAAgL,UAAA,EAAAP,IAAA,CAAAO,UAAA;QAAA,iBAAAH,KAAA,CAAAhM,UAAA,EAAAiF,CAAA,cAAA2G,IAAA,CAAAQ,WAAA;QAIA,kBAAApN,aAAA;QAAA,uBAAA4M,IAAA,CAAAS,kBAAA;QAAA;QAAA;QAIA9M,SAAA,EAAAqM,IAAA,CAAArM,SAAA;QAAA+M,UAAA,KAAAN,KAAA,CAAAhM,UAAA,EAAAuM,SAAA,CAAApL,KAAA;QAAAqL,MAAA;QAAAC,IAAA;QAIAC,UAAA,EAAAd,IAAA,CAAAc,UAAA;QACDC,MAAA,EAAA5G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}