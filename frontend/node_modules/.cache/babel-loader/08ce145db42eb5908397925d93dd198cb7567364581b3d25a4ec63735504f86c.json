{"ast":null,"code":"import { iconToSVG, isUnsetKeyword } from '../svg/build.mjs';\nimport { getIconData } from '../icon-set/get-icon.mjs';\nimport { calculateSize } from '../svg/size.mjs';\nimport { mergeIconProps } from './utils.mjs';\nimport createDebugger from 'debug';\nimport { defaultIconCustomisations } from '../customisations/defaults.mjs';\nimport '../icon/defaults.mjs';\nimport '../svg/defs.mjs';\nimport '../icon/merge.mjs';\nimport '../icon/transformations.mjs';\nimport '../icon-set/tree.mjs';\nconst debug = createDebugger(\"@iconify-loader:icon\");\nasync function searchForIcon(iconSet, collection, ids, options) {\n  let iconData;\n  const {\n    customize\n  } = options?.customizations ?? {};\n  for (const id of ids) {\n    iconData = getIconData(iconSet, id);\n    if (iconData) {\n      debug(`${collection}:${id}`);\n      let defaultCustomizations = {\n        ...defaultIconCustomisations\n      };\n      if (typeof customize === \"function\") {\n        iconData = Object.assign({}, iconData);\n        defaultCustomizations = customize(defaultCustomizations, iconData, `${collection}:${id}`) ?? defaultCustomizations;\n      }\n      const {\n        attributes: {\n          width,\n          height,\n          ...restAttributes\n        },\n        body\n      } = iconToSVG(iconData, defaultCustomizations);\n      const scale = options?.scale;\n      return await mergeIconProps(\n      // DON'T remove space on <svg >\n      `<svg >${body}</svg>`, collection, id, options, () => {\n        return {\n          ...restAttributes\n        };\n      }, props => {\n        const check = (prop, defaultValue) => {\n          const propValue = props[prop];\n          let value;\n          if (!isUnsetKeyword(propValue)) {\n            if (propValue) {\n              return;\n            }\n            if (typeof scale === \"number\") {\n              if (scale) {\n                value = calculateSize(\n                // Base on result from iconToSVG() or 1em\n                defaultValue ?? \"1em\", scale);\n              }\n            } else {\n              value = defaultValue;\n            }\n          }\n          if (!value) {\n            delete props[prop];\n          } else {\n            props[prop] = value;\n          }\n        };\n        check(\"width\", width);\n        check(\"height\", height);\n      });\n    }\n  }\n}\nexport { searchForIcon };","map":{"version":3,"names":["iconToSVG","isUnsetKeyword","getIconData","calculateSize","mergeIconProps","createDebugger","defaultIconCustomisations","debug","searchForIcon","iconSet","collection","ids","options","iconData","customize","customizations","id","defaultCustomizations","Object","assign","attributes","width","height","restAttributes","body","scale","props","check","prop","defaultValue","propValue","value"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/loader/modern.mjs"],"sourcesContent":["import { iconToSVG, isUnsetKeyword } from '../svg/build.mjs';\nimport { getIconData } from '../icon-set/get-icon.mjs';\nimport { calculateSize } from '../svg/size.mjs';\nimport { mergeIconProps } from './utils.mjs';\nimport createDebugger from 'debug';\nimport { defaultIconCustomisations } from '../customisations/defaults.mjs';\nimport '../icon/defaults.mjs';\nimport '../svg/defs.mjs';\nimport '../icon/merge.mjs';\nimport '../icon/transformations.mjs';\nimport '../icon-set/tree.mjs';\n\nconst debug = createDebugger(\"@iconify-loader:icon\");\nasync function searchForIcon(iconSet, collection, ids, options) {\n  let iconData;\n  const { customize } = options?.customizations ?? {};\n  for (const id of ids) {\n    iconData = getIconData(iconSet, id);\n    if (iconData) {\n      debug(`${collection}:${id}`);\n      let defaultCustomizations = {\n        ...defaultIconCustomisations\n      };\n      if (typeof customize === \"function\") {\n        iconData = Object.assign({}, iconData);\n        defaultCustomizations = customize(\n          defaultCustomizations,\n          iconData,\n          `${collection}:${id}`\n        ) ?? defaultCustomizations;\n      }\n      const {\n        attributes: { width, height, ...restAttributes },\n        body\n      } = iconToSVG(iconData, defaultCustomizations);\n      const scale = options?.scale;\n      return await mergeIconProps(\n        // DON'T remove space on <svg >\n        `<svg >${body}</svg>`,\n        collection,\n        id,\n        options,\n        () => {\n          return { ...restAttributes };\n        },\n        (props) => {\n          const check = (prop, defaultValue) => {\n            const propValue = props[prop];\n            let value;\n            if (!isUnsetKeyword(propValue)) {\n              if (propValue) {\n                return;\n              }\n              if (typeof scale === \"number\") {\n                if (scale) {\n                  value = calculateSize(\n                    // Base on result from iconToSVG() or 1em\n                    defaultValue ?? \"1em\",\n                    scale\n                  );\n                }\n              } else {\n                value = defaultValue;\n              }\n            }\n            if (!value) {\n              delete props[prop];\n            } else {\n              props[prop] = value;\n            }\n          };\n          check(\"width\", width);\n          check(\"height\", height);\n        }\n      );\n    }\n  }\n}\n\nexport { searchForIcon };\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,kBAAkB;AAC5D,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,cAAc,QAAQ,aAAa;AAC5C,OAAOC,cAAc,MAAM,OAAO;AAClC,SAASC,yBAAyB,QAAQ,gCAAgC;AAC1E,OAAO,sBAAsB;AAC7B,OAAO,iBAAiB;AACxB,OAAO,mBAAmB;AAC1B,OAAO,6BAA6B;AACpC,OAAO,sBAAsB;AAE7B,MAAMC,KAAK,GAAGF,cAAc,CAAC,sBAAsB,CAAC;AACpD,eAAeG,aAAaA,CAACC,OAAO,EAAEC,UAAU,EAAEC,GAAG,EAAEC,OAAO,EAAE;EAC9D,IAAIC,QAAQ;EACZ,MAAM;IAAEC;EAAU,CAAC,GAAGF,OAAO,EAAEG,cAAc,IAAI,CAAC,CAAC;EACnD,KAAK,MAAMC,EAAE,IAAIL,GAAG,EAAE;IACpBE,QAAQ,GAAGX,WAAW,CAACO,OAAO,EAAEO,EAAE,CAAC;IACnC,IAAIH,QAAQ,EAAE;MACZN,KAAK,CAAC,GAAGG,UAAU,IAAIM,EAAE,EAAE,CAAC;MAC5B,IAAIC,qBAAqB,GAAG;QAC1B,GAAGX;MACL,CAAC;MACD,IAAI,OAAOQ,SAAS,KAAK,UAAU,EAAE;QACnCD,QAAQ,GAAGK,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,QAAQ,CAAC;QACtCI,qBAAqB,GAAGH,SAAS,CAC/BG,qBAAqB,EACrBJ,QAAQ,EACR,GAAGH,UAAU,IAAIM,EAAE,EACrB,CAAC,IAAIC,qBAAqB;MAC5B;MACA,MAAM;QACJG,UAAU,EAAE;UAAEC,KAAK;UAAEC,MAAM;UAAE,GAAGC;QAAe,CAAC;QAChDC;MACF,CAAC,GAAGxB,SAAS,CAACa,QAAQ,EAAEI,qBAAqB,CAAC;MAC9C,MAAMQ,KAAK,GAAGb,OAAO,EAAEa,KAAK;MAC5B,OAAO,MAAMrB,cAAc;MACzB;MACA,SAASoB,IAAI,QAAQ,EACrBd,UAAU,EACVM,EAAE,EACFJ,OAAO,EACP,MAAM;QACJ,OAAO;UAAE,GAAGW;QAAe,CAAC;MAC9B,CAAC,EACAG,KAAK,IAAK;QACT,MAAMC,KAAK,GAAGA,CAACC,IAAI,EAAEC,YAAY,KAAK;UACpC,MAAMC,SAAS,GAAGJ,KAAK,CAACE,IAAI,CAAC;UAC7B,IAAIG,KAAK;UACT,IAAI,CAAC9B,cAAc,CAAC6B,SAAS,CAAC,EAAE;YAC9B,IAAIA,SAAS,EAAE;cACb;YACF;YACA,IAAI,OAAOL,KAAK,KAAK,QAAQ,EAAE;cAC7B,IAAIA,KAAK,EAAE;gBACTM,KAAK,GAAG5B,aAAa;gBACnB;gBACA0B,YAAY,IAAI,KAAK,EACrBJ,KACF,CAAC;cACH;YACF,CAAC,MAAM;cACLM,KAAK,GAAGF,YAAY;YACtB;UACF;UACA,IAAI,CAACE,KAAK,EAAE;YACV,OAAOL,KAAK,CAACE,IAAI,CAAC;UACpB,CAAC,MAAM;YACLF,KAAK,CAACE,IAAI,CAAC,GAAGG,KAAK;UACrB;QACF,CAAC;QACDJ,KAAK,CAAC,OAAO,EAAEN,KAAK,CAAC;QACrBM,KAAK,CAAC,QAAQ,EAAEL,MAAM,CAAC;MACzB,CACF,CAAC;IACH;EACF;AACF;AAEA,SAASd,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}