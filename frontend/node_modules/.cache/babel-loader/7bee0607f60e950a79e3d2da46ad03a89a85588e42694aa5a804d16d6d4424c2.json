{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sanitizeUrl = void 0;\nvar constants_1 = require(\"./constants\");\nfunction isRelativeUrlWithoutProtocol(url) {\n  return constants_1.relativeFirstCharacters.indexOf(url[0]) > -1;\n}\nfunction decodeHtmlCharacters(str) {\n  var removedNullByte = str.replace(constants_1.ctrlCharactersRegex, \"\");\n  return removedNullByte.replace(constants_1.htmlEntitiesRegex, function (match, dec) {\n    return String.fromCharCode(dec);\n  });\n}\nfunction isValidUrl(url) {\n  return URL.canParse(url);\n}\nfunction decodeURI(uri) {\n  try {\n    return decodeURIComponent(uri);\n  } catch (e) {\n    // Ignoring error\n    // It is possible that the URI contains a `%` not associated\n    // with URI/URL-encoding.\n    return uri;\n  }\n}\nfunction sanitizeUrl(url) {\n  if (!url) {\n    return constants_1.BLANK_URL;\n  }\n  var charsToDecode;\n  var decodedUrl = decodeURI(url.trim());\n  do {\n    decodedUrl = decodeHtmlCharacters(decodedUrl).replace(constants_1.htmlCtrlEntityRegex, \"\").replace(constants_1.ctrlCharactersRegex, \"\").replace(constants_1.whitespaceEscapeCharsRegex, \"\").trim();\n    decodedUrl = decodeURI(decodedUrl);\n    charsToDecode = decodedUrl.match(constants_1.ctrlCharactersRegex) || decodedUrl.match(constants_1.htmlEntitiesRegex) || decodedUrl.match(constants_1.htmlCtrlEntityRegex) || decodedUrl.match(constants_1.whitespaceEscapeCharsRegex);\n  } while (charsToDecode && charsToDecode.length > 0);\n  var sanitizedUrl = decodedUrl;\n  if (!sanitizedUrl) {\n    return constants_1.BLANK_URL;\n  }\n  if (isRelativeUrlWithoutProtocol(sanitizedUrl)) {\n    return sanitizedUrl;\n  }\n  // Remove any leading whitespace before checking the URL scheme\n  var trimmedUrl = sanitizedUrl.trimStart();\n  var urlSchemeParseResults = trimmedUrl.match(constants_1.urlSchemeRegex);\n  if (!urlSchemeParseResults) {\n    return sanitizedUrl;\n  }\n  var urlScheme = urlSchemeParseResults[0].toLowerCase().trim();\n  if (constants_1.invalidProtocolRegex.test(urlScheme)) {\n    return constants_1.BLANK_URL;\n  }\n  var backSanitized = trimmedUrl.replace(/\\\\/g, \"/\");\n  // Handle special cases for mailto: and custom deep-link protocols\n  if (urlScheme === \"mailto:\" || urlScheme.includes(\"://\")) {\n    return backSanitized;\n  }\n  // For http and https URLs, perform additional validation\n  if (urlScheme === \"http:\" || urlScheme === \"https:\") {\n    if (!isValidUrl(backSanitized)) {\n      return constants_1.BLANK_URL;\n    }\n    var url_1 = new URL(backSanitized);\n    url_1.protocol = url_1.protocol.toLowerCase();\n    url_1.hostname = url_1.hostname.toLowerCase();\n    return url_1.toString();\n  }\n  return backSanitized;\n}\nexports.sanitizeUrl = sanitizeUrl;","map":{"version":3,"names":["Object","defineProperty","exports","value","sanitizeUrl","constants_1","require","isRelativeUrlWithoutProtocol","url","relativeFirstCharacters","indexOf","decodeHtmlCharacters","str","removedNullByte","replace","ctrlCharactersRegex","htmlEntitiesRegex","match","dec","String","fromCharCode","isValidUrl","URL","canParse","decodeURI","uri","decodeURIComponent","e","BLANK_URL","charsToDecode","decodedUrl","trim","htmlCtrlEntityRegex","whitespaceEscapeCharsRegex","length","sanitizedUrl","trimmedUrl","trimStart","urlSchemeParseResults","urlSchemeRegex","urlScheme","toLowerCase","invalidProtocolRegex","test","backSanitized","includes","url_1","protocol","hostname","toString"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@braintree/sanitize-url/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sanitizeUrl = void 0;\nvar constants_1 = require(\"./constants\");\nfunction isRelativeUrlWithoutProtocol(url) {\n    return constants_1.relativeFirstCharacters.indexOf(url[0]) > -1;\n}\nfunction decodeHtmlCharacters(str) {\n    var removedNullByte = str.replace(constants_1.ctrlCharactersRegex, \"\");\n    return removedNullByte.replace(constants_1.htmlEntitiesRegex, function (match, dec) {\n        return String.fromCharCode(dec);\n    });\n}\nfunction isValidUrl(url) {\n    return URL.canParse(url);\n}\nfunction decodeURI(uri) {\n    try {\n        return decodeURIComponent(uri);\n    }\n    catch (e) {\n        // Ignoring error\n        // It is possible that the URI contains a `%` not associated\n        // with URI/URL-encoding.\n        return uri;\n    }\n}\nfunction sanitizeUrl(url) {\n    if (!url) {\n        return constants_1.BLANK_URL;\n    }\n    var charsToDecode;\n    var decodedUrl = decodeURI(url.trim());\n    do {\n        decodedUrl = decodeHtmlCharacters(decodedUrl)\n            .replace(constants_1.htmlCtrlEntityRegex, \"\")\n            .replace(constants_1.ctrlCharactersRegex, \"\")\n            .replace(constants_1.whitespaceEscapeCharsRegex, \"\")\n            .trim();\n        decodedUrl = decodeURI(decodedUrl);\n        charsToDecode =\n            decodedUrl.match(constants_1.ctrlCharactersRegex) ||\n                decodedUrl.match(constants_1.htmlEntitiesRegex) ||\n                decodedUrl.match(constants_1.htmlCtrlEntityRegex) ||\n                decodedUrl.match(constants_1.whitespaceEscapeCharsRegex);\n    } while (charsToDecode && charsToDecode.length > 0);\n    var sanitizedUrl = decodedUrl;\n    if (!sanitizedUrl) {\n        return constants_1.BLANK_URL;\n    }\n    if (isRelativeUrlWithoutProtocol(sanitizedUrl)) {\n        return sanitizedUrl;\n    }\n    // Remove any leading whitespace before checking the URL scheme\n    var trimmedUrl = sanitizedUrl.trimStart();\n    var urlSchemeParseResults = trimmedUrl.match(constants_1.urlSchemeRegex);\n    if (!urlSchemeParseResults) {\n        return sanitizedUrl;\n    }\n    var urlScheme = urlSchemeParseResults[0].toLowerCase().trim();\n    if (constants_1.invalidProtocolRegex.test(urlScheme)) {\n        return constants_1.BLANK_URL;\n    }\n    var backSanitized = trimmedUrl.replace(/\\\\/g, \"/\");\n    // Handle special cases for mailto: and custom deep-link protocols\n    if (urlScheme === \"mailto:\" || urlScheme.includes(\"://\")) {\n        return backSanitized;\n    }\n    // For http and https URLs, perform additional validation\n    if (urlScheme === \"http:\" || urlScheme === \"https:\") {\n        if (!isValidUrl(backSanitized)) {\n            return constants_1.BLANK_URL;\n        }\n        var url_1 = new URL(backSanitized);\n        url_1.protocol = url_1.protocol.toLowerCase();\n        url_1.hostname = url_1.hostname.toLowerCase();\n        return url_1.toString();\n    }\n    return backSanitized;\n}\nexports.sanitizeUrl = sanitizeUrl;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}