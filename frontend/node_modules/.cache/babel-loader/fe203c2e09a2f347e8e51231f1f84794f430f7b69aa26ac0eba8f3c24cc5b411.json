{"ast":null,"code":"/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { createDefaultCoreModule, createDefaultSharedCoreModule } from '../default-module.js';\nimport { inject } from '../dependency-injection.js';\nimport * as ast from '../languages/generated/ast.js';\nimport { EmptyFileSystem } from '../workspace/file-system-provider.js';\nimport { URI } from './uri-utils.js';\nconst minimalGrammarModule = {\n  Grammar: () => undefined,\n  LanguageMetaData: () => ({\n    caseInsensitive: false,\n    fileExtensions: ['.langium'],\n    languageId: 'langium'\n  })\n};\nconst minimalSharedGrammarModule = {\n  AstReflection: () => new ast.LangiumGrammarAstReflection()\n};\nfunction createMinimalGrammarServices() {\n  const shared = inject(createDefaultSharedCoreModule(EmptyFileSystem), minimalSharedGrammarModule);\n  const grammar = inject(createDefaultCoreModule({\n    shared\n  }), minimalGrammarModule);\n  shared.ServiceRegistry.register(grammar);\n  return grammar;\n}\n/**\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\n * most notably the parser builder which interprets the grammar to create a parser.\n */\nexport function loadGrammarFromJson(json) {\n  var _a;\n  const services = createMinimalGrammarServices();\n  const astNode = services.serializer.JsonSerializer.deserialize(json);\n  services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, URI.parse(`memory://${(_a = astNode.name) !== null && _a !== void 0 ? _a : 'grammar'}.langium`));\n  return astNode;\n}","map":{"version":3,"names":["createDefaultCoreModule","createDefaultSharedCoreModule","inject","ast","EmptyFileSystem","URI","minimalGrammarModule","Grammar","undefined","LanguageMetaData","caseInsensitive","fileExtensions","languageId","minimalSharedGrammarModule","AstReflection","LangiumGrammarAstReflection","createMinimalGrammarServices","shared","grammar","ServiceRegistry","register","loadGrammarFromJson","json","services","astNode","serializer","JsonSerializer","deserialize","workspace","LangiumDocumentFactory","fromModel","parse","_a","name"],"sources":["../../src/utils/grammar-loader.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;AAMA,SAASA,uBAAuB,EAAEC,6BAA6B,QAAQ,sBAAsB;AAE7F,SAASC,MAAM,QAAQ,4BAA4B;AACnD,OAAO,KAAKC,GAAG,MAAM,+BAA+B;AAGpD,SAASC,eAAe,QAAQ,sCAAsC;AACtE,SAASC,GAAG,QAAQ,gBAAgB;AAEpC,MAAMC,oBAAoB,GAA4D;EAClFC,OAAO,EAAEA,CAAA,KAAMC,SAAmC;EAClDC,gBAAgB,EAAEA,CAAA,MAAO;IACrBC,eAAe,EAAE,KAAK;IACtBC,cAAc,EAAE,CAAC,UAAU,CAAC;IAC5BC,UAAU,EAAE;GACf;CACJ;AAED,MAAMC,0BAA0B,GAAwE;EACpGC,aAAa,EAAEA,CAAA,KAAM,IAAIX,GAAG,CAACY,2BAA2B;CAC3D;AAED,SAASC,4BAA4BA,CAAA;EACjC,MAAMC,MAAM,GAAGf,MAAM,CACjBD,6BAA6B,CAACG,eAAe,CAAC,EAC9CS,0BAA0B,CAC7B;EACD,MAAMK,OAAO,GAAGhB,MAAM,CAClBF,uBAAuB,CAAC;IAAEiB;EAAM,CAAE,CAAC,EACnCX,oBAAoB,CACvB;EACDW,MAAM,CAACE,eAAe,CAACC,QAAQ,CAACF,OAAO,CAAC;EACxC,OAAOA,OAAO;AAClB;AAEA;;;;AAIA,OAAM,SAAUG,mBAAmBA,CAACC,IAAY;;EAC5C,MAAMC,QAAQ,GAAGP,4BAA4B,EAAE;EAC/C,MAAMQ,OAAO,GAAGD,QAAQ,CAACE,UAAU,CAACC,cAAc,CAACC,WAAW,CAACL,IAAI,CAAyB;EAC5FC,QAAQ,CAACN,MAAM,CAACW,SAAS,CAACC,sBAAsB,CAACC,SAAS,CAACN,OAAO,EAAEnB,GAAG,CAAC0B,KAAK,CAAC,YAAY,CAAAC,EAAA,GAAAR,OAAO,CAACS,IAAI,cAAAD,EAAA,cAAAA,EAAA,GAAI,SAAS,UAAU,CAAC,CAAC;EAC/H,OAAOR,OAAO;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}