{"ast":null,"code":"import * as _ from 'lodash-es';\nvar DEFAULT_EDGE_NAME = '\\x00';\nvar GRAPH_NODE = '\\x00';\nvar EDGE_KEY_DELIM = '\\x01';\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\nexport class Graph {\n  constructor(opts = {}) {\n    this._isDirected = Object.prototype.hasOwnProperty.call(opts, 'directed') ? opts.directed : true;\n    this._isMultigraph = Object.prototype.hasOwnProperty.call(opts, 'multigraph') ? opts.multigraph : false;\n    this._isCompound = Object.prototype.hasOwnProperty.call(opts, 'compound') ? opts.compound : false;\n\n    // Label for the graph itself\n    this._label = undefined;\n\n    // Defaults to be set when creating a new node\n    this._defaultNodeLabelFn = _.constant(undefined);\n\n    // Defaults to be set when creating a new edge\n    this._defaultEdgeLabelFn = _.constant(undefined);\n\n    // v -> label\n    this._nodes = {};\n    if (this._isCompound) {\n      // v -> parent\n      this._parent = {};\n\n      // v -> children\n      this._children = {};\n      this._children[GRAPH_NODE] = {};\n    }\n\n    // v -> edgeObj\n    this._in = {};\n\n    // u -> v -> Number\n    this._preds = {};\n\n    // v -> edgeObj\n    this._out = {};\n\n    // v -> w -> Number\n    this._sucs = {};\n\n    // e -> edgeObj\n    this._edgeObjs = {};\n\n    // e -> label\n    this._edgeLabels = {};\n  }\n  /* === Graph functions ========= */\n  isDirected() {\n    return this._isDirected;\n  }\n  isMultigraph() {\n    return this._isMultigraph;\n  }\n  isCompound() {\n    return this._isCompound;\n  }\n  setGraph(label) {\n    this._label = label;\n    return this;\n  }\n  graph() {\n    return this._label;\n  }\n  /* === Node functions ========== */\n  setDefaultNodeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultNodeLabelFn = newDefault;\n    return this;\n  }\n  nodeCount() {\n    return this._nodeCount;\n  }\n  nodes() {\n    return _.keys(this._nodes);\n  }\n  sources() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._in[v]);\n    });\n  }\n  sinks() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._out[v]);\n    });\n  }\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n    _.each(vs, function (v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n    return this;\n  }\n  setNode(v, value) {\n    if (Object.prototype.hasOwnProperty.call(this._nodes, v)) {\n      if (arguments.length > 1) {\n        this._nodes[v] = value;\n      }\n      return this;\n    }\n\n    // @ts-expect-error\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n    if (this._isCompound) {\n      this._parent[v] = GRAPH_NODE;\n      this._children[v] = {};\n      this._children[GRAPH_NODE][v] = true;\n    }\n    this._in[v] = {};\n    this._preds[v] = {};\n    this._out[v] = {};\n    this._sucs[v] = {};\n    ++this._nodeCount;\n    return this;\n  }\n  node(v) {\n    return this._nodes[v];\n  }\n  hasNode(v) {\n    return Object.prototype.hasOwnProperty.call(this._nodes, v);\n  }\n  removeNode(v) {\n    if (Object.prototype.hasOwnProperty.call(this._nodes, v)) {\n      var removeEdge = e => this.removeEdge(this._edgeObjs[e]);\n      delete this._nodes[v];\n      if (this._isCompound) {\n        this._removeFromParentsChildList(v);\n        delete this._parent[v];\n        _.each(this.children(v), child => {\n          this.setParent(child);\n        });\n        delete this._children[v];\n      }\n      _.each(_.keys(this._in[v]), removeEdge);\n      delete this._in[v];\n      delete this._preds[v];\n      _.each(_.keys(this._out[v]), removeEdge);\n      delete this._out[v];\n      delete this._sucs[v];\n      --this._nodeCount;\n    }\n    return this;\n  }\n  setParent(v, parent) {\n    if (!this._isCompound) {\n      throw new Error('Cannot set parent in a non-compound graph');\n    }\n    if (_.isUndefined(parent)) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += '';\n      for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error('Setting ' + parent + ' as parent of ' + v + ' would create a cycle');\n        }\n      }\n      this.setNode(parent);\n    }\n    this.setNode(v);\n    this._removeFromParentsChildList(v);\n    this._parent[v] = parent;\n    this._children[parent][v] = true;\n    return this;\n  }\n  _removeFromParentsChildList(v) {\n    delete this._children[this._parent[v]][v];\n  }\n  parent(v) {\n    if (this._isCompound) {\n      var parent = this._parent[v];\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n  children(v) {\n    if (_.isUndefined(v)) {\n      v = GRAPH_NODE;\n    }\n    if (this._isCompound) {\n      var children = this._children[v];\n      if (children) {\n        return _.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n  predecessors(v) {\n    var predsV = this._preds[v];\n    if (predsV) {\n      return _.keys(predsV);\n    }\n  }\n  successors(v) {\n    var sucsV = this._sucs[v];\n    if (sucsV) {\n      return _.keys(sucsV);\n    }\n  }\n  neighbors(v) {\n    var preds = this.predecessors(v);\n    if (preds) {\n      return _.union(preds, this.successors(v));\n    }\n  }\n  isLeaf(v) {\n    var neighbors;\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n    return neighbors.length === 0;\n  }\n  filterNodes(filter) {\n    // @ts-expect-error\n    var copy = new this.constructor({\n      directed: this._isDirected,\n      multigraph: this._isMultigraph,\n      compound: this._isCompound\n    });\n    copy.setGraph(this.graph());\n    var self = this;\n    _.each(this._nodes, function (value, v) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n    _.each(this._edgeObjs, function (e) {\n      // @ts-expect-error\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n    var parents = {};\n    function findParent(v) {\n      var parent = self.parent(v);\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n    if (this._isCompound) {\n      _.each(copy.nodes(), function (v) {\n        copy.setParent(v, findParent(v));\n      });\n    }\n    return copy;\n  }\n  /* === Edge functions ========== */\n  setDefaultEdgeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultEdgeLabelFn = newDefault;\n    return this;\n  }\n  edgeCount() {\n    return this._edgeCount;\n  }\n  edges() {\n    return _.values(this._edgeObjs);\n  }\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n    _.reduce(vs, function (v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n      return w;\n    });\n    return this;\n  }\n  /*\n   * setEdge(v, w, [value, [name]])\n   * setEdge({ v, w, [name] }, [value])\n   */\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n    if (typeof arg0 === 'object' && arg0 !== null && 'v' in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n    v = '' + v;\n    w = '' + w;\n    if (!_.isUndefined(name)) {\n      name = '' + name;\n    }\n    var e = edgeArgsToId(this._isDirected, v, w, name);\n    if (Object.prototype.hasOwnProperty.call(this._edgeLabels, e)) {\n      if (valueSpecified) {\n        this._edgeLabels[e] = value;\n      }\n      return this;\n    }\n    if (!_.isUndefined(name) && !this._isMultigraph) {\n      throw new Error('Cannot set a named edge when isMultigraph = false');\n    }\n\n    // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n    this.setNode(v);\n    this.setNode(w);\n\n    // @ts-expect-error\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n    var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\n    // Ensure we add undirected edges in a consistent way.\n    v = edgeObj.v;\n    w = edgeObj.w;\n    Object.freeze(edgeObj);\n    this._edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this._preds[w], v);\n    incrementOrInitEntry(this._sucs[v], w);\n    this._in[w][e] = edgeObj;\n    this._out[v][e] = edgeObj;\n    this._edgeCount++;\n    return this;\n  }\n  edge(v, w, name) {\n    var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);\n    return this._edgeLabels[e];\n  }\n  hasEdge(v, w, name) {\n    var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);\n    return Object.prototype.hasOwnProperty.call(this._edgeLabels, e);\n  }\n  removeEdge(v, w, name) {\n    var e = arguments.length === 1 ? edgeObjToId(this._isDirected, arguments[0]) : edgeArgsToId(this._isDirected, v, w, name);\n    var edge = this._edgeObjs[e];\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this._edgeLabels[e];\n      delete this._edgeObjs[e];\n      decrementOrRemoveEntry(this._preds[w], v);\n      decrementOrRemoveEntry(this._sucs[v], w);\n      delete this._in[w][e];\n      delete this._out[v][e];\n      this._edgeCount--;\n    }\n    return this;\n  }\n  inEdges(v, u) {\n    var inV = this._in[v];\n    if (inV) {\n      var edges = _.values(inV);\n      if (!u) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.v === u;\n      });\n    }\n  }\n  outEdges(v, w) {\n    var outV = this._out[v];\n    if (outV) {\n      var edges = _.values(outV);\n      if (!w) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.w === w;\n      });\n    }\n  }\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n}\n\n/* Number of nodes in the graph. Should only be changed by the implementation. */\nGraph.prototype._nodeCount = 0;\n\n/* Number of edges in the graph. Should only be changed by the implementation. */\nGraph.prototype._edgeCount = 0;\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\nfunction decrementOrRemoveEntry(map, k) {\n  if (! --map[k]) {\n    delete map[k];\n  }\n}\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj = {\n    v: v,\n    w: w\n  };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}","map":{"version":3,"names":["_","DEFAULT_EDGE_NAME","GRAPH_NODE","EDGE_KEY_DELIM","Graph","constructor","opts","_isDirected","Object","prototype","hasOwnProperty","call","directed","_isMultigraph","multigraph","_isCompound","compound","_label","undefined","_defaultNodeLabelFn","constant","_defaultEdgeLabelFn","_nodes","_parent","_children","_in","_preds","_out","_sucs","_edgeObjs","_edgeLabels","isDirected","isMultigraph","isCompound","setGraph","label","graph","setDefaultNodeLabel","newDefault","isFunction","nodeCount","_nodeCount","nodes","keys","sources","self","filter","v","isEmpty","sinks","setNodes","vs","value","args","arguments","each","length","setNode","node","hasNode","removeNode","removeEdge","e","_removeFromParentsChildList","children","child","setParent","parent","Error","isUndefined","ancestor","predecessors","predsV","successors","sucsV","neighbors","preds","union","isLeaf","filterNodes","copy","w","setEdge","edge","parents","findParent","setDefaultEdgeLabel","edgeCount","_edgeCount","edges","values","setPath","reduce","name","valueSpecified","arg0","edgeArgsToId","edgeObj","edgeArgsToObj","freeze","incrementOrInitEntry","edgeObjToId","hasEdge","decrementOrRemoveEntry","inEdges","u","inV","outEdges","outV","nodeEdges","concat","map","k","v_","w_","tmp"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/dagre-d3-es/src/graphlib/graph.js"],"sourcesContent":["import * as _ from 'lodash-es';\n\nvar DEFAULT_EDGE_NAME = '\\x00';\nvar GRAPH_NODE = '\\x00';\nvar EDGE_KEY_DELIM = '\\x01';\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\nexport class Graph {\n  constructor(opts = {}) {\n    this._isDirected = Object.prototype.hasOwnProperty.call(opts, 'directed')\n      ? opts.directed\n      : true;\n    this._isMultigraph = Object.prototype.hasOwnProperty.call(opts, 'multigraph')\n      ? opts.multigraph\n      : false;\n    this._isCompound = Object.prototype.hasOwnProperty.call(opts, 'compound')\n      ? opts.compound\n      : false;\n\n    // Label for the graph itself\n    this._label = undefined;\n\n    // Defaults to be set when creating a new node\n    this._defaultNodeLabelFn = _.constant(undefined);\n\n    // Defaults to be set when creating a new edge\n    this._defaultEdgeLabelFn = _.constant(undefined);\n\n    // v -> label\n    this._nodes = {};\n\n    if (this._isCompound) {\n      // v -> parent\n      this._parent = {};\n\n      // v -> children\n      this._children = {};\n      this._children[GRAPH_NODE] = {};\n    }\n\n    // v -> edgeObj\n    this._in = {};\n\n    // u -> v -> Number\n    this._preds = {};\n\n    // v -> edgeObj\n    this._out = {};\n\n    // v -> w -> Number\n    this._sucs = {};\n\n    // e -> edgeObj\n    this._edgeObjs = {};\n\n    // e -> label\n    this._edgeLabels = {};\n  }\n  /* === Graph functions ========= */\n  isDirected() {\n    return this._isDirected;\n  }\n  isMultigraph() {\n    return this._isMultigraph;\n  }\n  isCompound() {\n    return this._isCompound;\n  }\n  setGraph(label) {\n    this._label = label;\n    return this;\n  }\n  graph() {\n    return this._label;\n  }\n  /* === Node functions ========== */\n  setDefaultNodeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultNodeLabelFn = newDefault;\n    return this;\n  }\n  nodeCount() {\n    return this._nodeCount;\n  }\n  nodes() {\n    return _.keys(this._nodes);\n  }\n  sources() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._in[v]);\n    });\n  }\n  sinks() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._out[v]);\n    });\n  }\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n    _.each(vs, function (v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n    return this;\n  }\n  setNode(v, value) {\n    if (Object.prototype.hasOwnProperty.call(this._nodes, v)) {\n      if (arguments.length > 1) {\n        this._nodes[v] = value;\n      }\n      return this;\n    }\n\n    // @ts-expect-error\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n    if (this._isCompound) {\n      this._parent[v] = GRAPH_NODE;\n      this._children[v] = {};\n      this._children[GRAPH_NODE][v] = true;\n    }\n    this._in[v] = {};\n    this._preds[v] = {};\n    this._out[v] = {};\n    this._sucs[v] = {};\n    ++this._nodeCount;\n    return this;\n  }\n  node(v) {\n    return this._nodes[v];\n  }\n  hasNode(v) {\n    return Object.prototype.hasOwnProperty.call(this._nodes, v);\n  }\n  removeNode(v) {\n    if (Object.prototype.hasOwnProperty.call(this._nodes, v)) {\n      var removeEdge = (e) => this.removeEdge(this._edgeObjs[e]);\n      delete this._nodes[v];\n      if (this._isCompound) {\n        this._removeFromParentsChildList(v);\n        delete this._parent[v];\n        _.each(this.children(v), (child) => {\n          this.setParent(child);\n        });\n        delete this._children[v];\n      }\n      _.each(_.keys(this._in[v]), removeEdge);\n      delete this._in[v];\n      delete this._preds[v];\n      _.each(_.keys(this._out[v]), removeEdge);\n      delete this._out[v];\n      delete this._sucs[v];\n      --this._nodeCount;\n    }\n    return this;\n  }\n  setParent(v, parent) {\n    if (!this._isCompound) {\n      throw new Error('Cannot set parent in a non-compound graph');\n    }\n\n    if (_.isUndefined(parent)) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += '';\n      for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error('Setting ' + parent + ' as parent of ' + v + ' would create a cycle');\n        }\n      }\n\n      this.setNode(parent);\n    }\n\n    this.setNode(v);\n    this._removeFromParentsChildList(v);\n    this._parent[v] = parent;\n    this._children[parent][v] = true;\n    return this;\n  }\n  _removeFromParentsChildList(v) {\n    delete this._children[this._parent[v]][v];\n  }\n  parent(v) {\n    if (this._isCompound) {\n      var parent = this._parent[v];\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n  children(v) {\n    if (_.isUndefined(v)) {\n      v = GRAPH_NODE;\n    }\n\n    if (this._isCompound) {\n      var children = this._children[v];\n      if (children) {\n        return _.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n  predecessors(v) {\n    var predsV = this._preds[v];\n    if (predsV) {\n      return _.keys(predsV);\n    }\n  }\n  successors(v) {\n    var sucsV = this._sucs[v];\n    if (sucsV) {\n      return _.keys(sucsV);\n    }\n  }\n  neighbors(v) {\n    var preds = this.predecessors(v);\n    if (preds) {\n      return _.union(preds, this.successors(v));\n    }\n  }\n  isLeaf(v) {\n    var neighbors;\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n    return neighbors.length === 0;\n  }\n  filterNodes(filter) {\n    // @ts-expect-error\n    var copy = new this.constructor({\n      directed: this._isDirected,\n      multigraph: this._isMultigraph,\n      compound: this._isCompound,\n    });\n\n    copy.setGraph(this.graph());\n\n    var self = this;\n    _.each(this._nodes, function (value, v) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n\n    _.each(this._edgeObjs, function (e) {\n      // @ts-expect-error\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n\n    var parents = {};\n    function findParent(v) {\n      var parent = self.parent(v);\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n\n    if (this._isCompound) {\n      _.each(copy.nodes(), function (v) {\n        copy.setParent(v, findParent(v));\n      });\n    }\n\n    return copy;\n  }\n  /* === Edge functions ========== */\n  setDefaultEdgeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultEdgeLabelFn = newDefault;\n    return this;\n  }\n  edgeCount() {\n    return this._edgeCount;\n  }\n  edges() {\n    return _.values(this._edgeObjs);\n  }\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n    _.reduce(vs, function (v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n      return w;\n    });\n    return this;\n  }\n  /*\n   * setEdge(v, w, [value, [name]])\n   * setEdge({ v, w, [name] }, [value])\n   */\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n\n    if (typeof arg0 === 'object' && arg0 !== null && 'v' in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n\n    v = '' + v;\n    w = '' + w;\n    if (!_.isUndefined(name)) {\n      name = '' + name;\n    }\n\n    var e = edgeArgsToId(this._isDirected, v, w, name);\n    if (Object.prototype.hasOwnProperty.call(this._edgeLabels, e)) {\n      if (valueSpecified) {\n        this._edgeLabels[e] = value;\n      }\n      return this;\n    }\n\n    if (!_.isUndefined(name) && !this._isMultigraph) {\n      throw new Error('Cannot set a named edge when isMultigraph = false');\n    }\n\n    // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n    this.setNode(v);\n    this.setNode(w);\n\n    // @ts-expect-error\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n\n    var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\n    // Ensure we add undirected edges in a consistent way.\n    v = edgeObj.v;\n    w = edgeObj.w;\n\n    Object.freeze(edgeObj);\n    this._edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this._preds[w], v);\n    incrementOrInitEntry(this._sucs[v], w);\n    this._in[w][e] = edgeObj;\n    this._out[v][e] = edgeObj;\n    this._edgeCount++;\n    return this;\n  }\n  edge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return this._edgeLabels[e];\n  }\n  hasEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return Object.prototype.hasOwnProperty.call(this._edgeLabels, e);\n  }\n  removeEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    var edge = this._edgeObjs[e];\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this._edgeLabels[e];\n      delete this._edgeObjs[e];\n      decrementOrRemoveEntry(this._preds[w], v);\n      decrementOrRemoveEntry(this._sucs[v], w);\n      delete this._in[w][e];\n      delete this._out[v][e];\n      this._edgeCount--;\n    }\n    return this;\n  }\n  inEdges(v, u) {\n    var inV = this._in[v];\n    if (inV) {\n      var edges = _.values(inV);\n      if (!u) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.v === u;\n      });\n    }\n  }\n  outEdges(v, w) {\n    var outV = this._out[v];\n    if (outV) {\n      var edges = _.values(outV);\n      if (!w) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.w === w;\n      });\n    }\n  }\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n}\n\n/* Number of nodes in the graph. Should only be changed by the implementation. */\nGraph.prototype._nodeCount = 0;\n\n/* Number of edges in the graph. Should only be changed by the implementation. */\nGraph.prototype._edgeCount = 0;\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (!--map[k]) {\n    delete map[k];\n  }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj = { v: v, w: w };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}