{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { splitEmojiSequences, joinEmojiSequences, getUnqualifiedEmojiSequence } from '../cleanup.mjs';\nimport { convertEmojiSequenceToUTF32 } from '../convert.mjs';\nimport { vs16Emoji, keycapEmoji, emojiComponents } from '../data.mjs';\nimport { getEmojiSequenceKeyword } from '../format.mjs';\nfunction guessQualifiedEmojiSequence(sequence) {\n  const split = splitEmojiSequences(sequence).map(part => {\n    if (part.indexOf(vs16Emoji) !== -1) {\n      return part;\n    }\n    if (part.length === 2) {\n      const lastNum = part[1];\n      if (lastNum === keycapEmoji) {\n        return [part[0], vs16Emoji, lastNum];\n      }\n      for (const key in emojiComponents) {\n        const range = emojiComponents[key];\n        if (lastNum >= range[0] && lastNum < range[1]) {\n          return [part[0], vs16Emoji, lastNum];\n        }\n      }\n    }\n    return part.length === 1 ? [part[0], vs16Emoji] : part;\n  });\n  return joinEmojiSequences(split);\n}\nfunction getQualifiedEmojiVariation(item) {\n  const unqualifiedSequence = getUnqualifiedEmojiSequence(convertEmojiSequenceToUTF32(item.sequence));\n  const result = {\n    ...item,\n    sequence: guessQualifiedEmojiSequence(unqualifiedSequence)\n  };\n  if (result.sequenceKey) {\n    result.sequenceKey = getEmojiSequenceKeyword(unqualifiedSequence);\n  }\n  return result;\n}\nfunction getQualifiedEmojiVariations(items) {\n  const results = /* @__PURE__ */Object.create(null);\n  for (let i = 0; i < items.length; i++) {\n    const result = getQualifiedEmojiVariation(items[i]);\n    const key = getEmojiSequenceKeyword(getUnqualifiedEmojiSequence(result.sequence));\n    if (!results[key] || results[key].sequence.length < result.sequence.length) {\n      results[key] = result;\n    }\n  }\n  return Object.values(results);\n}\nexport { getQualifiedEmojiVariation, getQualifiedEmojiVariations, guessQualifiedEmojiSequence };","map":{"version":3,"names":["splitEmojiSequences","joinEmojiSequences","getUnqualifiedEmojiSequence","convertEmojiSequenceToUTF32","vs16Emoji","keycapEmoji","emojiComponents","getEmojiSequenceKeyword","guessQualifiedEmojiSequence","sequence","split","map","part","indexOf","length","lastNum","key","range","getQualifiedEmojiVariation","item","unqualifiedSequence","result","sequenceKey","getQualifiedEmojiVariations","items","results","Object","create","i","values"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/emoji/test/variations.mjs"],"sourcesContent":["import { splitEmojiSequences, joinEmojiSequences, getUnqualifiedEmojiSequence } from '../cleanup.mjs';\nimport { convertEmojiSequenceToUTF32 } from '../convert.mjs';\nimport { vs16Emoji, keycapEmoji, emojiComponents } from '../data.mjs';\nimport { getEmojiSequenceKeyword } from '../format.mjs';\n\nfunction guessQualifiedEmojiSequence(sequence) {\n  const split = splitEmojiSequences(sequence).map((part) => {\n    if (part.indexOf(vs16Emoji) !== -1) {\n      return part;\n    }\n    if (part.length === 2) {\n      const lastNum = part[1];\n      if (lastNum === keycapEmoji) {\n        return [part[0], vs16Emoji, lastNum];\n      }\n      for (const key in emojiComponents) {\n        const range = emojiComponents[key];\n        if (lastNum >= range[0] && lastNum < range[1]) {\n          return [part[0], vs16Emoji, lastNum];\n        }\n      }\n    }\n    return part.length === 1 ? [part[0], vs16Emoji] : part;\n  });\n  return joinEmojiSequences(split);\n}\nfunction getQualifiedEmojiVariation(item) {\n  const unqualifiedSequence = getUnqualifiedEmojiSequence(\n    convertEmojiSequenceToUTF32(item.sequence)\n  );\n  const result = {\n    ...item,\n    sequence: guessQualifiedEmojiSequence(unqualifiedSequence)\n  };\n  if (result.sequenceKey) {\n    result.sequenceKey = getEmojiSequenceKeyword(unqualifiedSequence);\n  }\n  return result;\n}\nfunction getQualifiedEmojiVariations(items) {\n  const results = /* @__PURE__ */ Object.create(null);\n  for (let i = 0; i < items.length; i++) {\n    const result = getQualifiedEmojiVariation(items[i]);\n    const key = getEmojiSequenceKeyword(\n      getUnqualifiedEmojiSequence(result.sequence)\n    );\n    if (!results[key] || results[key].sequence.length < result.sequence.length) {\n      results[key] = result;\n    }\n  }\n  return Object.values(results);\n}\n\nexport { getQualifiedEmojiVariation, getQualifiedEmojiVariations, guessQualifiedEmojiSequence };\n"],"mappings":";;AAAA,SAASA,mBAAmB,EAAEC,kBAAkB,EAAEC,2BAA2B,QAAQ,gBAAgB;AACrG,SAASC,2BAA2B,QAAQ,gBAAgB;AAC5D,SAASC,SAAS,EAAEC,WAAW,EAAEC,eAAe,QAAQ,aAAa;AACrE,SAASC,uBAAuB,QAAQ,eAAe;AAEvD,SAASC,2BAA2BA,CAACC,QAAQ,EAAE;EAC7C,MAAMC,KAAK,GAAGV,mBAAmB,CAACS,QAAQ,CAAC,CAACE,GAAG,CAAEC,IAAI,IAAK;IACxD,IAAIA,IAAI,CAACC,OAAO,CAACT,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;MAClC,OAAOQ,IAAI;IACb;IACA,IAAIA,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;MACrB,MAAMC,OAAO,GAAGH,IAAI,CAAC,CAAC,CAAC;MACvB,IAAIG,OAAO,KAAKV,WAAW,EAAE;QAC3B,OAAO,CAACO,IAAI,CAAC,CAAC,CAAC,EAAER,SAAS,EAAEW,OAAO,CAAC;MACtC;MACA,KAAK,MAAMC,GAAG,IAAIV,eAAe,EAAE;QACjC,MAAMW,KAAK,GAAGX,eAAe,CAACU,GAAG,CAAC;QAClC,IAAID,OAAO,IAAIE,KAAK,CAAC,CAAC,CAAC,IAAIF,OAAO,GAAGE,KAAK,CAAC,CAAC,CAAC,EAAE;UAC7C,OAAO,CAACL,IAAI,CAAC,CAAC,CAAC,EAAER,SAAS,EAAEW,OAAO,CAAC;QACtC;MACF;IACF;IACA,OAAOH,IAAI,CAACE,MAAM,KAAK,CAAC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC,EAAER,SAAS,CAAC,GAAGQ,IAAI;EACxD,CAAC,CAAC;EACF,OAAOX,kBAAkB,CAACS,KAAK,CAAC;AAClC;AACA,SAASQ,0BAA0BA,CAACC,IAAI,EAAE;EACxC,MAAMC,mBAAmB,GAAGlB,2BAA2B,CACrDC,2BAA2B,CAACgB,IAAI,CAACV,QAAQ,CAC3C,CAAC;EACD,MAAMY,MAAM,GAAG;IACb,GAAGF,IAAI;IACPV,QAAQ,EAAED,2BAA2B,CAACY,mBAAmB;EAC3D,CAAC;EACD,IAAIC,MAAM,CAACC,WAAW,EAAE;IACtBD,MAAM,CAACC,WAAW,GAAGf,uBAAuB,CAACa,mBAAmB,CAAC;EACnE;EACA,OAAOC,MAAM;AACf;AACA,SAASE,2BAA2BA,CAACC,KAAK,EAAE;EAC1C,MAAMC,OAAO,GAAG,eAAgBC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACnD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,CAACV,MAAM,EAAEc,CAAC,EAAE,EAAE;IACrC,MAAMP,MAAM,GAAGH,0BAA0B,CAACM,KAAK,CAACI,CAAC,CAAC,CAAC;IACnD,MAAMZ,GAAG,GAAGT,uBAAuB,CACjCL,2BAA2B,CAACmB,MAAM,CAACZ,QAAQ,CAC7C,CAAC;IACD,IAAI,CAACgB,OAAO,CAACT,GAAG,CAAC,IAAIS,OAAO,CAACT,GAAG,CAAC,CAACP,QAAQ,CAACK,MAAM,GAAGO,MAAM,CAACZ,QAAQ,CAACK,MAAM,EAAE;MAC1EW,OAAO,CAACT,GAAG,CAAC,GAAGK,MAAM;IACvB;EACF;EACA,OAAOK,MAAM,CAACG,MAAM,CAACJ,OAAO,CAAC;AAC/B;AAEA,SAASP,0BAA0B,EAAEK,2BAA2B,EAAEf,2BAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}