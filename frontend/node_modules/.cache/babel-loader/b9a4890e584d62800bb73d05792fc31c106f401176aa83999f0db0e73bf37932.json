{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { getEmojiCodePoint } from './convert.mjs';\nimport { joinerEmoji, vs16Emoji } from './data.mjs';\nfunction getEmojiSequenceFromString(value) {\n  return value.trim().split(/[^0-9A-F]+/i).filter(item => item.length > 0).map(getEmojiCodePoint);\n}\nfunction getSequenceFromEmojiStringOrKeyword(value) {\n  if (!value.match(/^[0-9a-fA-F-\\s]+$/)) {\n    const results = [];\n    for (const codePoint of value) {\n      const code = codePoint.codePointAt(0);\n      if (code) {\n        results.push(code);\n      } else {\n        return getEmojiSequenceFromString(value);\n      }\n    }\n    return results;\n  }\n  return getEmojiSequenceFromString(value);\n}\nfunction splitEmojiSequences(sequence, separator = joinerEmoji) {\n  const results = [];\n  let queue = [];\n  for (let i = 0; i < sequence.length; i++) {\n    const code = sequence[i];\n    if (code === separator) {\n      results.push(queue);\n      queue = [];\n    } else {\n      queue.push(code);\n    }\n  }\n  results.push(queue);\n  return results;\n}\nfunction joinEmojiSequences(sequences, separator = joinerEmoji) {\n  let results = [];\n  for (let i = 0; i < sequences.length; i++) {\n    if (i > 0) {\n      results.push(separator);\n    }\n    results = results.concat(sequences[i]);\n  }\n  return results;\n}\nfunction getUnqualifiedEmojiSequence(sequence) {\n  return sequence.filter(num => num !== vs16Emoji);\n}\nexport { getEmojiSequenceFromString, getSequenceFromEmojiStringOrKeyword, getUnqualifiedEmojiSequence, joinEmojiSequences, splitEmojiSequences };","map":{"version":3,"names":["getEmojiCodePoint","joinerEmoji","vs16Emoji","getEmojiSequenceFromString","value","trim","split","filter","item","length","map","getSequenceFromEmojiStringOrKeyword","match","results","codePoint","code","codePointAt","push","splitEmojiSequences","sequence","separator","queue","i","joinEmojiSequences","sequences","concat","getUnqualifiedEmojiSequence","num"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/emoji/cleanup.mjs"],"sourcesContent":["import { getEmojiCodePoint } from './convert.mjs';\nimport { joinerEmoji, vs16Emoji } from './data.mjs';\n\nfunction getEmojiSequenceFromString(value) {\n  return value.trim().split(/[^0-9A-F]+/i).filter((item) => item.length > 0).map(getEmojiCodePoint);\n}\nfunction getSequenceFromEmojiStringOrKeyword(value) {\n  if (!value.match(/^[0-9a-fA-F-\\s]+$/)) {\n    const results = [];\n    for (const codePoint of value) {\n      const code = codePoint.codePointAt(0);\n      if (code) {\n        results.push(code);\n      } else {\n        return getEmojiSequenceFromString(value);\n      }\n    }\n    return results;\n  }\n  return getEmojiSequenceFromString(value);\n}\nfunction splitEmojiSequences(sequence, separator = joinerEmoji) {\n  const results = [];\n  let queue = [];\n  for (let i = 0; i < sequence.length; i++) {\n    const code = sequence[i];\n    if (code === separator) {\n      results.push(queue);\n      queue = [];\n    } else {\n      queue.push(code);\n    }\n  }\n  results.push(queue);\n  return results;\n}\nfunction joinEmojiSequences(sequences, separator = joinerEmoji) {\n  let results = [];\n  for (let i = 0; i < sequences.length; i++) {\n    if (i > 0) {\n      results.push(separator);\n    }\n    results = results.concat(sequences[i]);\n  }\n  return results;\n}\nfunction getUnqualifiedEmojiSequence(sequence) {\n  return sequence.filter((num) => num !== vs16Emoji);\n}\n\nexport { getEmojiSequenceFromString, getSequenceFromEmojiStringOrKeyword, getUnqualifiedEmojiSequence, joinEmojiSequences, splitEmojiSequences };\n"],"mappings":";;;;AAAA,SAASA,iBAAiB,QAAQ,eAAe;AACjD,SAASC,WAAW,EAAEC,SAAS,QAAQ,YAAY;AAEnD,SAASC,0BAA0BA,CAACC,KAAK,EAAE;EACzC,OAAOA,KAAK,CAACC,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,aAAa,CAAC,CAACC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC,CAACC,GAAG,CAACV,iBAAiB,CAAC;AACnG;AACA,SAASW,mCAAmCA,CAACP,KAAK,EAAE;EAClD,IAAI,CAACA,KAAK,CAACQ,KAAK,CAAC,mBAAmB,CAAC,EAAE;IACrC,MAAMC,OAAO,GAAG,EAAE;IAClB,KAAK,MAAMC,SAAS,IAAIV,KAAK,EAAE;MAC7B,MAAMW,IAAI,GAAGD,SAAS,CAACE,WAAW,CAAC,CAAC,CAAC;MACrC,IAAID,IAAI,EAAE;QACRF,OAAO,CAACI,IAAI,CAACF,IAAI,CAAC;MACpB,CAAC,MAAM;QACL,OAAOZ,0BAA0B,CAACC,KAAK,CAAC;MAC1C;IACF;IACA,OAAOS,OAAO;EAChB;EACA,OAAOV,0BAA0B,CAACC,KAAK,CAAC;AAC1C;AACA,SAASc,mBAAmBA,CAACC,QAAQ,EAAEC,SAAS,GAAGnB,WAAW,EAAE;EAC9D,MAAMY,OAAO,GAAG,EAAE;EAClB,IAAIQ,KAAK,GAAG,EAAE;EACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAACV,MAAM,EAAEa,CAAC,EAAE,EAAE;IACxC,MAAMP,IAAI,GAAGI,QAAQ,CAACG,CAAC,CAAC;IACxB,IAAIP,IAAI,KAAKK,SAAS,EAAE;MACtBP,OAAO,CAACI,IAAI,CAACI,KAAK,CAAC;MACnBA,KAAK,GAAG,EAAE;IACZ,CAAC,MAAM;MACLA,KAAK,CAACJ,IAAI,CAACF,IAAI,CAAC;IAClB;EACF;EACAF,OAAO,CAACI,IAAI,CAACI,KAAK,CAAC;EACnB,OAAOR,OAAO;AAChB;AACA,SAASU,kBAAkBA,CAACC,SAAS,EAAEJ,SAAS,GAAGnB,WAAW,EAAE;EAC9D,IAAIY,OAAO,GAAG,EAAE;EAChB,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,SAAS,CAACf,MAAM,EAAEa,CAAC,EAAE,EAAE;IACzC,IAAIA,CAAC,GAAG,CAAC,EAAE;MACTT,OAAO,CAACI,IAAI,CAACG,SAAS,CAAC;IACzB;IACAP,OAAO,GAAGA,OAAO,CAACY,MAAM,CAACD,SAAS,CAACF,CAAC,CAAC,CAAC;EACxC;EACA,OAAOT,OAAO;AAChB;AACA,SAASa,2BAA2BA,CAACP,QAAQ,EAAE;EAC7C,OAAOA,QAAQ,CAACZ,MAAM,CAAEoB,GAAG,IAAKA,GAAG,KAAKzB,SAAS,CAAC;AACpD;AAEA,SAASC,0BAA0B,EAAEQ,mCAAmC,EAAEe,2BAA2B,EAAEH,kBAAkB,EAAEL,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}