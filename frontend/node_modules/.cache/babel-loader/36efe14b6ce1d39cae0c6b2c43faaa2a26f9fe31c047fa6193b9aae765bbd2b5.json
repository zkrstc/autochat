{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { convertEmojiSequenceToUTF32 } from '../convert.mjs';\nimport { vs16Emoji } from '../data.mjs';\nimport { getEmojiSequenceKeyword } from '../format.mjs';\nfunction createEmojiRegExp(regexp) {\n  return new RegExp(regexp, \"g\");\n}\nfunction getEmojiMatchesInText(regexp, content) {\n  const results = [];\n  const found = /* @__PURE__ */new Set();\n  (regexp instanceof Array ? regexp : [regexp]).forEach((regexp2, index) => {\n    const matches = content.match(typeof regexp2 === \"string\" ? createEmojiRegExp(regexp2) : regexp2);\n    if (matches) {\n      for (let i = 0; i < matches.length; i++) {\n        const match = matches[i];\n        if (found.has(match)) {\n          continue;\n        }\n        found.add(match);\n        const sequence = [];\n        for (const codePoint of match) {\n          const num = codePoint.codePointAt(0);\n          if (num !== vs16Emoji) {\n            sequence.push(num);\n          }\n        }\n        results.push({\n          match,\n          sequence,\n          keyword: getEmojiSequenceKeyword(convertEmojiSequenceToUTF32(sequence)),\n          regexp: index\n        });\n      }\n    }\n  });\n  results.sort((a, b) => {\n    const match1 = a.match;\n    const match2 = b.match;\n    if (match2.length === match1.length) {\n      return match1.localeCompare(match2);\n    }\n    return match2.length - match1.length;\n  });\n  return results;\n}\nfunction sortEmojiMatchesInText(content, matches) {\n  const ranges = [];\n  const check = (start, end) => {\n    for (let i = 0; i < ranges.length; i++) {\n      if (start < ranges[i].end && end > ranges[i].start) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 0; i < matches.length; i++) {\n    const match = matches[i];\n    const search = match.match;\n    let startFrom = 0;\n    let start;\n    while ((start = content.indexOf(search, startFrom)) !== -1) {\n      const end = start + search.length;\n      startFrom = end;\n      if (check(start, end)) {\n        ranges.push({\n          start,\n          end,\n          match\n        });\n      }\n    }\n  }\n  ranges.sort((a, b) => a.start - b.start);\n  const list = [];\n  let prevRange;\n  let lastEnd;\n  for (let i = 0; i < ranges.length; i++) {\n    const range = ranges[i];\n    const prev = content.slice(prevRange ? prevRange.end : 0, range.start);\n    list.push({\n      match: range.match,\n      prev\n    });\n    prevRange = range;\n    lastEnd = range.end;\n  }\n  if (!lastEnd) {\n    return [];\n  }\n  const replacements = list.map((item, index) => {\n    const nextItem = list[index + 1];\n    return {\n      ...item,\n      next: nextItem ? nextItem.prev : content.slice(lastEnd)\n    };\n  });\n  return replacements;\n}\nexport { createEmojiRegExp, getEmojiMatchesInText, sortEmojiMatchesInText };","map":{"version":3,"names":["convertEmojiSequenceToUTF32","vs16Emoji","getEmojiSequenceKeyword","createEmojiRegExp","regexp","RegExp","getEmojiMatchesInText","content","results","found","Set","Array","forEach","regexp2","index","matches","match","i","length","has","add","sequence","codePoint","num","codePointAt","push","keyword","sort","a","b","match1","match2","localeCompare","sortEmojiMatchesInText","ranges","check","start","end","search","startFrom","indexOf","list","prevRange","lastEnd","range","prev","slice","replacements","map","item","nextItem","next"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/emoji/replace/find.mjs"],"sourcesContent":["import { convertEmojiSequenceToUTF32 } from '../convert.mjs';\nimport { vs16Emoji } from '../data.mjs';\nimport { getEmojiSequenceKeyword } from '../format.mjs';\n\nfunction createEmojiRegExp(regexp) {\n  return new RegExp(regexp, \"g\");\n}\nfunction getEmojiMatchesInText(regexp, content) {\n  const results = [];\n  const found = /* @__PURE__ */ new Set();\n  (regexp instanceof Array ? regexp : [regexp]).forEach((regexp2, index) => {\n    const matches = content.match(\n      typeof regexp2 === \"string\" ? createEmojiRegExp(regexp2) : regexp2\n    );\n    if (matches) {\n      for (let i = 0; i < matches.length; i++) {\n        const match = matches[i];\n        if (found.has(match)) {\n          continue;\n        }\n        found.add(match);\n        const sequence = [];\n        for (const codePoint of match) {\n          const num = codePoint.codePointAt(0);\n          if (num !== vs16Emoji) {\n            sequence.push(num);\n          }\n        }\n        results.push({\n          match,\n          sequence,\n          keyword: getEmojiSequenceKeyword(\n            convertEmojiSequenceToUTF32(sequence)\n          ),\n          regexp: index\n        });\n      }\n    }\n  });\n  results.sort((a, b) => {\n    const match1 = a.match;\n    const match2 = b.match;\n    if (match2.length === match1.length) {\n      return match1.localeCompare(match2);\n    }\n    return match2.length - match1.length;\n  });\n  return results;\n}\nfunction sortEmojiMatchesInText(content, matches) {\n  const ranges = [];\n  const check = (start, end) => {\n    for (let i = 0; i < ranges.length; i++) {\n      if (start < ranges[i].end && end > ranges[i].start) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 0; i < matches.length; i++) {\n    const match = matches[i];\n    const search = match.match;\n    let startFrom = 0;\n    let start;\n    while ((start = content.indexOf(search, startFrom)) !== -1) {\n      const end = start + search.length;\n      startFrom = end;\n      if (check(start, end)) {\n        ranges.push({\n          start,\n          end,\n          match\n        });\n      }\n    }\n  }\n  ranges.sort((a, b) => a.start - b.start);\n  const list = [];\n  let prevRange;\n  let lastEnd;\n  for (let i = 0; i < ranges.length; i++) {\n    const range = ranges[i];\n    const prev = content.slice(prevRange ? prevRange.end : 0, range.start);\n    list.push({\n      match: range.match,\n      prev\n    });\n    prevRange = range;\n    lastEnd = range.end;\n  }\n  if (!lastEnd) {\n    return [];\n  }\n  const replacements = list.map((item, index) => {\n    const nextItem = list[index + 1];\n    return {\n      ...item,\n      next: nextItem ? nextItem.prev : content.slice(lastEnd)\n    };\n  });\n  return replacements;\n}\n\nexport { createEmojiRegExp, getEmojiMatchesInText, sortEmojiMatchesInText };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}