{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst regex = /\\sid=\"(\\S+)\"/g;\nconst randomPrefix = \"IconifyId\" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);\nlet counter = 0;\nfunction replaceIDs(body, prefix = randomPrefix) {\n  const ids = [];\n  let match;\n  while (match = regex.exec(body)) {\n    ids.push(match[1]);\n  }\n  if (!ids.length) {\n    return body;\n  }\n  const suffix = \"suffix\" + (Math.random() * 16777216 | Date.now()).toString(16);\n  ids.forEach(id => {\n    const newID = typeof prefix === \"function\" ? prefix(id) : prefix + (counter++).toString();\n    const escapedID = id.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n    body = body.replace(\n    // Allowed characters before id: [#;\"]\n    // Allowed characters after id: [)\"], .[a-z]\n    new RegExp('([#;\"])(' + escapedID + ')([\")]|\\\\.[a-z])', \"g\"), \"$1\" + newID + suffix + \"$3\");\n  });\n  body = body.replace(new RegExp(suffix, \"g\"), \"\");\n  return body;\n}\nexport { replaceIDs };","map":{"version":3,"names":["regex","randomPrefix","Date","now","toString","Math","random","counter","replaceIDs","body","prefix","ids","match","exec","push","length","suffix","forEach","id","newID","escapedID","replace","RegExp"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/svg/id.mjs"],"sourcesContent":["const regex = /\\sid=\"(\\S+)\"/g;\nconst randomPrefix = \"IconifyId\" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);\nlet counter = 0;\nfunction replaceIDs(body, prefix = randomPrefix) {\n  const ids = [];\n  let match;\n  while (match = regex.exec(body)) {\n    ids.push(match[1]);\n  }\n  if (!ids.length) {\n    return body;\n  }\n  const suffix = \"suffix\" + (Math.random() * 16777216 | Date.now()).toString(16);\n  ids.forEach((id) => {\n    const newID = typeof prefix === \"function\" ? prefix(id) : prefix + (counter++).toString();\n    const escapedID = id.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n    body = body.replace(\n      // Allowed characters before id: [#;\"]\n      // Allowed characters after id: [)\"], .[a-z]\n      new RegExp('([#;\"])(' + escapedID + ')([\")]|\\\\.[a-z])', \"g\"),\n      \"$1\" + newID + suffix + \"$3\"\n    );\n  });\n  body = body.replace(new RegExp(suffix, \"g\"), \"\");\n  return body;\n}\n\nexport { replaceIDs };\n"],"mappings":";AAAA,MAAMA,KAAK,GAAG,eAAe;AAC7B,MAAMC,YAAY,GAAG,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,QAAQ,GAAG,CAAC,EAAEF,QAAQ,CAAC,EAAE,CAAC;AACxG,IAAIG,OAAO,GAAG,CAAC;AACf,SAASC,UAAUA,CAACC,IAAI,EAAEC,MAAM,GAAGT,YAAY,EAAE;EAC/C,MAAMU,GAAG,GAAG,EAAE;EACd,IAAIC,KAAK;EACT,OAAOA,KAAK,GAAGZ,KAAK,CAACa,IAAI,CAACJ,IAAI,CAAC,EAAE;IAC/BE,GAAG,CAACG,IAAI,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;EACpB;EACA,IAAI,CAACD,GAAG,CAACI,MAAM,EAAE;IACf,OAAON,IAAI;EACb;EACA,MAAMO,MAAM,GAAG,QAAQ,GAAG,CAACX,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,QAAQ,GAAGJ,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEC,QAAQ,CAAC,EAAE,CAAC;EAC9EO,GAAG,CAACM,OAAO,CAAEC,EAAE,IAAK;IAClB,MAAMC,KAAK,GAAG,OAAOT,MAAM,KAAK,UAAU,GAAGA,MAAM,CAACQ,EAAE,CAAC,GAAGR,MAAM,GAAG,CAACH,OAAO,EAAE,EAAEH,QAAQ,CAAC,CAAC;IACzF,MAAMgB,SAAS,GAAGF,EAAE,CAACG,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC;IAC3DZ,IAAI,GAAGA,IAAI,CAACY,OAAO;IACjB;IACA;IACA,IAAIC,MAAM,CAAC,UAAU,GAAGF,SAAS,GAAG,kBAAkB,EAAE,GAAG,CAAC,EAC5D,IAAI,GAAGD,KAAK,GAAGH,MAAM,GAAG,IAC1B,CAAC;EACH,CAAC,CAAC;EACFP,IAAI,GAAGA,IAAI,CAACY,OAAO,CAAC,IAAIC,MAAM,CAACN,MAAM,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;EAChD,OAAOP,IAAI;AACb;AAEA,SAASD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}