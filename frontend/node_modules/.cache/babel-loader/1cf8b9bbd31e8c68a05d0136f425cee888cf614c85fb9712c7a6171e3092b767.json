{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { getUnqualifiedEmojiSequence } from '../cleanup.mjs';\nimport { emojiComponents } from '../data.mjs';\nimport { getEmojiSequenceKeyword } from '../format.mjs';\nimport { replaceEmojiComponentsInCombinedSequence } from './components.mjs';\nimport '../convert.mjs';\nfunction findMissingEmojis(sequences, testDataTree) {\n  const results = [];\n  const existingItems = /* @__PURE__ */Object.create(null);\n  const copiedItems = /* @__PURE__ */Object.create(null);\n  sequences.forEach(item => {\n    const sequence = getUnqualifiedEmojiSequence(item.sequence);\n    const key = getEmojiSequenceKeyword(sequence);\n    if (!existingItems[key] ||\n    // If multiple matches for same sequence exist, use longest version\n    existingItems[key].sequence.length < item.sequence.length) {\n      existingItems[key] = item;\n    }\n  });\n  const iterate = (type, parentTree, parentValues, parentItem, deep) => {\n    const childTree = parentTree.children?.[type];\n    if (!childTree) {\n      return;\n    }\n    const range = emojiComponents[type];\n    for (let number = range[0]; number < range[1]; number++) {\n      const values = {\n        \"hair-style\": [...parentValues[\"hair-style\"]],\n        \"skin-tone\": [...parentValues[\"skin-tone\"]]\n      };\n      values[type].push(number);\n      const sequence = replaceEmojiComponentsInCombinedSequence(childTree.item.sequence, values);\n      const key = getEmojiSequenceKeyword(getUnqualifiedEmojiSequence(sequence));\n      const oldItem = existingItems[key];\n      let item;\n      if (oldItem) {\n        item = oldItem;\n      } else {\n        item = copiedItems[key];\n        if (!item) {\n          item = {\n            ...parentItem,\n            sequence\n          };\n          if (item.sequenceKey) {\n            item.sequenceKey = key;\n          }\n          copiedItems[key] = item;\n          results.push(item);\n        }\n      }\n      if (deep || oldItem) {\n        for (const key2 in values) {\n          iterate(key2, childTree, values, item, deep);\n        }\n      }\n    }\n  };\n  const parse = (key, deep) => {\n    const treeItem = testDataTree[key];\n    const sequenceKey = treeItem.item.sequenceKey;\n    const rootItem = existingItems[sequenceKey];\n    if (!rootItem) {\n      return;\n    }\n    const values = {\n      \"skin-tone\": [],\n      \"hair-style\": []\n    };\n    for (const key2 in values) {\n      iterate(key2, treeItem, values, rootItem, deep);\n    }\n  };\n  for (const key in testDataTree) {\n    parse(key, false);\n    parse(key, true);\n  }\n  return results;\n}\nexport { findMissingEmojis };","map":{"version":3,"names":["getUnqualifiedEmojiSequence","emojiComponents","getEmojiSequenceKeyword","replaceEmojiComponentsInCombinedSequence","findMissingEmojis","sequences","testDataTree","results","existingItems","Object","create","copiedItems","forEach","item","sequence","key","length","iterate","type","parentTree","parentValues","parentItem","deep","childTree","children","range","number","values","push","oldItem","sequenceKey","key2","parse","treeItem","rootItem"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/emoji/test/missing.mjs"],"sourcesContent":["import { getUnqualifiedEmojiSequence } from '../cleanup.mjs';\nimport { emojiComponents } from '../data.mjs';\nimport { getEmojiSequenceKeyword } from '../format.mjs';\nimport { replaceEmojiComponentsInCombinedSequence } from './components.mjs';\nimport '../convert.mjs';\n\nfunction findMissingEmojis(sequences, testDataTree) {\n  const results = [];\n  const existingItems = /* @__PURE__ */ Object.create(null);\n  const copiedItems = /* @__PURE__ */ Object.create(null);\n  sequences.forEach((item) => {\n    const sequence = getUnqualifiedEmojiSequence(item.sequence);\n    const key = getEmojiSequenceKeyword(sequence);\n    if (!existingItems[key] || // If multiple matches for same sequence exist, use longest version\n    existingItems[key].sequence.length < item.sequence.length) {\n      existingItems[key] = item;\n    }\n  });\n  const iterate = (type, parentTree, parentValues, parentItem, deep) => {\n    const childTree = parentTree.children?.[type];\n    if (!childTree) {\n      return;\n    }\n    const range = emojiComponents[type];\n    for (let number = range[0]; number < range[1]; number++) {\n      const values = {\n        \"hair-style\": [...parentValues[\"hair-style\"]],\n        \"skin-tone\": [...parentValues[\"skin-tone\"]]\n      };\n      values[type].push(number);\n      const sequence = replaceEmojiComponentsInCombinedSequence(\n        childTree.item.sequence,\n        values\n      );\n      const key = getEmojiSequenceKeyword(\n        getUnqualifiedEmojiSequence(sequence)\n      );\n      const oldItem = existingItems[key];\n      let item;\n      if (oldItem) {\n        item = oldItem;\n      } else {\n        item = copiedItems[key];\n        if (!item) {\n          item = {\n            ...parentItem,\n            sequence\n          };\n          if (item.sequenceKey) {\n            item.sequenceKey = key;\n          }\n          copiedItems[key] = item;\n          results.push(item);\n        }\n      }\n      if (deep || oldItem) {\n        for (const key2 in values) {\n          iterate(\n            key2,\n            childTree,\n            values,\n            item,\n            deep\n          );\n        }\n      }\n    }\n  };\n  const parse = (key, deep) => {\n    const treeItem = testDataTree[key];\n    const sequenceKey = treeItem.item.sequenceKey;\n    const rootItem = existingItems[sequenceKey];\n    if (!rootItem) {\n      return;\n    }\n    const values = {\n      \"skin-tone\": [],\n      \"hair-style\": []\n    };\n    for (const key2 in values) {\n      iterate(\n        key2,\n        treeItem,\n        values,\n        rootItem,\n        deep\n      );\n    }\n  };\n  for (const key in testDataTree) {\n    parse(key, false);\n    parse(key, true);\n  }\n  return results;\n}\n\nexport { findMissingEmojis };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}