{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { colorKeywords } from './keywords.mjs';\nfunction rgb2hsl(rgb) {\n  const c1 = rgb.r / 255,\n    c2 = rgb.g / 255,\n    c3 = rgb.b / 255,\n    kmin = Math.min(c1, Math.min(c2, c3)),\n    kmax = Math.max(c1, Math.max(c2, c3)),\n    l = (kmax + kmin) / 2;\n  let s, h, delta;\n  if (kmax === kmin) {\n    s = h = 0;\n  } else {\n    if (l < 0.5) {\n      s = (kmax - kmin) / (kmax + kmin);\n    } else {\n      s = (kmax - kmin) / (2 - kmax - kmin);\n    }\n    delta = kmax - kmin;\n    if (kmax === c1) {\n      h = (c2 - c3) / delta;\n    } else if (kmax === c2) {\n      h = 2 + (c3 - c1) / delta;\n    } else {\n      h = 4 + (c1 - c2) / delta;\n    }\n    h = h * 60;\n    if (h < 0) {\n      h += 360;\n    }\n  }\n  return {\n    type: \"hsl\",\n    h,\n    s: s * 100,\n    l: l * 100,\n    alpha: rgb.alpha\n  };\n}\nfunction fromFunction(value) {\n  if (value.slice(-1) !== \")\") {\n    return null;\n  }\n  const parts = value.slice(0, value.length - 1).split(\"(\");\n  if (parts.length !== 2) {\n    return null;\n  }\n  const func = parts[0].trim();\n  const content = parts[1].trim();\n  let values;\n  let alphaStr;\n  switch (func) {\n    case \"lch\":\n    case \"lab\":\n      {\n        const parts2 = content.split(\"/\");\n        switch (parts2.length) {\n          case 2:\n            alphaStr = parts2[1].trim();\n            break;\n          case 1:\n            break;\n          default:\n            return null;\n        }\n        values = parts2[0].trim().split(/[\\s,]+/);\n        break;\n      }\n    case \"rgb\":\n    case \"rgba\":\n    case \"hsl\":\n    case \"hsla\":\n      {\n        values = content.trim().split(/[\\s,]+/);\n        if (values.length === 4) {\n          alphaStr = values.pop().trim();\n        }\n        break;\n      }\n    default:\n      {\n        return {\n          type: \"function\",\n          func,\n          value: content\n        };\n      }\n  }\n  let alpha = 1;\n  if (typeof alphaStr === \"string\") {\n    alpha = parseFloat(alphaStr);\n    const index = alphaStr.indexOf(\"%\");\n    const hasPercentage = index !== -1;\n    if (isNaN(alpha) || hasPercentage && index !== alphaStr.length - 1) {\n      return null;\n    }\n    if (hasPercentage) {\n      alpha /= 100;\n    }\n  }\n  if (alpha < 0 || alpha > 1 || values.length !== 3) {\n    return null;\n  }\n  if (alpha === 0) {\n    return {\n      type: \"transparent\"\n    };\n  }\n  const isPercentage = [];\n  const numbers = [];\n  for (let i = 0; i < 3; i++) {\n    const colorStr = values[i];\n    const index = colorStr.indexOf(\"%\");\n    const hasPercentage = index !== -1;\n    if (hasPercentage && index !== colorStr.length - 1) {\n      return null;\n    }\n    const colorNum = parseFloat(colorStr);\n    if (isNaN(colorNum)) {\n      return null;\n    }\n    isPercentage.push(hasPercentage);\n    numbers.push(colorNum);\n  }\n  switch (func) {\n    case \"rgb\":\n    case \"rgba\":\n      {\n        const hasPercengage = isPercentage[0];\n        if (hasPercengage !== isPercentage[1] || hasPercengage !== isPercentage[2]) {\n          return null;\n        }\n        let r = numbers[0];\n        let g = numbers[1];\n        let b = numbers[2];\n        if (hasPercengage) {\n          r = r * 255 / 100;\n          g = g * 255 / 100;\n          b = b * 255 / 100;\n        }\n        return {\n          type: \"rgb\",\n          r,\n          g,\n          b,\n          alpha\n        };\n      }\n    case \"hsl\":\n    case \"hsla\":\n      {\n        if (isPercentage[0] || !isPercentage[1] || !isPercentage[2]) {\n          return null;\n        }\n        return {\n          type: \"hsl\",\n          h: numbers[0],\n          s: numbers[1],\n          l: numbers[2],\n          alpha\n        };\n      }\n    case \"lab\":\n    case \"lch\":\n      {\n        if (!isPercentage[0] || isPercentage[1] || isPercentage[2]) {\n          return null;\n        }\n        return func === \"lab\" ? {\n          type: \"lab\",\n          l: numbers[0],\n          a: numbers[1],\n          b: numbers[2],\n          alpha\n        } : {\n          type: \"lch\",\n          l: numbers[0],\n          c: numbers[1],\n          h: numbers[2],\n          alpha\n        };\n      }\n  }\n  return null;\n}\nfunction fromHex(value) {\n  if (value.slice(0, 1) === \"#\") {\n    value = value.slice(1);\n  }\n  if (!/^[\\da-f]+$/i.test(value)) {\n    return null;\n  }\n  let alpha = 1;\n  const hex = [\"\", \"\", \"\"];\n  switch (value.length) {\n    case 4:\n      {\n        alpha = parseInt(value[3] + value[3], 16) / 255;\n      }\n    case 3:\n      {\n        hex[0] = value[0] + value[0];\n        hex[1] = value[1] + value[1];\n        hex[2] = value[2] + value[2];\n        break;\n      }\n    case 8:\n      {\n        alpha = parseInt(value[6] + value[7], 16) / 255;\n      }\n    case 6:\n      {\n        hex[0] = value[0] + value[1];\n        hex[1] = value[2] + value[3];\n        hex[2] = value[4] + value[5];\n        break;\n      }\n    default:\n      return null;\n  }\n  return alpha === 0 ? {\n    type: \"transparent\"\n  } : {\n    type: \"rgb\",\n    r: parseInt(hex[0], 16),\n    g: parseInt(hex[1], 16),\n    b: parseInt(hex[2], 16),\n    alpha\n  };\n}\nfunction stringToColor(value) {\n  value = value.toLowerCase().trim();\n  if (colorKeywords[value]) {\n    return {\n      ...colorKeywords[value]\n    };\n  }\n  if (value.indexOf(\"(\") !== -1) {\n    return fromFunction(value);\n  }\n  return fromHex(value);\n}\nfunction compareColors(color1, color2) {\n  if (color1.type === color2.type) {\n    let testKeys = new Set(Object.keys(color1));\n    switch (color1.type) {\n      case \"hsl\":\n        {\n          if (color1.s === 0) {\n            testKeys.delete(\"h\");\n          }\n          if (color1.l === 0 || color1.l === 100) {\n            testKeys.delete(\"h\");\n            testKeys.delete(\"s\");\n          }\n        }\n      case \"rgb\":\n        if (color1.alpha === 0) {\n          testKeys = /* @__PURE__ */new Set([\"a\"]);\n        }\n    }\n    const keys = Array.from(testKeys);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (color1[key] !== color2[key]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  const list = [color1, color2].sort((a, b) => a.type.localeCompare(b.type));\n  const item1 = list[0];\n  const item2 = list[1];\n  switch (item1.type) {\n    case \"hsl\":\n      {\n        switch (item2.type) {\n          case \"rgb\":\n            {\n              return compareColors(item1, rgb2hsl(item2));\n            }\n          case \"transparent\":\n            return item1.alpha === 0;\n        }\n        return false;\n      }\n    case \"rgb\":\n      {\n        switch (item2.type) {\n          case \"transparent\":\n            return item1.alpha === 0;\n        }\n      }\n  }\n  return false;\n}\nfunction colorToHexString(color, canCompact = true) {\n  if (color.alpha !== 1) {\n    return null;\n  }\n  let result = \"\";\n  const attrs = [\"r\", \"g\", \"b\"];\n  for (let i = 0; i < attrs.length; i++) {\n    const value = color[attrs[i]];\n    if (Math.round(value) !== value) {\n      return null;\n    }\n    const hex = value.toString(16);\n    result += (value < 16 ? \"0\" : \"\") + hex;\n  }\n  if (result.length !== 6) {\n    return null;\n  }\n  if (canCompact && result[0] === result[1] && result[2] === result[3] && result[4] === result[5]) {\n    result = result[0] + result[2] + result[4];\n  }\n  return \"#\" + result;\n}\nfunction colorToString(color) {\n  if (color.alpha === 0) {\n    return \"transparent\";\n  }\n  switch (color.type) {\n    case \"none\":\n    case \"transparent\":\n      return color.type;\n    case \"current\":\n      return \"currentColor\";\n    case \"rgb\":\n      {\n        const hex = colorToHexString(color);\n        if (hex !== null) {\n          return hex;\n        }\n        const list = [color.r, color.g, color.b];\n        if (color.alpha !== 1) {\n          list.push(color.alpha);\n        }\n        return \"rgb\" + (list.length === 4 ? \"a(\" : \"(\") + list.join(\", \") + \")\";\n      }\n    case \"hsl\":\n      {\n        const list = [color.h, color.s.toString() + \"%\", color.l.toString() + \"%\"];\n        if (color.alpha !== 1) {\n          list.push(color.alpha);\n        }\n        return \"hsl\" + (list.length === 4 ? \"a(\" : \"(\") + list.join(\", \") + \")\";\n      }\n    case \"lab\":\n      {\n        const list = [color.l.toString() + \"%\", color.a, color.b];\n        if (color.alpha !== 1) {\n          list.push(\"/ \" + color.alpha.toString());\n        }\n        return \"lab(\" + list.join(\" \") + \")\";\n      }\n    case \"lch\":\n      {\n        const list = [color.l.toString() + \"%\", color.c, color.h];\n        if (color.alpha !== 1) {\n          list.push(\"/ \" + color.alpha.toString());\n        }\n        return \"lch(\" + list.join(\" \") + \")\";\n      }\n    case \"function\":\n      {\n        return color.func + \"(\" + color.value + \")\";\n      }\n  }\n}\nexport { colorToHexString, colorToString, compareColors, stringToColor };","map":{"version":3,"names":["colorKeywords","rgb2hsl","rgb","c1","r","c2","g","c3","b","kmin","Math","min","kmax","max","l","s","h","delta","type","alpha","fromFunction","value","slice","parts","length","split","func","trim","content","values","alphaStr","parts2","pop","parseFloat","index","indexOf","hasPercentage","isNaN","isPercentage","numbers","i","colorStr","colorNum","push","hasPercengage","a","c","fromHex","test","hex","parseInt","stringToColor","toLowerCase","compareColors","color1","color2","testKeys","Set","Object","keys","delete","Array","from","key","list","sort","localeCompare","item1","item2","colorToHexString","color","canCompact","result","attrs","round","toString","colorToString","join"],"sources":["C:/Users/ASUS/Desktop/autochat/frontend/node_modules/@iconify/utils/lib/colors/index.mjs"],"sourcesContent":["import { colorKeywords } from './keywords.mjs';\n\nfunction rgb2hsl(rgb) {\n  const c1 = rgb.r / 255, c2 = rgb.g / 255, c3 = rgb.b / 255, kmin = Math.min(c1, Math.min(c2, c3)), kmax = Math.max(c1, Math.max(c2, c3)), l = (kmax + kmin) / 2;\n  let s, h, delta;\n  if (kmax === kmin) {\n    s = h = 0;\n  } else {\n    if (l < 0.5) {\n      s = (kmax - kmin) / (kmax + kmin);\n    } else {\n      s = (kmax - kmin) / (2 - kmax - kmin);\n    }\n    delta = kmax - kmin;\n    if (kmax === c1) {\n      h = (c2 - c3) / delta;\n    } else if (kmax === c2) {\n      h = 2 + (c3 - c1) / delta;\n    } else {\n      h = 4 + (c1 - c2) / delta;\n    }\n    h = h * 60;\n    if (h < 0) {\n      h += 360;\n    }\n  }\n  return {\n    type: \"hsl\",\n    h,\n    s: s * 100,\n    l: l * 100,\n    alpha: rgb.alpha\n  };\n}\nfunction fromFunction(value) {\n  if (value.slice(-1) !== \")\") {\n    return null;\n  }\n  const parts = value.slice(0, value.length - 1).split(\"(\");\n  if (parts.length !== 2) {\n    return null;\n  }\n  const func = parts[0].trim();\n  const content = parts[1].trim();\n  let values;\n  let alphaStr;\n  switch (func) {\n    case \"lch\":\n    case \"lab\": {\n      const parts2 = content.split(\"/\");\n      switch (parts2.length) {\n        case 2:\n          alphaStr = parts2[1].trim();\n          break;\n        case 1:\n          break;\n        default:\n          return null;\n      }\n      values = parts2[0].trim().split(/[\\s,]+/);\n      break;\n    }\n    case \"rgb\":\n    case \"rgba\":\n    case \"hsl\":\n    case \"hsla\": {\n      values = content.trim().split(/[\\s,]+/);\n      if (values.length === 4) {\n        alphaStr = values.pop().trim();\n      }\n      break;\n    }\n    default: {\n      return {\n        type: \"function\",\n        func,\n        value: content\n      };\n    }\n  }\n  let alpha = 1;\n  if (typeof alphaStr === \"string\") {\n    alpha = parseFloat(alphaStr);\n    const index = alphaStr.indexOf(\"%\");\n    const hasPercentage = index !== -1;\n    if (isNaN(alpha) || hasPercentage && index !== alphaStr.length - 1) {\n      return null;\n    }\n    if (hasPercentage) {\n      alpha /= 100;\n    }\n  }\n  if (alpha < 0 || alpha > 1 || values.length !== 3) {\n    return null;\n  }\n  if (alpha === 0) {\n    return {\n      type: \"transparent\"\n    };\n  }\n  const isPercentage = [];\n  const numbers = [];\n  for (let i = 0; i < 3; i++) {\n    const colorStr = values[i];\n    const index = colorStr.indexOf(\"%\");\n    const hasPercentage = index !== -1;\n    if (hasPercentage && index !== colorStr.length - 1) {\n      return null;\n    }\n    const colorNum = parseFloat(colorStr);\n    if (isNaN(colorNum)) {\n      return null;\n    }\n    isPercentage.push(hasPercentage);\n    numbers.push(colorNum);\n  }\n  switch (func) {\n    case \"rgb\":\n    case \"rgba\": {\n      const hasPercengage = isPercentage[0];\n      if (hasPercengage !== isPercentage[1] || hasPercengage !== isPercentage[2]) {\n        return null;\n      }\n      let r = numbers[0];\n      let g = numbers[1];\n      let b = numbers[2];\n      if (hasPercengage) {\n        r = r * 255 / 100;\n        g = g * 255 / 100;\n        b = b * 255 / 100;\n      }\n      return {\n        type: \"rgb\",\n        r,\n        g,\n        b,\n        alpha\n      };\n    }\n    case \"hsl\":\n    case \"hsla\": {\n      if (isPercentage[0] || !isPercentage[1] || !isPercentage[2]) {\n        return null;\n      }\n      return {\n        type: \"hsl\",\n        h: numbers[0],\n        s: numbers[1],\n        l: numbers[2],\n        alpha\n      };\n    }\n    case \"lab\":\n    case \"lch\": {\n      if (!isPercentage[0] || isPercentage[1] || isPercentage[2]) {\n        return null;\n      }\n      return func === \"lab\" ? {\n        type: \"lab\",\n        l: numbers[0],\n        a: numbers[1],\n        b: numbers[2],\n        alpha\n      } : {\n        type: \"lch\",\n        l: numbers[0],\n        c: numbers[1],\n        h: numbers[2],\n        alpha\n      };\n    }\n  }\n  return null;\n}\nfunction fromHex(value) {\n  if (value.slice(0, 1) === \"#\") {\n    value = value.slice(1);\n  }\n  if (!/^[\\da-f]+$/i.test(value)) {\n    return null;\n  }\n  let alpha = 1;\n  const hex = [\"\", \"\", \"\"];\n  switch (value.length) {\n    case 4: {\n      alpha = parseInt(value[3] + value[3], 16) / 255;\n    }\n    case 3: {\n      hex[0] = value[0] + value[0];\n      hex[1] = value[1] + value[1];\n      hex[2] = value[2] + value[2];\n      break;\n    }\n    case 8: {\n      alpha = parseInt(value[6] + value[7], 16) / 255;\n    }\n    case 6: {\n      hex[0] = value[0] + value[1];\n      hex[1] = value[2] + value[3];\n      hex[2] = value[4] + value[5];\n      break;\n    }\n    default:\n      return null;\n  }\n  return alpha === 0 ? {\n    type: \"transparent\"\n  } : {\n    type: \"rgb\",\n    r: parseInt(hex[0], 16),\n    g: parseInt(hex[1], 16),\n    b: parseInt(hex[2], 16),\n    alpha\n  };\n}\nfunction stringToColor(value) {\n  value = value.toLowerCase().trim();\n  if (colorKeywords[value]) {\n    return { ...colorKeywords[value] };\n  }\n  if (value.indexOf(\"(\") !== -1) {\n    return fromFunction(value);\n  }\n  return fromHex(value);\n}\nfunction compareColors(color1, color2) {\n  if (color1.type === color2.type) {\n    let testKeys = new Set(Object.keys(color1));\n    switch (color1.type) {\n      case \"hsl\": {\n        if (color1.s === 0) {\n          testKeys.delete(\"h\");\n        }\n        if (color1.l === 0 || color1.l === 100) {\n          testKeys.delete(\"h\");\n          testKeys.delete(\"s\");\n        }\n      }\n      case \"rgb\":\n        if (color1.alpha === 0) {\n          testKeys = /* @__PURE__ */ new Set([\"a\"]);\n        }\n    }\n    const keys = Array.from(testKeys);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (color1[key] !== color2[key]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  const list = [color1, color2].sort((a, b) => a.type.localeCompare(b.type));\n  const item1 = list[0];\n  const item2 = list[1];\n  switch (item1.type) {\n    case \"hsl\": {\n      switch (item2.type) {\n        case \"rgb\": {\n          return compareColors(item1, rgb2hsl(item2));\n        }\n        case \"transparent\":\n          return item1.alpha === 0;\n      }\n      return false;\n    }\n    case \"rgb\": {\n      switch (item2.type) {\n        case \"transparent\":\n          return item1.alpha === 0;\n      }\n    }\n  }\n  return false;\n}\nfunction colorToHexString(color, canCompact = true) {\n  if (color.alpha !== 1) {\n    return null;\n  }\n  let result = \"\";\n  const attrs = [\"r\", \"g\", \"b\"];\n  for (let i = 0; i < attrs.length; i++) {\n    const value = color[attrs[i]];\n    if (Math.round(value) !== value) {\n      return null;\n    }\n    const hex = value.toString(16);\n    result += (value < 16 ? \"0\" : \"\") + hex;\n  }\n  if (result.length !== 6) {\n    return null;\n  }\n  if (canCompact && result[0] === result[1] && result[2] === result[3] && result[4] === result[5]) {\n    result = result[0] + result[2] + result[4];\n  }\n  return \"#\" + result;\n}\nfunction colorToString(color) {\n  if (color.alpha === 0) {\n    return \"transparent\";\n  }\n  switch (color.type) {\n    case \"none\":\n    case \"transparent\":\n      return color.type;\n    case \"current\":\n      return \"currentColor\";\n    case \"rgb\": {\n      const hex = colorToHexString(color);\n      if (hex !== null) {\n        return hex;\n      }\n      const list = [color.r, color.g, color.b];\n      if (color.alpha !== 1) {\n        list.push(color.alpha);\n      }\n      return \"rgb\" + (list.length === 4 ? \"a(\" : \"(\") + list.join(\", \") + \")\";\n    }\n    case \"hsl\": {\n      const list = [\n        color.h,\n        color.s.toString() + \"%\",\n        color.l.toString() + \"%\"\n      ];\n      if (color.alpha !== 1) {\n        list.push(color.alpha);\n      }\n      return \"hsl\" + (list.length === 4 ? \"a(\" : \"(\") + list.join(\", \") + \")\";\n    }\n    case \"lab\": {\n      const list = [color.l.toString() + \"%\", color.a, color.b];\n      if (color.alpha !== 1) {\n        list.push(\"/ \" + color.alpha.toString());\n      }\n      return \"lab(\" + list.join(\" \") + \")\";\n    }\n    case \"lch\": {\n      const list = [color.l.toString() + \"%\", color.c, color.h];\n      if (color.alpha !== 1) {\n        list.push(\"/ \" + color.alpha.toString());\n      }\n      return \"lch(\" + list.join(\" \") + \")\";\n    }\n    case \"function\": {\n      return color.func + \"(\" + color.value + \")\";\n    }\n  }\n}\n\nexport { colorToHexString, colorToString, compareColors, stringToColor };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}